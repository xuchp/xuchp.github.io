const t={map:'[{"css":["0.0","0.3","0.4","0.14"],"介绍一下":["0.1"],"line":["0.2"],"用":["0.5"],"一个盒子不给宽度和高度如何实现水平垂直居中":["0.6"],"display":["0.7","0.15"],"对":["0.8"],"清除浮动有哪些方式":["0.9"],"在网页中应该使用奇数还是偶数的字体大小":["0.10"],"position":["0.11"],"写一个左中右布局占满屏幕":["0.12"],"什么是":["0.13","69.0"],"opacity":["0.16"],"before":["0.17"],"怎么让":["0.18"],"rem":["0.19"],"webkit":["0.20"],"响应式":["0.21"],"布局方案":["0.22"],"html":["2.0","70.0"],"行内元素有哪些":["2.1"],"页面导入样式时":["2.2"],"title":["2.3"],"img":["2.4"],"png":["2.5"],"什么是语义化标签":["2.6"],"ios":["3.0","3.2"],"如何关闭":["3.1"],"禁止":["3.3","3.4","3.6"],"禁止下载图片":["3.5"],"数据类型":["4.0","13.23","71.23"],"数据类型分类":["4.1"],"数据类型检测":["4.2"],"数据类型转换":["4.3"],"浅拷贝和深拷贝":["4.4"],"浅拷贝":["4.5"],"深拷贝":["4.6"],"继承":["4.7"],"常见的实现继承的方法":["4.8"],"如何实现new":["4.9"],"闭包":["4.10","5.37"],"闭包的定义":["4.11"],"闭包产生的原因":["4.12"],"闭包的表现形式":["4.13"],"json":["4.14"],"数组":["4.15"],"array":["4.16","4.17","4.18"],"数组扁平化":["4.19"],"数组排序":["4.21"],"排序分类":["4.23"],"sort排序":["4.24"],"js":["5.0","5.2","5.5","5.6","5.11","5.15","5.20","5.29","5.42"],"延迟加载":["5.1"],"null":["5.3","13.26","71.26"],"和":["5.4"],"面试的时候怎么看":["5.7"],"考题":["5.8"],"考题二":["5.9","5.13","5.17","5.58"],"考题三":["5.10","5.14","5.18","5.59"],"考题一":["5.12","5.16","5.57"],"考题四":["5.19"],"方式一":["5.21","5.30","5.43","5.61"],"方式二":["5.22","5.31","5.44","5.62"],"方式三":["5.23","5.32","5.45","5.63"],"方式四":["5.24","5.46"],"方式五":["5.25"],"slice":["5.26","5.27"],"splice":["5.28"],"找出多维数组最大值":["5.33"],"给字符串新增方法实现功能":["5.34"],"找出字符串出现最多次数的字符以及次数":["5.35"],"new":["5.36"],"原型链":["5.41"],"说一下":["5.47"],"共同点":["5.48"],"区别":["5.49"],"场景":["5.50"],"sort":["5.51"],"深拷贝和浅拷贝":["5.52"],"localstorage":["5.53"],"自适应":["5.54"],"var":["5.55","13.13","13.14","13.15","71.13","71.14","71.15"],"作用域考题":["5.56"],"将下列对象进行合并":["5.60"],"箭头函数和普通函数有什么区别":["5.64"],"promise":["5.65"],"find":["5.66"],"some":["5.67"],"tstststst":["6.0"],"一":["7.0","84.1","85.1"],"webpack":["8.0","8.1"],"markdown":["10.0"],"syntax":["10.1"],"custom":["10.2"],"more":["10.3"],"image":["11.0"],"语言基础":["13.0","71.0"],"语法":["13.1","71.1"],"区分大小写":["13.2","71.2"],"标识符":["13.3","71.3"],"注释":["13.4","71.4"],"严格模式":["13.5","71.5"],"关键字和保留字":["13.6","71.6"],"关键字":["13.7","71.7"],"保留字":["13.8","71.8"],"始终保留":["13.9","71.9"],"严格模式下保留":["13.10","71.10"],"模块代码中保留":["13.11","71.11"],"变量":["13.12","71.12"],"let":["13.16","71.16"],"for":["13.20","71.20"],"const":["13.21","71.21"],"声明风格及最佳实践":["13.22","71.22"],"typeof":["13.24","71.24"],"undefined":["13.25","71.25"],"boolean":["13.27","71.27"],"布尔值和不同类型之间的转换规则":["13.28","71.28"],"number":["13.29","71.29"],"数值字面量格式":["13.30","71.30"],"浮点值":["13.31","71.31"],"值的范围":["13.32","71.32"],"nan":["13.33","71.33"],"数值转换":["13.34","71.34"],"string":["13.35","71.35"],"字符字面量":["13.36","71.36"],"字符串的特点":["13.37","71.37"],"转换为字符串":["13.38","71.38"],"模板字面量":["13.39","71.39"],"字符串插值":["13.40","71.40"],"模板字面量标签函数":["13.41","71.41"],"原始字符串":["13.42","71.42"],"symbol":["13.43","13.48","13.49","13.50","13.51","13.52","13.53","13.54","13.55","13.56","13.57","13.58","13.59","71.43","71.48","71.49","71.50","71.51","71.52","71.53","71.54","71.55","71.56","71.57","71.58","71.59"],"符号的基本使用":["13.44","71.44"],"使用全局符号注册表":["13.45","71.45"],"使用符号作为属性":["13.46","71.46"],"常用内置符号":["13.47","71.47"],"object":["13.60","71.60"],"操作符":["13.61","71.61"],"一元操作符":["13.62","71.62"],"递增":["13.63","71.63"],"一元加和减":["13.64","71.64"],"位操作符":["13.65","71.65"],"按位非":["13.66","71.66"],"按位与":["13.67","71.67"],"按位或":["13.68","71.68"],"左移":["13.69","71.69"],"有符号右移":["13.70","71.70"],"无符号右移":["13.71","71.71"],"布尔操作符":["13.72","71.72"],"逻辑非":["13.73","71.73"],"逻辑与":["13.74","71.74"],"逻辑或":["13.75","71.75"],"乘性操作符":["13.76","71.76"],"乘法操作符":["13.77","71.77"],"除法运算符":["13.78","71.78"],"取模运算符":["13.79","71.79"],"指数操作符":["13.80","71.80"],"加性操作符":["13.81","71.81"],"加法操作符":["13.82","71.82"],"减法操作符":["13.83","71.83"],"关系操作符":["13.84","71.84"],"相等操作符":["13.85","71.85"],"等于和不等于":["13.86","71.86"],"全等和不全等":["13.87","71.87"],"条件操作符":["13.88","71.88"],"赋值操作符":["13.89","71.89"],"逗号操作符":["13.90","71.90"],"语句":["13.91","71.91"],"补充":["17.1"],"解释":["25.0","75.14","75.18","75.25","75.29","81.3"],"如何将":["27.0"],"不稳定结构":["68.3"],"v":["68.4","68.5"],"稳定":["68.6"],"javascript":["69.1","69.2","69.7"],"ecmascript":["69.3"],"dom":["69.4","69.5","73.0"],"bom":["69.6"],"script":["70.1"],"扩展路由的meta":["72.0"],"题目":["73.1","73.5","73.9","73.12","73.15","74.1","74.4","74.7","75.1","75.6","75.9","75.12","75.16","75.20","75.23","75.27","76.1","76.5","77.1","77.4","77.8","77.11","77.14","77.17","78.1","78.4","79.1","80.1","81.1","82.1","83.1"],"答案":["73.2","73.6","73.10","73.13","73.16","74.2","74.5","74.8","74.10","75.2","75.4","75.7","75.10","75.13","75.17","75.21","75.24","75.28","76.2","76.6","77.2","77.5","77.9","77.12","77.15","77.18","78.2","78.5","79.2","80.2","81.2","82.2"],"解答":["73.3","73.7","76.3","76.7","77.6"],"props":["73.4"],"函数式组件":["73.8"],"渲染函数":["73.11"],"树组件":["73.14"],"切换器":["74.0"],"计数器":["74.3"],"实现本地存储函数":["74.6"],"鼠标坐标":["74.9"],"生命周期钩子":["75.0","80.0"],"ref":["75.3"],"响应性丢失":["75.5"],"可写的计算属性":["75.8"],"watch":["75.11"],"浅层":["75.15"],"依赖注入":["75.19"],"effect":["75.22"],"自定义":["75.26"],"动态":["76.0"],"全局":["76.4"],"大写":["77.0"],"优化性能的指令":["77.3"],"切换焦点的指令":["77.7"],"防抖点击指令":["77.10"],"激活的样式":["77.13"],"实现简易的":["77.16"],"阻止冒泡事件":["78.0"],"按键修饰符":["78.3"],"下一次":["79.0"],"原始值":["81.0"],"until":["82.0"],"自定义元素":["83.0"],"pinia":["84.0"],"二":["84.2","85.2"],"三":["84.3","85.3"],"四":["84.4","85.4"],"key":["84.5"],"storage":["84.6"],"paths":["84.7"],"serializer":["84.8"],"beforerestore":["84.9"],"afterrestore":["84.10"],"debug":["84.11"],"批量导入":["85.0"],"五":["85.5"],"目录":["86.0"],"options":["87.1"],"setup":["87.3"]},{"0":["4.3","4.23","11.50","13.33","13.34","66.0","71.33","71.34"],"1":["0.21","0.22","4.2","4.3","4.5","4.6","4.8","4.9","4.13","4.19","4.23","5.3","5.5","5.6","5.7","5.8","5.31","5.32","5.38","5.40","5.41","5.49","5.52","5.64","7.1","7.2","7.3","7.4","7.5","7.6","7.7","7.8","7.9","7.11","7.15","11.1","11.2","11.3","11.4","11.5","11.6","11.7","11.8","11.9","11.13","11.19","11.27","11.34","11.36","11.58","11.60","11.67","11.69","11.80","11.82","11.83","11.84","11.89","11.123","11.128","11.136","13.17","13.22","13.34","13.60","13.77","13.78","13.82","13.83","14.0","14.1","14.2","14.3","14.4","14.5","15.1","15.2","15.3","16.1","16.2","16.3","19.1","19.2","19.3","20.1","20.2","21.1","21.2","22.0","23.1","23.2","23.3","24.1","24.2","24.3","25.1","25.2","31.1","31.2","32.1","32.2","33.1","33.2","34.1","34.2","34.3","35.1","35.2","39.1","39.2","40.1","40.2","40.3","41.1","41.2","41.3","42.1","42.2","42.3","44.1","44.2","47.1","47.2","47.3","48.1","49.1","49.2","49.3","49.4","50.1","50.2","50.3","56.1","60.2","60.3","60.4","60.5","67.1","67.2","67.3","68.1","68.2","70.1","71.17","71.22","71.34","71.60","71.77","71.78","71.82","71.83","72.0","78.2","87.0","87.7"],"2":["0.21","4.2","4.3","4.6","4.8","4.9","4.16","4.19","4.23","5.39","7.3","7.10","7.11","11.3","11.4","11.7","11.9","11.10","11.11","11.12","11.13","11.14","11.15","11.16","11.17","11.18","11.19","11.20","11.21","11.22","11.23","11.24","11.25","11.26","11.27","11.28","11.29","11.30","11.31","11.32","11.33","11.34","11.35","11.36","11.37","11.38","11.39","11.40","11.41","11.42","11.43","11.44","11.45","11.46","11.47","11.48","11.49","11.50","11.51","11.52","11.53","11.54","11.55","11.56","11.57","11.58","11.59","11.60","11.61","11.62","11.63","11.64","11.65","11.66","11.67","11.68","11.69","11.70","11.71","11.72","11.73","11.74","11.75","11.76","11.77","11.80","11.83","11.87","11.89","11.90","11.91","11.92","11.93","11.96","11.103","11.110","11.118","11.121","11.128","11.130","11.140","13.18","13.63","13.65","13.82","13.83","14.2","15.0","15.2","19.2","21.2","31.2","32.2","33.2","39.2","42.2","44.2","47.2","49.2","50.2","60.3","67.2","68.2","70.1","71.18","71.63","71.65","71.82","71.83","87.2"],"3":["4.3","4.6","4.8","4.19","4.23","5.40","7.4","7.13","11.6","11.7","11.8","11.19","11.22","11.23","11.38","11.39","11.44","11.50","11.54","11.58","11.60","11.61","11.62","11.65","11.67","11.69","11.70","11.73","11.74","11.76","11.77","11.78","11.79","11.80","11.81","11.82","11.83","11.84","11.85","11.86","11.87","11.88","11.89","11.90","11.91","11.92","11.93","11.94","11.95","11.96","11.97","11.98","11.99","11.100","11.101","11.102","11.103","11.104","11.105","11.106","11.107","11.108","11.109","11.110","11.111","11.112","11.113","11.114","11.115","11.116","11.117","11.118","11.119","11.120","11.121","11.122","11.123","11.124","11.125","11.126","11.127","11.128","11.129","11.130","11.131","11.132","11.133","11.134","11.135","11.136","11.137","11.138","11.139","11.140","13.19","13.34","13.71","14.3","15.3","16.0","16.3","19.3","34.3","40.3","41.3","42.3","49.3","50.3","60.4","67.3","69.6","71.19","71.34","71.71","87.4"],"4":["4.3","4.6","4.8","4.19","5.33","11.27","11.28","11.31","11.32","11.40","11.45","11.55","11.67","11.69","11.70","11.73","11.76","11.77","11.92","11.100","11.103","11.106","11.107","11.117","11.118","11.136","14.4","17.0","49.4","60.5","87.5"],"5":["4.3","4.6","4.19","5.33","7.6","11.23","11.34","11.36","11.37","11.38","11.39","11.40","11.46","11.93","11.110","11.112","11.114","11.115","11.117","11.118","11.139","11.140","13.5","18.0","71.5","87.6"],"6":["4.6","4.23","7.7","7.12","7.13","11.43","11.44","11.45","11.46","11.121","11.123","11.124","13.47","19.0","71.47","87.7"],"7":["7.8","7.14","7.15","7.16","11.49","11.50","11.128","11.130","11.133","11.136","11.137","11.139","11.140","13.80","20.0","71.80","87.8"],"8":["7.9","11.53","11.54","11.55","21.0","70.1"],"9":["22.0"],"10":["5.19","23.0"],"11":["24.0"],"13":["26.0"],"15":["28.0"],"16":["29.0"],"17":["30.0"],"18":["19.3","31.0"],"19":["32.0"],"20":["33.0"],"21":["34.0"],"22":["35.0"],"23":["36.0"],"24":["37.0"],"25":["38.0"],"26":["39.0"],"27":["40.0"],"28":["41.0"],"29":["42.0"],"30":["43.0","44.0"],"31":["13.65","71.65"],"32":["45.0"],"33":["46.0"],"34":["4.23","47.0"],"35":["48.0"],"36":["49.0"],"37":["50.0"],"38":["51.0"],"39":["52.0"],"40":["53.0"],"41":["54.0"],"42":["55.0"],"43":["56.0"],"44":["57.0"],"45":["58.0"],"46":["59.0"],"47":["60.0"],"48":["61.0"],"49":["62.0"],"50":["63.0"],"51":["64.0"],"52":["65.0"],"53":["66.0"],"54":["67.0"],"55":["68.0"],"76":["4.23"],"100":["11.82"],"211":["4.23"],"222":["4.23"],"324":["13.32","71.32"],"456":["4.23"],"2023":["9.0"],"css":["0.1","0.5","0.13","3.2","3.5","76.0","76.4"],"的盒子模型":["0.1"],"的盒子模型有哪些":["0.1"],"height":["0.2","11.82"],"选字符有哪些":["0.3"],"哪些属性可以继承":["0.3"],"选择符":["0.3"],"优先算法如何计算":["0.4"],"优先级比较":["0.4"],"important":["0.4"],"内联样式":["0.4"],"html":["0.6","39.2","44.0","44.1","49.2","68.1","68.4","68.5"],"div":["0.6","41.3","68.1","68.4","68.5","74.5","75.4"],"class":["0.6","5.43"],"container":["0.6"],"main":["0.6","11.65","11.80","84.2"],"有哪些值":["0.7"],"说说他们的作用":["0.7"],"值":["0.7","13.40","71.40"],"描述":["0.7"],"bfc":["0.8","0.9"],"块级格式化上下文":["0.8"],"block":["0.8"],"formatting":["0.8"],"context":["0.8","84.9","84.10"],"方式一":["0.9"],"触发":["0.9"],"为什么呢":["0.10"],"有几种定位":["0.11"],"分别是根据什么定位的":["0.11"],"static":["0.11"],"默认值":["0.11","84.5","84.6","84.7","84.8","84.9","84.10"],"没有定位":["0.11"],"fixed":["0.11"],"其中左右两块固定":["0.12"],"200px":["0.12"],"中间自适应宽":["0.12"],"要求先加载中间块":["0.12"],"reset":["0.13"],"sprite":["0.14"],"是什么":["0.14","0.21","69.1"],"none":["0.15"],"和":["0.15","0.16","0.17","0.19","2.2","2.3","2.4","4.2","4.3","5.3","5.57","5.66","5.67","11.96","13.16","26.0","30.0","31.2","63.0","69.5","69.6","71.16"],"visibility":["0.15"],"rgba":["0.16"],"的区别":["0.16","2.3","5.3","5.53","5.55","26.0"],"共同性":["0.16"],"after":["0.17"],"chrome":["0.18"],"支持小于":["0.18"],"em":["0.19","2.3"],"表单输入框":["0.20"],"一个":["0.21"],"url":["0.21"],"可以响应多端":["0.21"],"什么情况下采用响应式布局":["0.22"],"数据不是特别多":["0.22"],"用户量不是特别大":["0.22"],"纯展示类的项目适合响应式布局":["0.22"],"例如":["0.22","11.54","11.82"],"公司的官网":["0.22"],"块级元素有哪些":["2.1"],"空":["2.1"],"void":["2.1","11.77","84.9","84.10"],"元素有哪些":["2.1"],"行内元素":["2.1"],"使用":["2.2","13.14","13.15","70.1","71.14","71.15","73.3","84.4"],"link":["2.2"],"h1":["2.3","68.1"],"b":["2.3"],"strong":["2.3"],"i":["2.3","4.23"],"标签的":["2.4"],"title":["2.4","41.3"],"jpg":["2.5"],"gif":["2.5"],"这些图片格式解释一下":["2.5"],"header":["2.6"],"footer":["2.6"],"兼容问题":["3.0"],"ios":["3.1","3.3","3.4","3.6"],"系统中元素被触摸时产生的半透明遮罩怎么去掉":["3.2"],"基础数据类型":["4.1"],"undefined":["4.1","4.6","5.3","13.34","71.34","75.14","84.7","84.9","84.10"],"null":["4.1","4.2","4.3","13.34","71.34"],"typeof":["4.2","13.44","71.44"],"instanceof":["4.2","5.22"],"的差异":["4.2"],"可以准确地判断复杂引用数据的类型":["4.2"],"但是不能正确判断基础数据类型":["4.2"],"而":["4.2"],"也存在弊端":["4.2"],"他虽然可以判断基础数据类型":["4.2"],"除外":["4.2"],"但是引用数据类型中":["4.2"],"除了":["4.2"],"function":["4.2","4.8","4.19","4.23","5.8","5.10","5.16","5.19","5.35","5.44","5.45","5.46","5.58","5.63","13.14","22.0","34.3","71.14"],"类型以外":["4.2"],"其他的也无法判断":["4.2"],"js":["4.2","4.5","4.8","4.19","4.23","5.1","5.8","5.9","5.10","5.12","5.13","5.14","5.16","5.17","5.18","5.19","5.25","5.28","5.30","5.31","5.32","5.33","5.34","5.35","5.43","5.44","5.45","5.46","5.50","5.52","5.58","5.59","5.60","5.63","13.14","13.31","13.90","22.0","47.2","49.3","71.14","71.31","71.90"],"myinstanceof":["4.2"],"left":["4.2"],"right":["4.2"],"这里先用":["4.2"],"来判断基础类型":["4.2"],"强制类型转换":["4.3"],"number":["4.3","11.77","13.32","13.33","13.34","49.3","71.32","71.33","71.34"],"parseint":["4.3","13.34","71.34"],"parsefloat":["4.3","13.34","71.34"],"tostring":["4.3"],"string":["4.3","5.2","5.34","11.80","11.87","49.3","84.5","84.7"],"boolean":["4.3","13.88","71.88"],"隐式类型转换":["4.3"],"逻辑运算符":["4.3"],"运算符":["4.3"],"关系操作符":["4.3"],"相等运算符":["4.3"],"if":["4.3","4.23","22.0","30.0","68.4"],"while":["4.3"],"条件":["4.3"],"方法强制转换规则":["4.3"],"如果是布尔值":["4.3"],"true":["4.3","13.28","13.34","13.86","49.3","71.28","71.34","71.86"],"false":["4.3","13.34","71.34"],"分别被转换为":["4.3"],"如果数数字":["4.3"],"返回自身":["4.3"],"如果是":["4.3"],"返回":["4.3","13.34","71.34"],"自己创建一个新的对象":["4.5"],"来接受你要重新复制或引用的对象值":["4.5"],"如果对象属性是基本的数据类型":["4.5"],"复制的就是基本类型的值给新对象":["4.5"],"但如果属性是引用数据类型":["4.5"],"复制的就是内存中的地址":["4.5"],"如果其中一个对象改变了内存中的地址":["4.5"],"肯定会影响到另一个对象":["4.5"],"实现浅拷贝的方法":["4.5"],"object":["4.5","5.61"],"assign":["4.5"],"是":["4.5","87.3"],"es6":["4.5","5.43"],"中":["4.5","11.50","13.32","13.33","43.0","65.0","71.32","71.33"],"的一个方法":["4.5"],"该方法可以用于":["4.5"],"浅拷贝只是创建了一个新的对象":["4.6"],"复制了原有对象的基本类型的值":["4.6"],"对于复杂引用数据类型":["4.6"],"其在堆内存中完全开辟了一块内存地址":["4.6"],"并将原有的对象完全复制过来存放":["4.6"],"深拷贝原理":["4.6"],"将一个对象从内存中完整地拷贝出来一份给目标对象":["4.6"],"并从堆内存中开辟一个全新的空间存放新对象":["4.6"],"且新对象的修改并不会改变原对象":["4.6"],"二者实现真正的分离":["4.6"],"实现深拷贝的方法":["4.6"],"乞丐版":["4.6"],"json":["4.6","84.8"],"stringify":["4.6","4.14","84.8"],"是目前开发中最简单的深拷贝的方法":["4.6"],"注意":["4.6"],"拷贝的对象的值如果有函数":["4.6"],"symbol":["4.6","13.44","13.45","71.44","71.45"],"这几种类型":["4.6"],"经过":["4.6"],"序列化之后的字符串中的键值对会消失":["4.6"],"拷贝":["4.6"],"date":["4.6","9.0"],"引用类型会变成字符串":["4.6"],"无法拷贝不可枚举的属性":["4.6"],"无法拷贝对象的原型链":["4.6"],"regexp引用类型会变成空对象":["4.6"],"对象中含有":["4.6"],"继承是面向对象的":["4.7"],"一":["4.8"],"原型链继承":["4.8","5.44"],"原型链继承是比较常见的继承方式之一":["4.8"],"其中涉及的构造函数":["4.8"],"原型和实例":["4.8"],"每一个构造函数都有一个原型对象":["4.8"],"原型对象又包含一个指向构造函数的指针":["4.8"],"而实例则包含一个原型对象的指针":["4.8"],"parent1":["4.8"],"this":["4.8","5.64","10.2","49.3"],"name":["4.8","5.9","5.18","19.3","41.3","45.0","49.3","68.1"],"play":["4.8"],"child1":["4.8"],"type":["4.8","85.4"],"child2":["4.8"],"prototype":["4.8","5.23"],"new":["4.8","4.9","4.16","5.30","28.0"],"var":["4.8","4.19","4.23","5.9","5.13","5.14","5.17","5.19","5.31","5.32","5.33","5.35","5.50","5.52","5.58","13.16","13.17","13.25","71.16","71.17","71.25"],"s1":["4.8"],"s2":["4.8"],"push":["4.8","4.18"],"console":["4.8","4.23","5.16"],"log":["4.8","4.23","5.16"],"image":["4.8","4.23","11.80","11.82"],"20240117094112987":["4.8"],"原型链继承内存空间是共享的":["4.8"],"apply":["4.9","5.50"],"call":["4.9","5.47"],"bind的底层逻辑":["4.9"],"javascript中的apply":["4.9"],"call和bind方法是前端代码开发中相当重要的概念":["4.9"],"并且与this的指向密切相关":["4.9"],"new原理介绍":["4.9"],"关键词的主要作用":["4.9"],"就是指向一个构造函数":["4.9"],"返回一个实例对象":["4.9"],"根据构造函数的情况":["4.9"],"来确定是否可以接受参数的传递":["4.9"],"执行过程":["4.9"],"创建一个新对象":["4.9"],"将构造函数的作用域赋给新对象":["4.9"],"javascript":["4.10","19.3","41.3","69.0"],"红宝书":["4.11"],"作用域链的基本概念":["4.12"],"返回一个函数":["4.13"],"是日常开发中经常用到的":["4.14"],"的构造器":["4.16"],"构造器用于创建一个新的数组":["4.16"],"通常推荐使用对象字面量的方式创建一个数组":["4.16"],"arg1":["4.16"],"arg2":["4.16"],"参数长度为0":["4.16"],"或长度大于等于":["4.16"],"时":["4.16","13.15","71.15"],"的判断":["4.17"],"的方法":["4.18"],"改变自身的方法":["4.18"],"pop":["4.18"],"reverse":["4.18"],"数组的扁平化其实就是讲一个嵌套多层的数组":["4.19"],"array":["4.19","4.23"],"嵌套可以是任何层数":["4.19"],"转化为只有一层的数组":["4.19"],"扁平化实现方法":["4.19"],"普通的递归实现":["4.19"],"通过循环递归的方式":["4.19"],"一项一项地去遍历":["4.19"],"如果每一项还是数组":["4.19"],"那么就继续往下遍历":["4.19"],"利用递归程序的方法":["4.19"],"来实现数组的每一项的连接":["4.19"],"a":["4.19","4.23","5.14","13.33","68.4","71.33"],"flatten":["4.19"],"arr":["4.19","4.24","5.31","5.32","5.33","5.50","11.77"],"let":["4.19","4.23","5.55","5.57","13.17","13.20","13.21","13.31","19.3","71.17","71.20","71.21","71.31"],"result":["4.19"],"for":["4.19","4.23","13.45","68.5","71.45"],"时间复杂度":["4.21"],"比较类排序":["4.23"],"通过比较来决定元素之间的相对次序":["4.23"],"其时间复杂度不能突破":["4.23"],"o":["4.23","5.17"],"nlogn":["4.23"],"因此也成为非线性时间比较类排序":["4.23"],"非比较类排序":["4.23"],"不通过比较来决定元素之间的相对次序":["4.23"],"它可以突破基于比较排序的时间下界":["4.23"],"以线性时间运行":["4.23"],"因此也称为线性时间非比较类排序":["4.23"],"20240117155801276":["4.23"],"冒泡排序":["4.23"],"bubblesort":["4.23"],"const":["4.23","5.55"],"len":["4.23"],"length":["4.23","5.19"],"return":["4.23"],"j":["4.23"],"temp":["4.23"],"通过":["4.24","68.1"],"sort":["4.24","5.32"],"方法也可以实现数组的排序":["4.24"],"默认排序顺序是先将元素转换为字符串":["4.24"],"然后再进行排序":["4.24"],"语法是":["4.24"],"comparefunction":["4.24"],"有哪些方式":["5.1"],"async":["5.1","70.1"],"数据类型有哪些":["5.2"],"基本类型":["5.2"],"作者在设计":["5.3"],"有什么不同":["5.4"],"比较的是值":["5.4"],"微任务和宏任务":["5.5"],"是单线程的语言":["5.5"],"作用域":["5.6","5.15","75.22"],"除了函数外":["5.6"],"对象":["5.11","11.23"],"对象注意点":["5.11"],"obj1":["5.13"],"foo":["5.16"],"getname":["5.16"],"window":["5.18"],"bytedance":["5.18"],"判断变量是不是数组":["5.20"],"isarray":["5.21"],"原型":["5.23"],"isprototypeof":["5.24"],"constructor":["5.25"],"是干嘛的":["5.26"],"是来截取的":["5.27"],"数组去重":["5.29"],"set":["5.30","22.0"],"indexof":["5.31"],"s":["5.35"],"aaaaaaabbbbbbcccccbbbbaaaaaabbbbbcccaaa":["5.35"],"getmost":["5.35"],"str":["5.35"],"操作符具体做了什么":["5.36"],"闭包可以解决什么问题":["5.39"],"闭包的优点":["5.39"],"闭包的缺点":["5.40"],"变量会驻留在内存中":["5.40"],"造成内存损耗问题":["5.40"],"原型可以解决什么问题":["5.41"],"继承有哪些方式":["5.42"],"借用构造函数":["5.45"],"组合式继承":["5.46"],"功能一致":["5.48"],"返回不同":["5.49"],"用":["5.50"],"的情况":["5.50"],"背后的原理是什么":["5.51"],"v8":["5.51"],"引擎":["5.51"],"共同点":["5.52","5.53"],"复制":["5.52"],"浅拷贝":["5.52"],"只复制引用":["5.52"],"而未复制真正的值":["5.52"],"arr1":["5.52"],"sessionstorage":["5.53"],"cookie":["5.53"],"在客户端存放数据":["5.53"],"淘宝无限适配移动端":["5.54"],"布局单位使用":["5.54"],"rem":["5.54"],"没有自身作用域":["5.58"],"解构":["5.62"],"自定义":["5.63"],"指向的问题":["5.64"],"的几种状态":["5.65"],"filter":["5.66"],"vue2":["7.0","19.2","19.3","31.1","66.0"],"生命周期有哪些":["7.2"],"发送请求在":["7.2"],"为什么发送请求不在":["7.3"],"beforecreate":["7.3"],"里":["7.3"],"在created":["7.4"],"加入":["7.8"],"组件传值":["7.11"],"通信":["7.11"],"的方式":["7.11"],"插件":["8.1"],"extension":["10.0"],"examples":["10.0"],"highlighting":["10.1"],"vitepress":["10.1"],"provides":["10.1"],"containers":["10.2"],"input":["10.2"],"md":["10.2"],"info":["10.2"],"is":["10.2"],"an":["10.2"],"check":["10.3"],"png":["11.0"],"安装ide":["11.2"],"鸿蒙应用开发需要使用配套的ide":["11.2"],"huawei":["11.2"],"deveco":["11.2"],"studio":["11.2","11.3"],"配置ide":["11.3"],"安装完成后":["11.3"],"可按以下步骤完成初始化配置":["11.3"],"双击桌面快捷方式":["11.3"],"启动deveco":["11.3"],"创建项目":["11.4"],"下面我们创建第一个鸿蒙应用项目":["11.4"],"模拟器运行":["11.7"],"previewer":["11.7"],"预览器主要用于查看界面ui效果":["11.7"],"如需对项目进行更加深入的测试":["11.7"],"可以使用模拟器运行项目":["11.7"],"初次使用需要先安装模拟器":["11.7"],"安装步骤如下":["11.7"],"真机运行":["11.8"],"使用模拟器运行应用时":["11.8"],"会占用电脑较多的资源":["11.8"],"并且有些功能无法进行测试":["11.8"],"当模拟器不满足要求时":["11.8"],"可选择真机运行":["11.8"],"真机运行的步骤如下":["11.8"],"准备一台装有":["11.8"],"本地运行环境":["11.13"],"除去线上的运行环境":["11.13"],"我们也可以在本地搭建一个":["11.13"],"ts":["11.13","11.46"],"的运行环境":["11.13"],"安装":["11.13"],"在ts中":["11.23"],"特殊语法":["11.27"],"可选参数":["11.27"],"可选参数通过参数名后的":["11.27"],"进行标识":["11.27"],"如以下案例中的":["11.27"],"gender":["11.27"],"参数":["11.27","11.80","11.87","11.96","11.103","11.110","11.121"],"函数声明特殊语法":["11.32"],"静态成员":["11.38"],"typescript":["11.38","11.45","11.46","11.54","11.77","34.3","85.4"],"继承":["11.39"],"继承是面向对象编程中的重要机制":["11.39"],"允许一个类":["11.39"],"子类或派生类":["11.39"],"访问修饰符":["11.40"],"access":["11.40"],"语法说明":["11.43","11.49","11.53","11.69","11.77"],"接口定义":["11.43"],"接口使用":["11.43"],"interface":["11.43"],"多态":["11.44"],"是面相对象编程中的一个重要概念":["11.44"],"它可以使同一类型的对象具有不同的行为":["11.44"],"下面我们通过一个具体的案例来体会":["11.44"],"这一概念":["11.44"],"首先":["11.44"],"再创建一个":["11.44"],"接口的作用":["11.45"],"在传统的面向对象编程的场景中":["11.45"],"接口主要用于设计和组织代码":["11.45"],"使代码更加容易扩展和维护":["11.45"],"下面举例说明":["11.45"],"假如现在需要实现一个订单支付系统":["11.45"],"按照面向对象编程的习惯":["11.45"],"首先需要定义一个订单类":["11.45"],"order":["11.45"],"如下":["11.45","11.49"],"中的接口的特殊性":["11.46"],"枚举定义":["11.49"],"枚举的定义需使用":["11.49"],"enum":["11.49","13.9","71.9"],"关键字":["11.49","13.13","71.13"],"赋值":["11.50"],"在typescript":["11.50"],"枚举实际上是一个对象":["11.50"],"而每个枚举值都是该对象的一个属性":["11.50"],"并且每个属性都有具体的值":["11.50"],"属性值只支持两种类型":["11.50"],"数字或字符串":["11.50"],"默认情况下":["11.50"],"每个属性的值都是数字":["11.50"],"并且从":["11.50"],"开始递增":["11.50"],"避免命名冲突":["11.54"],"若多个模块中具有命名相同的变量":["11.54"],"函数等内容":["11.54"],"将这些内容导入到同一模块下就会出现命名冲突":["11.54"],"在上述案例的基础上":["11.54"],"又增加了一个":["11.54"],"modulec":["11.54"],"内容如下":["11.54"],"默认导入导出":["11.55"],"完整代码":["11.65"],"案例的完整代码见":["11.65"],"demos":["11.65","11.80"],"entry":["11.65","11.80"],"src":["11.65","11.80","70.1"],"声明组件":["11.67"],"下面通过一个相对简单的案例来系统的学习":["11.67"],"arkts":["11.67","11.82","11.121","11.136"],"声明组件的语法":["11.67"],"案例的最终效果如下":["11.67"],"自定义组件的语法如下图所示":["11.69"],"foreach":["11.77"],"循环渲染的语法如下":["11.77"],"any":["11.77"],"itemgenerator":["11.77"],"item":["11.77"],"index":["11.77"],"keygenerator":["11.77"],"组件的参数类型为":["11.80","11.87"],"resource":["11.80"],"media":["11.80","11.82"],"pixelmap":["11.80"],"相关案例见":["11.80"],"ets":["11.80"],"pages":["11.80"],"component":["11.80"],"parameter":["11.80"],"solution":["11.80"],"imageparameter":["11.80"],"下面对三种参数类型逐一进行介绍":["11.80"],"类型":["11.80","13.25","13.26","13.27","13.29","13.35","13.43","13.60","71.25","71.26","71.27","71.29","71.35","71.43","71.60","84.5","84.6","84.7","84.8","84.9","84.10","84.11"],"类型的参数用于通过路径的方式引用图片":["11.80"],"图片尺寸":["11.82"],"图片尺寸可通过":["11.82"],"width":["11.82"],"方法和":["11.82"],"方法进行设置":["11.82","11.90"],"r":["11.82"],"app":["11.82"],"img":["11.82"],"图片缩放":["11.83"],"当图片的原始大小与image组件不同时":["11.83"],"可通过":["11.83","11.123"],"图片插值":["11.84"],"当原图分辨率较低并且需要放大显示时":["11.84"],"text":["11.87"],"字体大小":["11.89"],"字体大小可通过":["11.89"],"字体粗细":["11.90"],"字体粗细可通过":["11.90"],"fontweight":["11.90"],"该方法参数类型为":["11.90"],"字体颜色":["11.91"],"字体颜色可通过":["11.91"],"fontcolor":["11.91"],"最大行数和超长处理":["11.93"],"button":["11.96","73.5"],"组件有两种使用方式":["11.96"],"分别是":["11.96"],"不包含子组件":["11.96"],"包含子组件":["11.96"],"常用事件":["11.100","11.107"],"toggle":["11.103","11.107"],"组件的参数定义如下":["11.103","11.121"],"组件常用的事件为change事件":["11.107"],"焦点事件":["11.118"],"progress":["11.121"],"进度条样式":["11.123"],"style":["11.123"],"调整进度条的样式":["11.123"],"使用说明":["11.128","11.140"],"可使用":["11.128"],"ohos":["11.128"],"概述":["11.136","87.3"],"选择器弹窗用于让用户从一个列表中选择一个具体的值":["11.136"],"内置了多种选择器弹窗":["11.136"],"显示自定义弹窗需要使用":["11.140"],"ecmascript":["13.2","13.4","13.5","13.12","13.23","13.24","13.32","13.33","13.39","13.47","13.73","13.76","13.80","13.86","71.2","71.4","71.5","71.12","71.23","71.24","71.32","71.33","71.39","71.47","71.73","71.76","71.80","71.86"],"中一切都是区分大小写的":["13.2","71.2"],"所谓标识符":["13.3","71.3"],"就是变量":["13.3","71.3"],"采用":["13.4","71.4"],"新增了严格模式的概念":["13.5","71.5"],"严格模式是一种不同的":["13.5","71.5"],"bash":["13.7","71.7","85.1"],"break":["13.7","71.7"],"do":["13.7","71.7"],"in":["13.7","71.7"],"ecma":["13.8","71.8"],"implements":["13.10","71.10"],"await":["13.11","71.11"],"中有":["13.12","71.12"],"要定义变量":["13.13","71.13"],"可以使用":["13.13","71.13"],"声明作用域":["13.14","71.14"],"操作符定义的变量会成为包含它的函数的局部变量":["13.14","71.14"],"比如":["13.14","71.14"],"在一个函数内部定义了一个变量":["13.14","71.14"],"就意味着该变量将在函数退出时被销毁":["13.14","71.14"],"test":["13.14","71.14"],"声明提升":["13.15","71.15"],"下面的代码不会报错":["13.15","71.15"],"这是因为使用了这个关键字声明的变量会自动提升到函数的作用域顶部":["13.15","71.15"],"声明":["13.16","13.21","71.16","71.21"],"的作用差不多":["13.16","71.16"],"但是有着非常重要的区别":["13.16","71.16"],"最明显的区别就是":["13.16","71.16"],"暂时性死区":["13.17","71.17"],"与":["13.17","13.18","19.3","71.17","71.18","87.8"],"全局声明":["13.18","71.18"],"循环中的":["13.20","71.20"],"在":["13.20","13.33","28.0","65.0","71.20","71.33","76.3","84.2","85.2","85.5"],"出现之前":["13.20","71.20"],"的行为与":["13.21","71.21"],"基本相同":["13.21","71.21"],"唯一一个重要的区别是用它声明变量时必须同时初始化变量":["13.21","71.21"],"且尝试修改":["13.21","71.21"],"操作符":["13.24","71.24"],"因为":["13.24","71.24"],"的类型系统是松散的":["13.24","71.24"],"类型只有一个值":["13.25","71.25"],"就是特殊值":["13.25","71.25"],"当":["13.25","71.25"],"类型同样只有一个值":["13.26","71.26"],"即特殊值":["13.26","71.26"],"逻辑上讲":["13.26","71.26"],"类型是":["13.27","71.27"],"数据类型":["13.28","71.28"],"转换为":["13.28","13.34","71.28","71.34","87.8"],"十进制":["13.30","71.30"],"直接写出来即可":["13.30","71.30"],"八进制":["13.30","71.30"],"要定义浮点值":["13.31","71.31"],"数值中必须包含小数点":["13.31","71.31"],"而且小数点后面必须至少有一个数字":["13.31","71.31"],"虽然小数点前面不是必须有整数":["13.31","71.31"],"但推荐加上":["13.31","71.31"],"floatnumber1":["13.31","71.31"],"可以保存的最小数值保存在":["13.32","71.32"],"min":["13.32","71.32"],"value":["13.32","71.32"],"这个值多数浏览器是":["13.32","71.32"],"5e":["13.32","71.32"],"有一个特殊的值叫":["13.33","71.33"],"意思是":["13.33","71.33"],"不是数值":["13.33","71.33"],"not":["13.33","71.33"],"用于表示本来要返回数值的操作失败了":["13.33","71.33"],"而不是抛出错误":["13.33","71.33"],"有":["13.34","71.34"],"个函数可以将非数值转换为数值":["13.34","71.34"],"是转型函数":["13.34","71.34"],"可用于任何数据类型":["13.34","71.34"],"后两个函数主要用于将字符串转化为数值":["13.34","71.34"],"函数基于如下规则执行转换":["13.34","71.34"],"布尔值":["13.34","71.34"],"数值":["13.34","71.34"],"直接返回":["13.34","71.34"],"nan":["13.34","13.82","13.83","71.34","71.82","71.83"],"字符串":["13.34","71.34"],"应用一下规则":["13.34","71.34"],"如果字符串包含数值字符":["13.34","71.34"],"包括数字字符前面带加":["13.34","71.34"],"减号的情况":["13.34","71.34"],"则转换为一个十进制数":["13.34","71.34"],"因此":["13.34","71.34"],"字符串数据类型包含一些字符字面量":["13.36","71.36"],"用于表示非打印字符或有其他用途的字符":["13.36","71.36"],"字面量":["13.36","71.36"],"含义":["13.36","71.36"],"n":["13.36","71.36"],"换行":["13.36","71.36"],"t":["13.36","71.36"],"字符串是不可变的":["13.37","71.37"],"有两种方式将一个值转换为字符串":["13.38","71.38"],"模板字面量最常用的一个特性是支持字符串插值":["13.40","71.40"],"也就是可以在一个连续定义中插入一个或多个":["13.40","71.40"],"模板字面量也支持定义标签函数":["13.41","71.41"],"使用模板字面量也可以直接获取原始的模板字面量内容":["13.42","71.42"],"符号需要使用":["13.44","71.44"],"函数初始化":["13.44","71.44"],"因为符号本身是基本类型":["13.44","71.44"],"所以":["13.44","71.44"],"如果运行时的不同部分需要共享和重用符号实例":["13.45","71.45"],"那么可以用一个字符串作为键":["13.45","71.45"],"在全局符号注册表中创建并重用符号":["13.45","71.45"],"对每个字符串键都执行幂等操作":["13.45","71.45"],"第一次使用某个字符串调用时":["13.45","71.45"],"它会检查全局运行时注册表":["13.45","71.45"],"凡是可以使用字符串或数值作为属性的地方":["13.46","71.46"],"也引入了一批常用内置符号":["13.47","71.47"],"well":["13.47","71.47"],"known":["13.47","71.47"],"asynciterator":["13.48","71.48"],"hasinstance":["13.49","71.49"],"isconcatspreadable":["13.50","71.50"],"iterator":["13.51","71.51"],"match":["13.52","71.52"],"replace":["13.53","71.53"],"search":["13.54","71.54"],"species":["13.55","71.55"],"split":["13.56","71.56"],"toprimitive":["13.57","71.57"],"tostringtag":["13.58","71.58"],"unscopables":["13.59","71.59"],"每个":["13.60","71.60"],"实例都有如下属性和方法":["13.60","71.60"],"只操作一个值的操作符叫一元操作符":["13.62","71.62"],"递减操作符":["13.63","71.63"],"递增和递减操作符有两个版本":["13.63","71.63"],"前缀版和后缀版":["13.63","71.63"],"两个版本的区别是后缀版的递增和递减在语句被求值后才发生":["13.63","71.63"],"这":["13.63","71.63"],"对操作符可以用作于任何值":["13.63","71.63"],"一元加和减操作符对大多数开发者来说并不陌生":["13.64","71.64"],"它们在":["13.64","71.64"],"正值以真正的二进制格式存储":["13.65","71.65"],"即":["13.65","71.65"],"位中的每一位都代表":["13.65","71.65"],"的幂":["13.65","71.65"],"按位非操作符用波浪符":["13.66","71.66"],"表示":["13.66","13.67","13.68","13.73","13.74","13.75","13.77","13.78","13.79","13.86","71.66","71.67","71.68","71.73","71.74","71.75","71.77","71.78","71.79","71.86"],"按位与操作符用和号":["13.67","71.67"],"按位或操作符用管道符":["13.68","71.68"],"同样有两个操作数":["13.68","71.68"],"按位或遵循如下真值表":["13.68","71.68"],"左移操作符用两个小于号":["13.69","71.69"],"有符号右移由两个大于号":["13.70","71.70"],"无符号右移用":["13.71","71.71"],"个大于号表示":["13.71","71.71"],"逻辑非操作符由一个叹号":["13.73","71.73"],"可应用给":["13.73","71.73"],"中的任何值":["13.73","71.73"],"这个操作符始终返回布":["13.73","71.73"],"逻辑与操作符由两个和号":["13.74","71.74"],"应用到两个值":["13.74","71.74"],"逻辑与操作符遵循如下真值表":["13.74","71.74"],"第一个操作数":["13.74","13.75","71.74","71.75"],"第二个操作数":["13.74","13.75","71.74","71.75"],"结果":["13.74","13.75","71.74","71.75"],"逻辑或操作符由两个管道符":["13.75","71.75"],"逻辑或操作符遵循如下真值表":["13.75","71.75"],"乘法操作符由一个星号":["13.77","71.77"],"可以用于计算两个数值的乘积":["13.77","71.77"],"特殊值处理":["13.77","13.78","13.79","71.77","71.78","71.79"],"如果操作数都是数值":["13.77","13.78","71.77","71.78"],"除法操作符由一个斜杠":["13.78","71.78"],"可以用于计算第一个操作数除以第二个操作数的商":["13.78","71.78"],"则执行常规的除法运算":["13.78","71.78"],"取模":["13.79","71.79"],"余数":["13.79","71.79"],"操作符由一个百分比符号":["13.79","71.79"],"用于求两个数的和":["13.82","71.82"],"两个操作数都是数值执行规则":["13.82","71.82"],"如果有任一操作数是":["13.82","13.83","71.82","71.83"],"则返回":["13.82","13.83","71.82","71.83"],"也是使用很频繁的一种操作符":["13.83","71.83"],"计算规则":["13.83","71.83"],"如果两个操作数都是数值":["13.83","71.83"],"则执行数学减法运算并返回结果":["13.83","71.83"],"关系操作符执行比较两个值的操作":["13.84","71.84"],"包括小于":["13.84","71.84"],"大于":["13.84","71.84"],"小于等于":["13.84","71.84"],"第一组是等于和不等于":["13.85","71.85"],"中的等于操作符用两个等于号":["13.86","71.86"],"如果操作数相等":["13.86","71.86"],"则会返回":["13.86","71.86"],"不等于操作符用叹号和等于号":["13.86","71.86"],"如果两个操作数不相等":["13.86","71.86"],"这两个操作符都会先进行类型转换":["13.86","71.86"],"通常称为强制类型转换":["13.86","71.86"],"全等和不全等操作符与相等和不相等操作符类似":["13.87","71.87"],"variable":["13.88","71.88"],"expression":["13.88","71.88"],"简单赋值用等于号":["13.89","71.89"],"逗号操作符可以用来在一条语句中执行多个操作":["13.90","71.90"],"如下所示":["13.90","71.90"],"后续整理":["13.91","71.91"],"声明式框架":["14.1"],"vue":["14.1","17.1","18.0","22.0","28.0","29.0","34.3","35.1","36.0","38.0","43.0","44.0","46.0","51.0","52.0","54.0","55.0","57.0","58.0","73.1","73.2","73.6","73.9","73.10","73.13","73.16","74.1","74.2","74.4","74.5","74.7","74.8","74.9","74.10","75.1","75.2","75.3","75.4","75.6","75.7","75.9","75.10","75.12","75.13","75.16","75.17","75.21","75.23","75.24","75.27","75.28","75.29","76.1","76.2","76.6","77.1","77.2","77.4","77.5","77.8","77.9","77.11","77.12","77.14","77.15","77.17","77.18","78.2","78.4","78.5","79.1","79.2","80.1","80.2","81.2","82.2","83.1"],"的核心特点":["14.1"],"用起来简单":["14.1"],"那我们就有必要知道":["14.1"],"命令式和声明式的区别":["14.1"],"mvvm":["14.2"],"模式":["14.2"],"说起":["14.2"],"理解基本概念":["15.1"],"spa":["15.1"],"single":["15.1"],"page":["15.1"],"优缺点":["15.2"],"单页面应用":["15.2"],"解决方案":["15.3"],"基本概念":["16.1"],"基本所有框架都引入了虚拟":["16.1"],"2补充":["16.2"],"再次补充":["16.3"],"谈谈对":["17.0"],"中的每一个组件都有一个渲染函数":["17.1"],"既然":["18.0"],"处理缺陷":["19.2"],"vue3":["19.3","65.0","66.0","87.3"],"实现对比":["19.3"],"obj":["19.3"],"jw":["19.3"],"age":["19.3"],"依赖收集流程":["21.1"],"set方法是如何实现的":["22.0"],"不允许在已经创建的实例上动态添加新的响应式属性":["22.0"],"export":["22.0","49.3"],"target":["22.0"],"key":["22.0","33.1"],"val":["22.0"],"是开发环境":["22.0"],"没定义或者是基础类型则报错":["22.0"],"process":["22.0"],"env":["22.0"],"node":["22.0"],"watch":["24.0","26.0"],"ref":["25.0","75.15","75.26","87.4","87.6","87.7"],"watcheffect":["26.0"],"template":["27.0","44.1","73.16","74.1","74.2","74.5","75.3","75.4","75.6","75.7","76.6","77.11","77.12","77.14","77.15","78.5"],"转化成":["27.0"],"render":["27.0","44.2"],"函数":["27.0"],"这个过程中究竟做了什么":["28.0"],"的时候":["28.0"],"v":["30.0","39.2","42.3","50.3","77.6","77.16","78.4"],"中的生命周期":["31.1"],"主要的生命周期":["31.1"],"创建前后":["31.1"],"挂载前后":["31.1"],"更新前后":["31.1"],"v2":["31.2"],"v3":["31.2"],"中的生命周期对比":["31.2"],"生命周期":["31.2"],"diff":["32.2","68.1"],"比较流程":["32.2"],"先比较是否是相同节点":["32.2"],"的概念":["33.1","68.2"],"use":["34.1","34.3"],"实现原理":["34.3"],"plugin":["34.3","84.1"],"extend":["35.1"],"概念":["35.1"],"使用基础":["35.1"],"组件":["36.0"],"data":["36.0"],"为什么必须是一个函数":["36.0"],"根实例对象":["36.0"],"可以是对象也可以是函数":["36.0"],"单例":["36.0"],"函数组件的优势":["37.0"],"函数式组件的特性":["37.0"],"的过滤器了解吗":["38.0"],"过滤器的使用场景":["38.0"],"过滤器实质不改变原始数据":["38.0"],"只是对数据进行加工处理后返回过滤后的数据再进行调用处理":["38.0"],"once":["39.2","77.6"],"使用场景":["39.2","49.2"],"单个元素":["39.2"],"span":["39.2","68.1","68.4"],"插槽的分类和原理":["41.3"],"默认插槽":["41.3"],"具名插槽":["41.3"],"slot":["41.3"],"content":["41.3"],"组件中的":["42.3"],"model":["42.3"],"组件上的":["42.3"],"默认会利用名为":["42.3"],"sync":["43.0"],"修饰符的作用":["43.0"],"中递归组件的理解":["44.0"],"el":["44.0","44.1"],"menu":["44.0","44.1"],"模板递归":["44.1"],"渲染函数递归":["44.2"],"jsx":["44.2"],"组件中写":["45.0"],"常见的修饰符有哪些":["46.0"],"异步组件的写法":["47.2"],"回调写法":["47.2"],"components":["47.2"],"my":["47.2"],"动态组件可以采用":["49.2"],"keep":["49.2","49.3","49.4"],"alive":["49.2","49.3"],"进行缓存":["49.2"],"原理":["49.3"],"default":["49.3"],"abstract":["49.3"],"不会放到对应的lifecycle":["49.3"],"props":["49.3"],"include":["49.3"],"patterntypes":["49.3"],"白名单":["49.3"],"exclude":["49.3"],"黑名单":["49.3"],"max":["49.3"],"最大连接数":["49.3"],"created":["49.3"],"cache":["49.3"],"alive中数据更新问题":["49.4"],"指令的生命周期":["50.2"],"常见的指令编写":["50.3"],"图片懒加载":["50.3"],"lazy":["50.3"],"防抖":["50.3"],"debounce":["50.3"],"按钮权限":["50.3"],"中使用了哪些设计模式":["51.0"],"单例模式":["51.0"],"单例模式就是整个程序有且仅有一个实例":["51.0"],"中的性能优化有哪些":["52.0"],"数据层级不宜过深":["52.0"],"合理设置响应式数据":["52.0"],"单页应用首屏加载速度慢的怎么解决":["53.0"],"使用路由懒加载":["53.0"],"异步组件":["53.0"],"实现组件拆分":["53.0"],"项目中你是如何解决跨域的呢":["54.0"],"跨域是浏览器同源策略导致的":["54.0"],"常见权限控制":["56.1"],"登录鉴权":["56.1"],"用户登录后返回":["56.1"],"router":["57.0","58.0"],"有几种钩子函数":["57.0"],"具体是什么及执行流程是怎样的":["57.0"],"几种模式的区别":["58.0"],"缺点":["60.4"],"页面刷新后":["62.0"],"mutation":["63.0"],"action":["63.0"],"有使用过":["64.0"],"vuex":["64.0"],"的":["64.0"],"module":["64.0"],"吗":["64.0"],"compositionapi":["65.0"],"的优势是":["65.0"],"有了解过吗":["66.0"],"能说说跟":["66.0"],"的区别吗":["66.0"],"更注重模块上的拆分":["66.0"],"接口异常处理":["67.3"],"patchflags":["68.1"],"优化":["68.1"],"算法无法避免新旧虚拟dom":["68.1"],"中无用的比较操作":["68.1"],"来标记动态内容":["68.1"],"可以实现快速":["68.1"],"算法":["68.1"],"hello":["68.1"],"jiang":["68.1"],"blocktree":["68.2"],"为什么我们还要提出":["68.2"],"所谓的不稳定结构就是":["68.3"],"p":["68.4"],"flag":["68.4"],"随着":["68.5"],"变量的变化也会导致虚拟dom":["68.5"],"树变得不稳定":["68.5"],"fragment":["68.6"],"虽然":["69.1"],"实现":["69.2"],"在基本层面上":["69.3"],"文档对象模型":["69.4"],"级别":["69.5"],"domlevel1":["69.5"],"由":["69.5"],"core":["69.5"],"ie3":["69.6"],"netscape":["69.6"],"navigator":["69.6"],"提供的浏览器对象模型":["69.6"],"的不同版本":["69.7"],"中的":["70.0"],"元素":["70.1"],"元素有下列":["70.1"],"个属性":["70.1"],"可选":["70.1"],"表示应该立即开始下载脚本":["70.1"],"但不能阻止其他页面动作":["70.1"],"比如下载资源或等待其他脚本加载":["70.1"],"只对外部脚本文件有效":["70.1"],"charset":["70.1"],"项目根目录下创建":["72.0"],"typing":["72.0"],"传送门":["73.0"],"验证":["73.4"],"请验证":["73.5"],"自定义类型校验validator函数可以返回特定的枚举类型":["73.7"],"h":["73.11"],"在这个挑战中":["73.12","73.15","75.20","78.1","81.1"],"你需要使用":["73.12"],"import":["73.13","85.4"],"definecomponent":["73.13"],"ul":["73.16","77.14","77.15"],"全家桶":["75.3","75.11"],"immediate":["75.14"],"在侦听器创建时立即触发回调":["75.14"],"第一次调用时旧值是":["75.14"],"deep":["75.14"],"triggerref":["75.18"],"effectscope":["75.25"],"customref语法":["75.29"],"有些时候":["76.5","82.1"],"global":["76.7"],"仅渲染元素和组件一次":["77.6"],"指令":["77.13"],"你需要阻止点击事件的冒泡":["78.1"],"stop":["78.2"],"修饰符":["78.2"],"在监听键盘事件时":["78.4"],"我们经常需要检查特定的按键":["78.4"],"允许为":["78.4"],"on":["78.4"],"添加按键修饰符让即使":["78.5"],"alt":["78.5"],"dom":["79.0"],"api":["81.0","87.1","87.3"],"你将使用":["81.1"],"toraw":["81.3"],"缓存持久化":["84.0"],"安装pinia":["84.1"],"在仓库中添加配置项":["84.3"],"definestore的第二个参数中配置":["84.3"],"配置":["84.4"],"该插件的默认配置如下":["84.4"],"localstorage":["84.4","84.6"],"进行存储":["84.4"],"store":["84.5"],"storagelike":["84.6"],"将数据持久化到":["84.6"],"用于指定":["84.7"],"state":["84.7"],"parse":["84.8"],"piniaplugincontext":["84.9","84.10"],"svg":["85.0","85.2","85.3"],"安装插件":["85.1"],"vite":["85.2"],"config":["85.2"],"ts中配置":["85.2"],"icondirs":["85.2"],"icondirs是保存":["85.2"],"图片的文件夹":["85.2"],"封装":["85.3"],"配置全局组件并引入插件":["85.4"],"核心语法":["86.0"],"options":["87.0"],"的弊端":["87.1"],"中一个新的配置项":["87.3"],"值是一个函数":["87.3"],"它是":["87.3"],"composition":["87.3"],"表演的舞台":["87.3"],"组件中所用到的":["87.3"],"创建":["87.4","87.5"],"基本类型的响应式数据":["87.4"],"作用":["87.4","87.8"],"reactive":["87.5","87.7"],"对比":["87.7"],"宏观角度看":["87.7"],"用来定义":["87.7"],"基本类型数据":["87.7"],"torefs":["87.8"],"toref":["87.8"],"将一个响应式对象中的每一个属性":["87.8"]},{"0":["4.16","4.19","4.24","5.35","11.8","13.30","13.31","13.65","13.86","71.30","71.31","71.65","71.86"],"1":["0.8","0.14","0.17","2.6","4.24","5.11","5.16","5.19","5.30","5.33","5.36","5.39","5.50","5.53","11.0","11.12","11.48","11.50","11.52","11.61","11.73","11.76","11.78","11.79","11.81","11.98","11.112","11.117","11.127","11.130","11.133","11.139","13.31","13.32","13.63","13.68","13.73","13.79","13.84","13.86","13.90","44.0","71.31","71.32","71.63","71.68","71.73","71.79","71.84","71.86","71.90"],"2":["0.22","4.5","4.13","5.5","5.6","5.31","5.32","5.41","5.50","5.52","5.58","7.12","7.16","11.85","11.86","11.88","11.99","11.106","11.124","11.137","13.60","13.79","13.86","20.2","22.0","23.2","24.2","25.2","34.2","35.2","40.2","41.2","41.3","66.0","71.60","71.79","71.86","72.0","87.7"],"3":["4.9","5.31","5.32","5.33","5.52","11.5","11.17","11.20","11.21","11.30","11.31","11.56","11.57","11.59","11.63","11.64","11.66","11.68","11.71","11.72","11.75","13.5","13.12","13.82","13.83","23.3","24.3","47.3","70.1","71.5","71.12","71.82","71.83"],"4":["4.9","5.31","5.32","11.8","11.22","11.30","11.61","11.68","11.74","11.101","11.102","11.104","11.105","11.115","11.137","13.83","71.83"],"5":["5.31","5.32","11.108","11.109","11.111","11.113","11.116","14.5"],"6":["4.3","5.50","11.42","11.119","11.120","11.122","13.39","71.39"],"7":["4.3","4.6","11.48","11.125","11.126","11.127","11.129","11.131","11.132","11.134","11.135","11.138"],"8":["11.52"],"10":["5.17","9.0"],"11":["13.34","71.34"],"12":["9.0"],"13":["5.33"],"18":["5.33"],"20":["5.44","5.46","13.65","71.65"],"22":["9.0"],"26":["13.21","71.21"],"27":["5.33"],"32":["13.71","71.71"],"33":["5.50"],"36":["13.21","71.21"],"54":["5.50"],"80":["13.59","71.59"],"100":["11.90"],"134":["13.32","71.32"],"246":["5.50"],"262":["13.8","69.3","71.8"],"693":["13.32","71.32"],"797":["13.32","71.32"],"862":["13.32","71.32"],"900":["11.90"],"标准盒子模型":["0.1"],"ie":["0.1"],"盒子模型":["0.1"],"盒子模型的区别":["0.1"],"和":["0.2","3.6","5.49","5.51","7.3","7.13","11.23","11.118","25.0","25.1","69.1","87.0"],"通配":["0.3","0.4"],"id":["0.3","0.4","11.43","11.44","84.4","84.5"],"选择器":["0.3"],"类选择器":["0.3"],"标签选择器":["0.3"],"class":["0.4","11.34","11.36","11.39","11.44","11.45","11.136"],"标签":["0.4"],"画一个三角形":["0.5"],"用边框画":["0.5"],"方式一":["0.6"],"css":["0.6","0.21","3.4","76.3","76.7"],"width":["0.6"],"none":["0.7"],"此元素不会被显示":["0.7"],"block":["0.7","68.2"],"此元素将显示为块元素":["0.7"],"的理解":["0.8"],"就是页面上一个隔离的独立容器":["0.8"],"容器里面的子元素不会影响到外面的元素":["0.8"],"overflow":["0.9"],"hidden":["0.9","0.15"],"方式二":["0.9"],"偶数":["0.10"],"让文字在浏览器上表现的更好看":["0.10"],"固定定位":["0.11"],"相对于浏览器窗口进行定位":["0.11"],"relative":["0.11"],"相对定位":["0.11"],"相对于自身定位":["0.11"],"不脱离文档流":["0.11"],"请写出结构及样式":["0.12"],"双飞翼布局":["0.12"],"html":["0.12","15.1","38.0","69.5","78.4"],"是一个":["0.13"],"有什么优缺点":["0.14"],"的区别":["0.15","5.66","63.0"],"区别":["0.15","0.16","0.19","2.3","5.53","87.7"],"实现透明效果":["0.16"],"中双冒号和单冒号有什么区别":["0.17"],"解释一下这两个伪元素的作用":["0.17"],"12px":["0.18"],"的文字":["0.18"],"的":["0.19","42.3"],"placeholder":["0.20"],"语法结构":["0.21"],"media":["0.21"],"only":["0.21"],"screen":["0.21"],"and":["0.21"],"max":["0.21","13.32","49.2","71.32"],"专题页面":["0.22"],"特别追求性能的项目":["0.22"],"不太适合响应式":["0.22"],"因为如果添加了很多的响应式":["0.22"],"会造成加载速度变慢":["0.22"],"pc":["0.22"],"span":["2.1","75.6","75.7"],"img":["2.1","3.5","11.3","11.4","11.7","11.36","11.69","11.84","85.2"],"input":["2.1","42.3"],"块级元素":["2.1"],"div":["2.1","39.2","75.3","75.6","75.7","75.9","75.10","75.12","75.13","78.2"],"import":["2.2","68.1","68.4","68.5"],"有什么区别":["2.2","2.4","7.3"],"区别一":["2.2","2.4","5.55","5.66"],"定义":["2.3"],"概括了网站信息":["2.3"],"可以告诉搜索引擎或者用户关于这个网站的内容主题是什么":["2.3"],"文章主题内容":["2.3"],"告诉蜘蛛我们的网站内容最主要是什么":["2.3"],"alt":["2.4"],"分别什么时候用":["2.5"],"无损压缩":["2.5"],"尺寸体积要比":["2.5"],"section":["2.6"],"等":["2.6"],"键盘首字母自动大小写":["3.1"],"a":["3.2","4.5","4.6","4.24","5.9","5.10","5.13","5.17","5.18","5.52","5.60","10.2"],"button":["3.2","77.11","77.12","78.5"],"长按时不触发系统的菜单":["3.3"],"长按触发系统菜单":["3.4"],"android":["3.6"],"boolean":["4.1","5.2","11.103","84.11"],"string":["4.1","5.4","11.27","11.44","11.77","11.82","11.89","11.90","11.91","11.96","11.123"],"number":["4.1","5.2","5.4","5.28","11.19","11.27","11.32","11.44","11.45","11.82","11.89","11.90","11.91","11.121","11.123"],"如果是":["4.2","13.82","13.83","71.82","71.83"],"直接返回":["4.2"],"false":["4.2","13.28","13.74","13.75","13.86","13.88","71.28","71.74","71.75","71.86","71.88"],"if":["4.2","4.6","4.19","5.9","7.13","11.27","13.16","19.3","71.16"],"object":["4.2","4.6","11.23","13.26","19.3","34.3","49.3","52.0","71.26"],"return":["4.2","4.8","4.19","5.16","5.19","19.3","41.3","44.2","75.29"],"getprototypeof":["4.2"],"是":["4.2","78.4"],"自带的":["4.2"],"api":["4.2","69.6","75.22","81.1","87.0"],"能够拿到参数的原型对象":["4.2"],"let":["4.2","4.5","4.6","4.8","11.32","11.46","13.18","13.25","13.44","13.45","13.90","44.2","71.18","71.25","71.44","71.45","71.90","87.4"],"proto":["4.2"],"while":["4.2"],"true":["4.2","13.16","13.27","13.74","13.75","13.88","71.16","71.27","71.74","71.75","71.88","84.3"],"循环往下寻找":["4.2"],"直到找到相同的原型对象":["4.2"],"undefined":["4.3","5.2","11.27","22.0"],"nan":["4.3","4.6"],"如果是字符串":["4.3"],"如果字符串中只包含了数字":["4.3"],"则将其转换为十进制":["4.3"],"如果字符串中包含了有效的浮点格式":["4.3"],"将其转换为浮点数值":["4.3"],"如果是空字符串":["4.3","13.34","71.34"],"将其转换为":["4.3"],"如果不是以上格式的字符串":["4.3"],"均返回":["4.3"],"symbol":["4.3","13.47","71.47"],"抛出错误":["4.3"],"如果是对象并且部署了":["4.3"],"synbol":["4.3"],"toprimitive":["4.3"],"那么调用此方法":["4.3"],"否则调用对象的":["4.3"],"valueof":["4.3","13.34","71.34"],"方法":["4.3","13.34","71.34","87.3"],"js":["4.3","4.6","5.3","5.22","5.23","5.24","5.27","5.40","5.54","5.57","5.61","5.62","13.15","13.16","13.17","13.21","13.33","13.34","13.44","13.45","13.66","26.0","67.3","68.1","68.4","68.5","71.15","71.16","71.17","71.21","71.33","71.34","71.44","71.45","71.66","73.1","77.4"],"0111":["4.3"],"对象的合并等多个用途":["4.5"],"其中一个用途就是可以进行浅拷贝":["4.5"],"的语法为":["4.5"],"target":["4.5","5.63"],"source":["4.5","5.63"],"b":["4.5","4.6","4.24","5.8","5.14","5.17","13.36","71.36"],"console":["4.5","4.19","5.12","11.45","11.50","11.54","13.14","13.15","71.14","71.15"],"infinity以及":["4.6"],"infinity":["4.6","13.33","13.78","13.82","13.83","71.33","71.78","71.82","71.83"],"序列化的结果会变成":["4.6"],"null":["4.6","5.40","19.3","22.0","49.3","84.7"],"无法拷贝对象的循环应用":["4.6"],"即对象成环":["4.6"],"obj":["4.6","5.35","5.59"],"key":["4.6","5.14","32.2","33.2","49.3","78.4","84.4","84.6"],"基础版":["4.6"],"手写递归实现":["4.6"],"obj1":["4.6","5.52"],"function":["4.6","5.9","5.18","11.27","11.54","13.15","13.41","19.3","47.2","68.1","71.15","71.41"],"deepclone":["4.6"],"cloneobj":["4.6"],"for":["4.6","5.35","19.3","30.0","44.1","49.3","73.16","77.14","77.15"],"in":["4.6","44.1","49.3","68.5","73.16"],"遍历":["4.6"],"typeof":["4.6","13.7","13.26","19.3","71.7","71.26"],"使用这种方式我们可以更好地复用以前的开发代码":["4.7"],"当一个发生变化的时候":["4.8"],"另一个也随之进行变化":["4.8"],"二":["4.8"],"构造函数继承":["4.8"],"借助call":["4.8"],"getname":["4.8"],"call":["4.8","5.49"],"child":["4.8","75.1","75.2","80.1","80.2"],"没问题":["4.8"],"会报错":["4.8"],"20240117094152565":["4.8"],"三":["4.8"],"组合继承":["4.8"],"前两中组合":["4.8"],"parent3":["4.8"],"this指向新对象":["4.9"],"执行构造函数中的代码":["4.9"],"为这个新对象添加属性":["4.9"],"返回新对象":["4.9"],"关键词执行之后总是会返回一个对象":["4.9"],"要么是实例对象":["4.9"],"要么是return语句指定的对象":["4.9"],"被调用后大致做了哪几件事情":["4.9"],"让实例可以访问到私有属性":["4.9"],"让实例可以访问构造函数原型":["4.9"],"constructor":["4.9","5.43","11.45","13.60","71.60"],"prototype":["4.9","5.34"],"所在原型链上的属性":["4.9"],"的作用域":["4.10"],"闭包是指有权访问另外一个函数作用域中的变量的函数":["4.11"],"mdn":["4.11"],"当访问一个变量时":["4.12"],"在定时器":["4.13"],"时间监听":["4.13"],"对象中的方法":["4.14"],"parse":["4.14"],"传入的参数将按照顺序依次成为新数组的第":["4.16"],"至第":["4.16"],"n":["4.16","5.58","7.6"],"项":["4.16"],"参数长度为":["4.16"],"返回空数组":["4.16"],"len":["4.16"],"当":["4.16"],"shift":["4.18","78.5"],"sort":["4.18"],"splice":["4.18","4.23","5.26"],"unshift":["4.18"],"以及两个":["4.18"],"i":["4.19","5.35","85.1"],"length":["4.19","5.35"],"isarray":["4.19"],"concat":["4.19"],"else":["4.19","4.23","13.7","68.4","71.7"],"push":["4.19","4.23"],"log":["4.19","11.45","11.50","11.54","13.14","13.15","71.14","71.15"],"说的更多地是通过":["4.21"],"o":["4.21"],"快速排序":["4.23"],"通过一趟排序":["4.23"],"将待排记录分割成独立的两部分":["4.23"],"其中一部分记录的关键字均比另一部分的关键字小":["4.23"],"则可以分别对这两部分记录继续进行排序":["4.23"],"以达到整个序列有序":["4.23"],"quicksort":["4.23","5.51"],"quick":["4.23"],"arr":["4.23","5.25","5.30"],"index":["4.23"],"math":["4.23","13.80","71.80"],"floor":["4.23"],"pivot":["4.23"],"left":["4.23"],"right":["4.23"],"如果":["4.24","13.77","13.78","71.77","71.78"],"小于":["4.24"],"那么":["4.24"],"defer":["5.1"],"例如":["5.1","11.46","11.49","78.4"],"script":["5.1"],"时先设计的":["5.3"],"原因":["5.3"],"最初设计":["5.3"],"代码执行流程":["5.5"],"同步执行完":["5.5"],"没有块级作用域":["5.6"],"作用域链":["5.6"],"本层作用域有没有此变量":["5.7"],"c":["5.8","11.54","13.4","41.3","71.4"],"var":["5.8","5.21","5.22","5.23","5.25","5.30","5.40","13.12","13.18","71.12","71.18"],"fun":["5.10"],"对象是通过":["5.11"],"new":["5.11","11.37"],"hello":["5.13","11.54","76.6"],"this":["5.15","5.16","5.18","5.19","5.43","5.44","5.45","5.46","5.48","10.0","11.45","34.3","39.2","41.3"],"fn":["5.19"],"你能写出哪些方法":["5.20"],"判断":["5.21","5.24"],"start":["5.28"],"deletecount":["5.28"],"addprefix":["5.34"],"创建了一个空的对象":["5.36"],"闭包是什么":["5.38"],"内部函数可以访问到外部函数的局部变量":["5.39"],"闭包可以解决的问题":["5.39"],"解决":["5.40"],"把闭包的函数设置为":["5.40"],"对象共享属性和共享方法":["5.41"],"谁有原型":["5.41"],"parent":["5.43","5.44","5.45","5.46","28.0"],"age":["5.43","5.44","5.45","5.46","11.27","11.44","13.15","13.21","71.15","71.21"],"apply":["5.47","5.49"],"可以改变":["5.48"],"函数只给出了两种排序":["5.51"],"insertionsort":["5.51"],"数量小于":["5.51"],"arr2":["5.52"],"数据存放有效期":["5.53"],"仅在当前浏览器窗口关闭之前有效":["5.53"],"window":["5.54"],"addeventlistener":["5.54"],"const共同点":["5.55"],"都是可以声明变量的":["5.55"],"具有变量提升的机制":["5.55"],"const":["5.57","5.59","5.60","11.54","26.0","34.3","49.3"],"没有变量提升性":["5.57"],"demo":["5.58","11.80"],"assign":["5.61"],"extend":["5.63"],"箭头函数中的":["5.64"],"是在箭头函数定义时就确定的":["5.64"],"有三种状态":["5.65"],"every":["5.67"],"篇":["7.0"],"关于生命周期":["7.1"],"created":["7.2","7.3","7.9","31.1","31.2"],"还是":["7.2"],"mounted":["7.2","49.3"],"vue2":["7.2","65.0"],"x":["7.2"],"中如何获取":["7.4"],"dom":["7.4","14.3","16.1","18.0","68.3"],"4一旦进入组件会执行哪些生命周期":["7.5"],"第二次或者第":["7.6"],"父组件引入子组件":["7.7","7.11"],"那么生命周期执行的顺序是":["7.7"],"keep":["7.8","49.0"],"alive":["7.8"],"会执行哪些生命周期":["7.8"],"如果使用了":["7.8"],"你在什么情况下用过哪些生命周期":["7.9"],"说一说生命周期的使用场景":["7.9"],"关于组件":["7.10"],"父传后代":["7.11"],"后代拿到了父的数据":["7.11"],"绑定数据":["7.11"],"list":["7.11","73.9","73.10"],"v":["7.13","23.0","39.0","39.1","42.2","44.1","73.16","77.11","77.12","77.14","77.15"],"关于原理":["7.14"],"nexttick":["7.15","48.1"],"原理":["7.15","60.5"],"微任务":["7.15"],"page":["10.0"],"powered":["10.1"],"by":["10.1"],"shikiji":["10.1"],"box":["10.2"],"tip":["10.2"],"warning":["10.2"],"out":["10.3"],"the":["10.3"],"studio基于intellij":["11.2"],"idea":["11.2"],"community":["11.2"],"idea社区版":["11.2"],"构建":["11.2"],"为鸿蒙应用提供了一站式开发环境":["11.2"],"集成了开发":["11.2"],"运行":["11.2"],"阅读各项条款":["11.3"],"点击":["11.3","11.4","11.7"],"agree":["11.3"],"表示同意":["11.3"],"初次启动会出现如下设置向导":["11.3"],"首先需要为":["11.3"],"nodejs":["11.3"],"create":["11.4","49.3"],"project":["11.4"],"选择项目模版":["11.4"],"preview":["11.6"],"tools":["11.7"],"菜单下的":["11.7"],"device":["11.7"],"manager":["11.7"],"打开设备管理器":["11.7"],"install":["11.7"],"安装模拟器":["11.7"],"harmony":["11.8"],"os":["11.8"],"系统的手机":["11.8"],"系统版本最好为":["11.8"],"及以上":["11.8"],"系统版本可在":["11.8"],"设置":["11.8","70.1"],"关于手机":["11.8"],"中查看":["11.8"],"概述":["11.9","11.34","11.48","11.52","11.130","11.133","11.139"],"harmonyos":["11.9"],"应用的主要开发语言是":["11.9"],"vscode":["11.13"],"编辑器":["11.13"],"vscode是一款轻量级":["11.13"],"开源且功能丰富的集成开发环境":["11.13"],"ide":["11.13"],"支持多种编程语言":["11.13"],"具有强大的插件系统":["11.13"],"下载地址为":["11.13"],"https":["11.13","85.2"],"code":["11.13"],"visualstudio":["11.13"],"com":["11.13","85.2"],"类型推断":["11.17","11.31"],"表示数字":["11.19"],"包括整数和浮点数":["11.19"],"数组":["11.22"],"数组类型定义由两部分组成":["11.22"],"是一种一系列由":["11.23"],"属性名称":["11.23"],"属性值":["11.23"],"组成的数据结构":["11.23"],"getpersoninfo":["11.27"],"name":["11.27","11.44","13.17","71.17"],"特殊类型":["11.28"],"联合类型":["11.28"],"一个函数可能用于处理不同类型的值":["11.28"],"这种情况可以使用联合类型":["11.28"],"例如以下案例中的":["11.28"],"message":["11.28","13.14","38.0","71.14"],"匿名函数":["11.32"],"匿名函数的语法结构简洁":["11.32"],"特别适用于简单且仅需一次性使用的场景":["11.32"],"numbers":["11.32"],"类":["11.34"],"是面向对象编程语言中的一个重要概念":["11.34"],"类的定义":["11.36"],"定义类的语法如下图所示":["11.36"],"代码如下":["11.36"],"person":["11.36","11.43","11.44"],"对象创建":["11.37"],"语法":["11.37","87.4"],"创建对象的关键字为":["11.37"],"具体语法如下":["11.37"],"中的类中可以包含静态成员":["11.38"],"静态属性和静态方法":["11.38"],"静态成员隶属于类本身":["11.38"],"而不属于某个对象实例":["11.38"],"静态成员通用用于定义一些常量":["11.38"],"或者工具方法":["11.38"],"声明静态成员":["11.38"],"继承另一个类":["11.39"],"父类或基类":["11.39"],"的属性和方法":["11.39"],"子类可以直接使用父类的特性":["11.39"],"并根据需要添加新的特性或覆盖现有的特性":["11.39"],"这种机制赋予面向对象程序良好的扩展性":["11.39"],"下面通过一个例子演示继承的特性":["11.39"],"typescript":["11.39","11.44","11.50","11.110","11.123","84.2"],"modifiers":["11.40"],"用于控制类成员":["11.40"],"属性":["11.40","21.1"],"方法等":["11.40"],"的可访问性":["11.40"],"typescript提供了三种访问修饰符":["11.40"],"分别是private":["11.40"],"protected和public":["11.40"],"关键字定义":["11.43"],"通常情况下":["11.43"],"接口中只会包含属性和方法的声明":["11.43"],"而不包含具体的实现细节":["11.43"],"具体的细节由其实现类完成":["11.43"],"接口的实现类":["11.44"],"teacher":["11.44"],"如下":["11.44"],"implements":["11.44"],"totalamount":["11.45"],"pay":["11.45"],"alipay":["11.45"],"中的接口是一个非常灵活的概念":["11.46"],"除了用作类的规范之外":["11.46"],"也常用于直接描述对象的类型":["11.46"],"现有一个变量的定义如下":["11.46"],"season":["11.49"],"spring":["11.49"],"summer":["11.49"],"autumn":["11.49"],"winter":["11.49"],"枚举使用":["11.49"],"枚举的使用记住两个原则即可":["11.49"],"枚举值的访问":["11.49"],"像访问对象属性一样访问枚举值":["11.49"],"例如上述案例中的":["11.50","11.77"],"direction":["11.50"],"枚举中":["11.50"],"up":["11.50"],"的值为":["11.50"],"bottom":["11.50"],"依次类推":["11.50"],"具体如下":["11.50"],"导出":["11.53"],"导出须使用":["11.53"],"export":["11.53","11.54","68.1"],"关键字":["11.53","11.69"],"语法如下":["11.53"],"module":["11.54"],"str":["11.54"],"moduleb":["11.54"],"除了上述导入导出的语法之外":["11.55"],"还有一种语法":["11.55"],"叫做":["11.55"],"这种语法相对简洁一些":["11.55"],"定义界面状态":["11.58"],"按照声明式ui的开发范式":["11.58"],"首先需要分析和定义页面的各种状态":["11.58"],"并声明相应的状态变量用于表示不同的状态":["11.58"],"改变状态":["11.60"],"在明确了界面在不同状态下的显示效果后":["11.60"],"我们只需修改状态变量的值":["11.60"],"就能触发界面的更新":["11.60"],"在当前案例中":["11.60"],"组件化":["11.62"],"ets":["11.65","11.67","11.82"],"pages":["11.65","11.67","11.82"],"helloworld":["11.65","11.67"],"light":["11.65"],"solution":["11.65","11.82"],"arkts":["11.65","11.103"],"component":["11.65","11.82","47.2","49.2"],"struct":["11.65","11.69"],"完整代码见":["11.67"],"demos":["11.67","11.82"],"entry":["11.67","11.82"],"src":["11.67","11.82","85.2"],"main":["11.67","11.82","85.5"],"delete":["11.67"],"deletebutton":["11.67"],"各部分语法说明如下":["11.69"],"是arkts新增的用于自定义组件或者自定义弹窗的关键字":["11.69"],"其声明的数据结构和ts中的类十分相似":["11.69"],"案例实操":["11.70"],"各参数的含义如下":["11.77"],"需要进行循环渲染的数据源":["11.77"],"必须为数组类型":["11.77"],"state":["11.77","74.1","74.2"],"options":["11.77","11.103","11.121"],"苹果":["11.77"],"桃子":["11.77"],"香蕉":["11.77"],"橘子":["11.77"],"组件生成函数":["11.77"],"用于为":["11.77"],"数组中的每个元素创建对应的组件":["11.77"],"该函数可接收两个参数":["11.77"],"分别是":["11.77"],"包括本地图片和网络图片":["11.80"],"本地图片":["11.80"],"images":["11.80"],"jpg":["11.80"],"注意":["11.80","13.13","13.25","13.44","71.13","71.25","71.44"],"使用这种方式引入本地图片":["11.80"],"需要将图片置于":["11.80"],"目录下":["11.80"],"并且需要为":["11.80"],"组件提供图片相对于":["11.80"],"目录的路径":["11.80"],"网络图片":["11.80"],"http":["11.80"],"xxx":["11.80","87.4"],"真机中运行的鸿蒙应用":["11.80"],"访问网络图片需要配置网络访问权限":["11.80"],"不过在预览器和模拟器中测试时不受限制":["11.80"],"权限配置相关的内容在后续章节会系统介绍":["11.80"],"两个方法可接收的参数类型均为":["11.82"],"resource":["11.82","11.87","11.89","11.91","11.123"],"相关案例见":["11.82"],"attribute":["11.82","33.1"],"size":["11.82"],"imagesize":["11.82"],"下面对三种参数类型逐一进行介绍":["11.82"],"objectfit":["11.83"],"方法来设置图片的显示效果":["11.83"],"该方法的参数类型为":["11.83","11.89"],"imagefit":["11.83"],"枚举类型":["11.83"],"可选的枚举值如下":["11.83"],"名称":["11.83"],"图片会模糊并出现锯齿":["11.84"],"如下图所示":["11.84"],"这时可以使用":["11.84","43.0"],"interpolation":["11.84"],"方法对图片进行插值":["11.84"],"下面分别对两个参数类型进行介绍":["11.87"],"string类型":["11.87"],"我是一段文本":["11.87"],"类型":["11.87","73.5"],"fontsize":["11.89"],"方法进行设置":["11.89","11.91","11.92"],"下面逐一介绍":["11.89","11.90","11.91"],"number类型":["11.90"],"类型的取值范围是":["11.90"],"该方法参数类型为":["11.91"],"color":["11.91","11.124"],"文本对齐":["11.92"],"文本对齐方向可通过":["11.92"],"textalign":["11.92"],"该方法的参数为枚举类型":["11.92"],"可使用":["11.93"],"maxlines":["11.93"],"方法控制文本的最大行数":["11.93"],"当内容超出最大行数时":["11.93"],"textoverflow":["11.93"],"两种方式下":["11.96"],"组件所需的参数有所不同":["11.96"],"下面分别介绍":["11.96"],"不包含子组件时":["11.96"],"组件所需的参数如下":["11.96"],"label":["11.96"],"边框圆角":["11.99"],"按钮的边框圆角大小可使用":["11.99"],"borderradius":["11.99"],"对于button组件而言":["11.100"],"最为常用的就是点击事件":["11.100"],"可以通过":["11.100"],"onclick":["11.100"],"type":["11.103","11.121"],"toggletype":["11.103"],"ison":["11.103"],"swtich滑块颜色":["11.106"],"每当":["11.107"],"组件的状态发生变化":["11.107"],"就会触发":["11.107"],"change":["11.107","39.2"],"事件":["11.107"],"textinput":["11.110"],"组件的参数定义如下":["11.110"],"value":["11.110","11.121","13.88","22.0","42.3","71.88","87.7"],"输入框类型":["11.112"],"可通过":["11.112"],"placeholder样式":["11.114"],"文本样式":["11.115"],"change事件":["11.117"],"每当输入的内容发生变化":["11.117"],"焦点事件包括":["11.118"],"获得焦点":["11.118"],"失去焦点":["11.118"],"两个事件":["11.118"],"当输入框获得焦点时":["11.118"],"total":["11.121"],"progresstype":["11.121"],"例如进度条的宽度":["11.123"],"该方法的参数类型定义如下":["11.123"],"strokewidth":["11.123"],"进度条颜色":["11.124"],"进度条的颜色可通过":["11.124"],"promptaction":["11.128"],"模块中的":["11.128"],"showtoast":["11.128"],"方法显示":["11.128"],"toast":["11.128"],"提示":["11.128"],"使用时需要先导入":["11.128"],"alertdialog":["11.130"],"actionsheet":["11.133"],"例如文本选择器":["11.136"],"日期选择器":["11.136"],"时间选择器等等":["11.136"],"各选择器效果如下":["11.136"],"details":["11.136"],"lake":["11.136"],"collapse":["11.136"],"当现有组件不满足要求时":["11.139"],"customdialogcontroller":["11.140"],"具体用法可参考相关案例或者官方文档":["11.140"],"json":["11.140"],"br":["11.140"],"integer":["11.140"],"无论是变量":["13.2","71.2"],"函数名还是操作符":["13.2","71.2"],"函数":["13.3","71.3"],"属性或者函数参数的名称":["13.3","71.3"],"标识符可以由一个或多个下列字符组成":["13.3","71.3"],"语言风格的注释":["13.4","71.4"],"javascript":["13.5","13.40","70.0","71.5","71.40"],"解析和执行模型":["13.5","71.5"],"case":["13.7","71.7"],"instanceof":["13.7","71.7"],"interface":["13.10","71.10"],"个关键字可以声明变量":["13.12","71.12"],"操作符":["13.13","71.13"],"hi":["13.14","71.14"],"局部变量":["13.14","71.14"],"出错":["13.14","71.14"],"uncaught":["13.14","71.14"],"referenceerror":["13.14","71.14"],"foo":["13.15","71.15"],"声明的范围是块作用域":["13.16","71.16"],"而":["13.16","71.16"],"声明的范围是函数作用域":["13.16","71.16"],"的另一个重要区别":["13.17","71.17"],"就是":["13.17","71.17"],"声明的变量不会在作用域中被提升":["13.17","71.17"],"关键字不同":["13.18","71.18"],"使用":["13.18","71.18"],"条件声明":["13.19","71.19"],"循环定义的迭代变量会渗透到循环体外部":["13.20","71.20"],"改用":["13.20","71.20"],"之后":["13.20","71.20"],"这个问题就消失了":["13.20","71.20"],"因为迭代变量的作用域仅限于":["13.20","71.20"],"声明的变量会导致运行时错误":["13.21","71.21"],"typeerror":["13.21","71.21"],"给常量赋值":["13.21","71.21"],"不使用":["13.22","71.22"],"有两大数据类型":["13.23","71.23"],"基本数据类型":["13.23","71.23"],"所以需要一种手段来确定任意变量的数据类型":["13.24","71.24"],"操作符就是为此而生的":["13.24","71.24"],"对一个值使用":["13.24","71.24"],"或":["13.25","71.25","78.5","84.7"],"声明了变量但没有初始化时":["13.25","71.25"],"就相当于给变量赋予了":["13.25","71.25"],"值":["13.25","13.33","71.25","71.33"],"包含":["13.25","71.25"],"值表示一个空对象指针":["13.26","71.26"],"这也是给":["13.26","71.26"],"传一个":["13.26","71.26"],"会返回":["13.26","71.26"],"ecmascript":["13.27","13.64","13.77","13.78","69.1","71.27","71.64","71.77","71.78"],"中使用最频繁的类型之一":["13.27","71.27"],"有两个字面值":["13.27","71.27"],"的值":["13.28","71.28"],"对于八进制字面量":["13.30","71.30"],"第一个数字必须是零":["13.30","71.30"],"floatnumber2":["13.31","71.31"],"floatnumber3":["13.31","71.31"],"相除会返回":["13.33","71.33"],"分子是非":["13.33","71.33"],"分母是有符号或无符号的":["13.33","71.33"],"则会返回":["13.33","71.33"],"或者":["13.33","71.33","78.4"],"011":["13.34","71.34"],"忽略前面的":["13.34","71.34"],"如果字符串包含有效的浮点值格式如":["13.34","71.34"],"则会转换为相应的浮点值":["13.34","71.34"],"同样忽略前面的":["13.34","71.34"],"如果字符串包含有效的十六进制格式如":["13.34","71.34"],"0xf":["13.34","71.34"],"则会转换为与该十六进制值对应的十进制整数值":["13.34","71.34"],"不包含字符":["13.34","71.34"],"则返回":["13.34","13.78","71.34","71.78"],"如果字符串包含出上述情况之外的其他字符":["13.34","71.34"],"对象":["13.34","71.34","87.8"],"调用":["13.34","71.34"],"并按照上述规则转换返回的值":["13.34","71.34"],"如果转换结果为":["13.34","71.34"],"则调用":["13.34","71.34"],"tostring":["13.34","71.34"],"在按照转换字符串的规则转换":["13.34","71.34"],"字符串":["13.35","13.63","71.35","71.63"],"制表":["13.36","71.36"],"退格":["13.36","71.36"],"r":["13.36","71.36"],"回车":["13.36","71.36"],"f":["13.36","71.36"],"换页":["13.36","71.36"],"意思就是一旦创建":["13.37","71.37"],"一个是":["13.38","71.38"],"新增了模板字面量定义字符串的能力":["13.39","71.39"],"技术上讲":["13.40","71.40"],"模板字面量不是字符串":["13.40","71.40"],"而是一种特殊的":["13.40","71.40"],"tag":["13.41","32.2","71.41"],"如换行符或":["13.42","71.42"],"unicode":["13.42","71.42"],"符号":["13.43","71.43"],"操作符对符号返回":["13.44","71.44"],"发现不存在对应的符号":["13.45","71.45"],"于是就会生成一个新符号实例并添加到注册表中":["13.45","71.45"],"后续使用相同字符串的调用同样会检查注册表":["13.45","71.45"],"发现存在与该字符串对应的符号":["13.45","71.45"],"然后就会返回该符号实例":["13.45","71.45"],"fooglobalsymbol":["13.45","71.45"],"都可以使用符号":["13.46","71.46"],"用于暴露语言内部行为":["13.47","71.47"],"开发者":["13.47","71.47"],"可以直接访问":["13.47","71.47"],"重写或模拟这些行为":["13.47","71.47"],"用于创建当前对象的函数":["13.60","71.60"],"hasownproperty":["13.60","71.60"],"propertyname":["13.60","71.60"],"unary":["13.62","71.62"],"意思就是不限于整数":["13.63","71.63"],"布尔值":["13.63","71.63"],"浮点值":["13.63","71.63"],"甚至对象都可以":["13.63","71.63"],"递增和递减操作符遵循如下规则":["13.63","71.63"],"中跟在高中数学中的用途一样":["13.64","71.64"],"第一位":["13.65","71.65"],"称为第":["13.65","71.65"],"位":["13.65","71.65"],"表示":["13.65","13.69","13.70","13.89","71.65","71.69","71.70","71.89"],"第二位表示":["13.65","71.65"],"它的作用是返回数值的一补数":["13.66","71.66"],"有两个操作数":["13.67","71.67"],"本质上":["13.67","71.67"],"按位与就是将两个数的每一个位对齐":["13.67","71.67"],"第一个数值的位":["13.68","71.68"],"第二个数值的位":["13.68","71.68"],"结果":["13.68","71.68"],"会将数值的所有":["13.71","71.71"],"位都向右移":["13.71","71.71"],"尔值":["13.73","71.73"],"无论应用到的是什么数据类型":["13.73","71.73"],"逻辑非操作符首先将操作数转换为布尔值":["13.73","71.73"],"然后再对其取反":["13.73","71.73"],"逻辑非操作符会遵循如下规则":["13.73","71.73"],"如果操作数是对象":["13.73","71.73"],"定义了":["13.76","71.76"],"则执行常规的乘法运算":["13.77","71.77"],"即两个正值相乘是正值":["13.77","71.77"],"两个负值相乘也是正值":["13.77","71.77"],"正负符号不同的值相乘得到负值":["13.77","71.77"],"不能表示乘积":["13.77","71.77"],"即两个正值相除是正值":["13.78","71.78"],"两个负值相除也是正值":["13.78","71.78"],"符号不同的值相除得到负值":["13.78","71.78"],"不能表示商":["13.78","71.78"],"如果操作数是数值":["13.79","71.79"],"则执行常规除法运算":["13.79","71.79"],"返回余数":["13.79","71.79"],"如果被除数是无限值":["13.79","71.79"],"新增了指数操作符":["13.80","71.80"],"pow":["13.80","71.80"],"即加法和减法操作符":["13.81","71.81"],"加":["13.82","71.82"],"减":["13.83","71.83"],"和大于等于":["13.84","71.84"],"执行规则":["13.84","71.84"],"如果操作数都是数值":["13.84","71.84"],"它们在比较之前执行转换":["13.85","71.85"],"再确定操作数是否相等":["13.86","71.86"],"转换规则":["13.86","71.86"],"如果任一操作数是布尔值":["13.86","71.86"],"则将其转换为数值再比较是否相等":["13.86","71.86"],"转换为":["13.86","71.86"],"如果一个操作数是字符串":["13.86","71.86"],"另一个操作数是数值":["13.86","71.86"],"只不过它们在比较相等时不转换操作数":["13.87","71.87"],"全等操作符由":["13.87","71.87"],"将右手边的值赋给左手边的变量":["13.89","71.89"],"num1":["13.90","71.90"],"p98":["13.91","71.91"],"谈谈你对":["14.0","15.0","60.0"],"vue":["14.0","15.1","17.0","20.0","21.0","27.0","32.0","33.1","34.0","34.1","35.0","40.0","40.1","41.0","42.1","47.0","48.1","49.4","56.0","59.0","67.0","68.1","76.5","78.1","85.3","85.4"],"早在":["14.1"],"jq的时代":["14.1"],"编写的代码都是命令式的":["14.1"],"命令式框架重要特点就是关注过程":["14.1"],"声明式框架更加关注结果":["14.1"],"命令式的代码封装到了":["14.1"],"vuejs":["14.1","66.0"],"中":["14.1","60.4","84.6","87.3"],"就要知道另一个东西叫":["14.2"],"mvc":["14.2"],"为什么要有这些模式呢":["14.2"],"目的":["14.2"],"职责划分":["14.2"],"采用虚拟":["14.3"],"传统更新页面":["14.3"],"区分编译":["14.4"],"打包":["14.4"],"时和运行":["14.4"],"application":["15.1"],"单页应用":["15.1"],"默认情况下我们编写":["15.1"],"react":["15.1"],"都只有一个":["15.1"],"spa":["15.2"],"多页面应用":["15.2"],"mpa":["15.2"],"组成":["15.2","69.5"],"一个主页面和页面组件":["15.2"],"静态页面预渲染":["15.3"],"static":["15.3"],"site":["15.3"],"vue为什么需要虚拟dom":["16.0"],"来对真实的":["16.1"],"进行抽象":["16.1"],"也就是现在大家所熟知的":["16.1"],"vdom":["16.2","16.3"],"是如何生成的":["16.2"],"在":["16.2","19.2","63.0","66.0"],"如何做":["16.3"],"diff":["16.3","32.1"],"挂载过程结束后":["16.3"],"组件化的理解":["17.0"],"webcomponent":["17.0"],"watcher":["17.1","24.0"],"effect":["17.1"],"通过数据劫持可以精确探测数据变化":["18.0"],"为什么还要虚拟":["18.0"],"请说一下你对响应式的理解":["19.0"],"如何实现响应式数据":["19.1"],"数组和对象类型当值变化时如何劫持到":["19.1"],"的时候使用":["19.2"],"defineproperty":["19.2"],"observer":["19.3","31.1"],"data":["19.3","28.0","31.1","35.1","44.1","44.2","65.0"],"实现数组劫持":["20.1"],"数组考虑性能的原因没有用":["20.1"],"每个属性都拥有自己的":["21.1"],"dep":["21.1"],"vue3依赖收集":["21.2"],"vue3":["21.2","68.0"],"production":["22.0"],"isundef":["22.0"],"isprimitive":["22.0"],"warn":["22.0"],"cannot":["22.0"],"reactive":["22.0"],"property":["22.0"],"on":["22.0"],"or":["22.0"],"primitive":["22.0"],"如果是数组":["22.0"],"基本概念":["23.1","25.1"],"效果展示":["23.2"],"computed":["24.0"],"vue2中有三种":["24.0"],"watch":["24.2","49.3"],"ref":["25.1","87.8"],"立即运行一个函数":["26.0"],"然后被动地追踪它的依赖":["26.0"],"当这些依赖改变时重新执行该函数":["26.0"],"侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数":["26.0"],"中含有模板编译的功能":["27.0"],"它的主要作用是将用户编写的":["27.0"],"内部会进行初始化操作":["28.0"],"内部会初始化组件绑定的事件":["28.0"],"初始化组件的父子关系":["28.0"],"children":["28.0"],"root":["28.0"],"初始化响应式数据":["28.0"],"observable":["29.0"],"你有了解过吗":["29.0"],"哪个优先级更高":["30.0"],"生命周期有哪些":["31.0"],"销毁前后":["31.1"],"beforecreate":["31.1","31.2"],"初始化父子关系及事件":["31.1"],"数据观测":["31.1"],"之前被调用":["31.1"],"用此方法一般编写插件的时候会用到":["31.1"],"描述":["31.2"],"组件实例被创建之初":["31.2"],"组件实例已经完全创建":["31.2"],"概念":["32.1","34.1","40.1","48.1","49.1","60.2"],"相同节点比较属性":["32.2"],"并复用老节点":["32.2"],"将老的虚拟":["32.2"],"请说明":["33.0"],"的特殊":["33.1"],"主要用在":["33.1"],"的作用":["33.2"],"安装":["34.1"],"插件的功能":["34.2"],"插件缓存":["34.3"],"installedplugins":["34.3"],"构造器":["35.1"],"创建一个":["35.1"],"子类":["35.1"],"参数是一个包含组件选项的对象":["35.1"],"选项是特例":["35.1"],"分析":["35.2"],"不会产生数据污染的情况":["36.0"],"组件实例对象":["36.0"],"必须是函数":["36.0"],"目的是为了防止多个组件实例对象之间共用一个":["36.0"],"产生数据污染":["36.0"],"所以需要通过工厂函数返回全新的":["36.0"],"作为组件的数据源":["36.0"],"无状态":["37.0"],"无生命周期":["37.0"],"无":["37.0"],"我们也可以理解成纯函数":["38.0"],"filtera":["38.0"],"arg1":["38.0"],"arg2":["38.0"],"filter2":["38.0"],"once":["39.1"],"will":["39.2"],"never":["39.2"],"msg":["39.2","75.3","75.4"],"有子元素":["39.2"],"mixin":["40.1"],"mixin合并策略":["40.3"],"核心就是":["40.3"],"什么是插槽":["41.1"],"编译后的结果with":["41.3"],"t":["41.3"],"my":["41.3"],"h1":["41.3","75.3","75.4"],"标题":["41.3"],"说说你对双向绑定的理解":["42.0"],"双向绑定的概念":["42.1"],"表单元素的":["42.2"],"model":["42.2","77.16"],"prop":["42.3","43.0","73.5"],"和名为":["42.3"],"的事件":["42.3"],"对于组件而言":["42.3"],"就是value":["42.3"],"在有些情况下":["43.0"],"我们可能需要对一个":["43.0"],"进行":["43.0"],"双向绑定":["43.0"],"item":["44.0","44.1","68.5","73.16"],"根":["44.0"],"resub":["44.1"],"renderchildren":["44.2"],"属性有哪些好处和作用":["45.0"],"增加":["45.0"],"选择会在":["45.0"],"有什么应用场景":["46.0"],"表单修饰符":["46.0"],"lazy":["46.0"],"异步组件概念":["47.1"],"resolve":["47.2"],"reject":["47.2"],"settimeout":["47.2"],"render":["47.2","68.1"],"h":["47.2","73.12","73.13"],"说说你对":["48.0"],"include":["49.2"],"whitelist":["49.2"],"exclude":["49.2"],"blacklist":["49.2"],"count":["49.2","74.5"],"缓存列表":["49.3"],"keys":["49.3"],"destroyed":["49.3"],"alive销毁时":["49.3"],"删除所有缓存":["49.3"],"prunecacheentry":["49.3"],"监控缓存列表":["49.3"],"beforerouteenter":["49.4"],"在与":["49.4"],"router":["49.4"],"的项目":["49.4"],"自定义指令的使用场景":["50.0"],"指令的概念":["50.1"],"bind":["50.2"],"只调用一次":["50.2"],"指令第一次绑定到元素时调用":["50.2"],"在这里可以进行一次性的初始化设置":["50.2"],"has":["50.3"],"拖拽指令":["50.3"],"draggable":["50.3"],"mousemove":["50.3"],"mouseup":["50.3"],"mousedown":["50.3"],"dragenter":["50.3"],"dragover":["50.3"],"vuex":["51.0","60.4","61.0","62.0"],"中的":["51.0"],"store":["51.0","60.4","64.0","84.4","84.8"],"工厂模式":["51.0"],"传入参数即可创建实例":["51.0"],"通过":["52.0"],"freeze":["52.0"],"方法冻结属性":["52.0"],"使用数据时":["52.0"],"减少入口文件体积大小":["53.0"],"优化体验骨架屏":["53.0"],"抽离公共代码":["53.0"],"采用":["53.0"],"splitchunks":["53.0"],"这个是浏览器的行为":["54.0"],"协议":["54.0"],"主机名":["54.0"],"端口的不同都会导致跨域问题":["54.0"],"项目中有封装过":["55.0"],"axios":["55.0"],"吗":["55.0"],"token":["56.1"],"前端将":["56.1"],"保存到本地":["56.1"],"作为用户登录的凭证":["56.1"],"导航被触发":["57.0"],"在失活的组件调用":["57.0"],"beforerouteleave守卫":["57.0"],"调用全局的":["57.0"],"beforeeach":["57.0"],"有三种模式":["58.0"],"hash":["58.0"],"history":["58.0"],"状态修改":["60.3"],"组件中":["60.3"],"对于":["60.5"],"如何监听":["61.0"],"的数据丢失怎么解决":["62.0"],"中可以处理异步逻辑":["63.0"],"在什么情况下会使用":["64.0"],"使用单一状态树":["64.0"],"应用的所有状态会集中到一个比较大的对象":["64.0"],"当应用变得非常复杂时":["64.0"],"对象就有可能变得相当臃肿":["64.0"],"中采用的是":["65.0"],"optionsapi":["65.0"],"用户提供的":["65.0"],"props":["65.0"],"methods":["65.0"],"中无法单独使用的模块":["66.0"],"需要引入完整的":["66.0"],"例如只想使用响应式部分":["66.0"],"但是需要引入完整的":["66.0"],"errorcapture":["67.1"],"钩子":["67.1"],"可以捕获来自后代组件的错误":["67.1"],"全局设置错误处理":["67.2"],"如果在组件渲染时出现运行错误":["67.2"],"错误将会被传递至全局":["67.2"],"instance":["67.3"],"interceptors":["67.3"],"response":["67.3"],"此":["68.1"],"template":["68.1","73.2","73.6","73.9","73.10","74.9","74.10","75.9","75.10","75.12","75.13","75.16","75.17","75.23","75.24","75.27","75.28","76.2","77.1","77.2","77.5","77.8","77.9","77.17","77.18","78.2","79.1","79.2","81.2","82.2","83.1","85.3"],"经过模板编译会编译成如下代码":["68.1"],"createelementvnode":["68.1"],"as":["68.1","68.4","68.5"],"todisplaystring":["68.1","68.4"],"openblock":["68.1"],"createelementblock":["68.1"],"from":["68.1","73.13","85.4"],"ctx":["68.1"],"只有":["68.2"],"不就挺好的么":["68.2"],"问题出在":["68.2"],"在收集动态节点时是忽略虚拟":["68.2"],"fruits":["68.5"],"renderlist":["68.5"],"基本上是同义词":["69.1"],"但是":["69.1"],"ecma":["69.3"],"document":["69.4"],"前者提供了一中映射":["69.5"],"xml":["69.5"],"文档":["69.5"],"从而方便访问和操作文档任意部分的方式":["69.5"],"后者扩展了前者并增加了特定于":["69.5"],"用于支持访问和操作浏览器的窗口":["69.6"],"主要针对浏览器窗口和子窗口":["69.6"],"frame":["69.6"],"属性指定的代码字符集":["70.1"],"这个属性很少使用":["70.1"],"因为大多数浏览器不在乎它的值":["70.1"],"crossorigin":["70.1"],"配置相关请求的":["70.1"],"cros":["70.1"],"跨域资源共享":["70.1"],"默认不适用":["70.1"],"annoymous":["70.1"],"配置文件请求不必设置凭据标志":["70.1"],"use":["70.1"],"credentials":["70.1"],"d":["72.0"],"ts":["72.0","84.2","85.5"],"文件":["72.0"],"提供了一个内置组件":["73.1"],"将以下元素渲染成":["73.2"],"teleport":["73.3"],"组件的":["73.5"],"渲染函数来实现一个组件":["73.12"],"请注意":["73.12"],"你需要实现一个树组件":["73.15"],"p":["74.1","74.2","74.5","75.6","75.7","76.6"],"如果源是对象":["75.14"],"强制深度遍历":["75.14"],"以便在深层级变更时触发回调":["75.14"],"参考深层侦听器":["75.14"],"flush":["75.14"],"强制触发依赖于一个浅层":["75.18"],"你将使用":["75.20"],"组合式":["75.20"],"app":["75.21","85.4"],"run":["75.25"],"customref":["75.29"],"单文件组件":["76.1"],"我们想在具有css作用域的":["76.5"],"可以把对应的":["76.7"],"提供了一个指令":["77.4"],"并跳过之后的更新":["77.6"],"在随后的重新渲染":["77.6"],"元素":["77.6"],"li":["77.14","77.15"],"让我们开始吧":["78.1"],"click":["78.2"],"click1":["78.2"],"在监听键盘事件时添加按键修饰符":["78.4"],"只有在":["78.4"],"被一同按下时也会触发":["78.5"],"更新":["79.0"],"响应式":["81.1"],"reactiveobj":["81.3"],"我们需要依赖于异步的返回结果做一些后续处理":["82.1"],"persistedstate":["84.1"],"pnpm":["84.1"],"中添加":["84.2"],"persist":["84.3"],"来开启数据持久化":["84.3"],"作为":["84.4"],"storage":["84.4","84.5","84.9","84.10"],"默认的":["84.4"],"用于引用":["84.5"],"中的数据":["84.5"],"必须具有":["84.6","84.8"],"getitem":["84.6"],"中哪些数据需要被持久化":["84.7"],"表示不持久化任何状态":["84.7"],"表示持久化整个":["84.7"],"该配置能够指定持久化时所使用的序列化方法":["84.8"],"以及恢复":["84.8"],"时的反序列化方法":["84.8"],"另外":["84.8"],"serialize":["84.8"],"该":["84.9","84.10"],"hook":["84.9","84.10"],"将在从":["84.9","84.10"],"中恢复数据之前触发":["84.9"],"并且它可以访问整个":["84.9","84.10"],"中恢复数据之后触发":["84.10"],"默认值":["84.11"],"npm":["85.1"],"可以填写多个":["85.2"],"gitee":["85.2"],"xuchp":["85.2"],"typora":["85.2"],"组件":["85.3"],"setup语法糖":["86.0"],"composition":["87.0"],"类型的":["87.1"],"拉开序幕的":["87.2"],"数据":["87.3"],"计算属性":["87.3"],"监视":["87.3"],"等等":["87.3"],"均配置在":["87.3"],"特点如下":["87.3"],"函数返回的对象中的内容":["87.3"],"定义响应式变量":["87.4"],"对象类型的响应式数据":["87.5","87.6"],"作用":["87.5"],"定义一个":["87.5"],"响应式对象":["87.5"],"创建":["87.6"],"对象类型数据":["87.7"],"创建的变量必须使用":["87.7"],"备注":["87.8"],"功能一致":["87.8"]},{"0":["0.16","13.20","13.68","71.20","71.68"],"1":["0.16","5.12","5.21","5.22","5.23","5.25","5.58","5.59","5.60","11.11","11.30","11.32","11.37","11.42","11.57","11.59","11.74","11.86","11.95","11.102","11.105","11.109","11.120","11.126","13.24","69.5","69.6","71.24"],"2":["0.8","2.6","4.24","5.3","5.7","5.11","5.16","5.23","5.25","5.30","5.36","11.113","11.129","11.131","11.134","13.84","13.90","44.0","57.0","69.6","71.84","71.90"],"3":["4.2","5.30","11.18","11.32","13.60","13.65","13.76","13.79","13.86","13.87","32.2","71.60","71.65","71.76","71.79","71.86","71.87"],"4":["5.30","11.24","11.25","11.26","11.29","11.66","11.71","11.72","11.75","11.116","11.135","13.82","70.1","71.82"],"5":["5.19","11.19","11.32","11.33","11.35","11.138","13.33","13.83","70.1","71.33","71.83"],"6":["11.41","13.83","29.0","71.83"],"7":["11.47","13.30","71.30"],"8":["11.51"],"10":["4.5","5.10","5.51","11.23"],"16":["13.35","71.35"],"17":["4.3"],"18":["5.43"],"20":["5.45","11.65"],"21":["13.65","71.65"],"26":["5.33","13.15","71.15"],"32":["4.16","5.33"],"33":["11.19"],"35":["5.33","9.0"],"37":["5.33"],"39":["5.33"],"100":["11.19","11.77","22.0"],"111":["4.3"],"123":["4.2","5.18"],"150":["11.140"],"262":["69.1"],"308":["13.32","71.32"],"315":["13.32","71.32"],"400":["11.90"],"404":["59.0"],"1000":["47.2"],"margin":["0.1"],"border":["0.1","0.5","0.6"],"padding":["0.1"],"的区别":["0.2","5.67"],"div":["0.3","0.12","47.2","50.3","68.2","75.1","75.2","75.16","75.17","75.23","75.24","78.1","80.1","80.2","81.2","83.1","87.8"],"p":["0.3","2.1","39.2","68.2","75.3","75.4","75.9","75.10","75.12","75.13","75.16","75.17","76.2","81.2","82.2"],"h1":["0.3","2.1","39.2"],"相邻选择器":["0.3"],"后代":["0.3"],"权重计算":["0.4"],"第一":["0.4"],"style":["0.4"],"300px":["0.6"],"height":["0.6"],"5px":["0.6"],"solid":["0.6"],"ccc":["0.6"],"display":["0.6"],"此元素前后会带有换行符":["0.7"],"inline":["0.7"],"默认":["0.7"],"此元素会被显示为内联元素":["0.7"],"了解":["0.8"],"创建一个盒子":["0.9"],"添加样式":["0.9"],"css":["0.9","0.20","3.6"],"说明":["0.10"],"absolute":["0.11"],"绝对定位":["0.11"],"相对于第一个有":["0.11"],"的父元素定位":["0.11"],"脱离文档流":["0.11"],"body":["0.12","3.4","73.2"],"class":["0.12","11.38","11.40","85.3"],"container":["0.12"],"文件":["0.13"],"用来重置":["0.13"],"样式":["0.13"],"把多个小图标合并成一张大图片":["0.14"],"又称精灵图":["0.14"],"取值范围":["0.16"],"之间":["0.16"],"区别":["0.17"],"一个冒号":["0.17"],"是伪类":["0.17"],"chorme":["0.18"],"浏览器默认字体大小是":["0.18"],"相对于":["0.19"],"font":["0.19"],"size":["0.19"],"的颜色值能改变吗":["0.20"],"width":["0.21","11.77","11.140"],"1000px":["0.21"],"可以排除不支持媒体查询的浏览器":["0.21"],"设备类型":["0.21"],"移动端应该做什么样的布局方案":["0.22"],"注意":["0.22","4.5","5.6"],"访问量还可以或者比较大":["0.22"],"例如淘宝网":["0.22"],"端是一套":["0.22"],"会加入一点点响应式":["0.22"],"移动端是一套":["0.22"],"footer":["2.1"],"header":["2.1"],"section":["2.1"],"现有":["2.2"],"后有":["2.2"],"是显示在网页标题上":["2.3"],"显示在网页内容上":["2.3"],"比":["2.3","5.51"],"更加的重要":["2.3"],"seo":["2.3","2.6","15.2"],"的了解":["2.3"],"鼠标移入到图片显示的值":["2.4"],"jpeg":["2.5"],"的大":["2.5"],"适合做小图标":["2.5"],"易读性和维护性更好":["2.6"],"html":["3.1","3.4","30.0","50.3","68.2"],"input":["3.2","75.27","75.28","77.1","77.2","77.8","77.9","77.17","77.18","78.4"],"textarea":["3.2"],"user":["3.5"],"select":["3.5"],"用户选中文字":["3.6"],"symbol":["4.1","5.2"],"bigint引用数据类型":["4.1"],"object":["4.1","5.52","11.34","13.46","69.4","71.46"],"prototype":["4.2","5.16","5.18","5.41"],"找到相同的原型对象":["4.2"],"返回":["4.2"],"验证一下自己实现的":["4.2"],"是否":["4.2"],"ok":["4.2"],"console":["4.2","4.6","5.8","5.17","5.50","5.57","11.53","13.16","13.17","13.33","71.16","71.17","71.33"],"log":["4.2","4.5","4.6","5.12","5.50","5.57","11.53","13.16","13.17","13.33","71.16","71.17","71.33"],"new":["4.2","13.7","13.44","26.0","71.7","71.44"],"number":["4.2","5.27","11.22","11.28","11.36","11.39","11.40","11.43","11.46","46.0"],"tostring":["4.2","13.38","71.38"],"1a":["4.3"],"0x11":["4.3"],"方法的强制转换规则":["4.3"],"除了":["4.3"],"包括":["4.3"],"转换出来是":["4.3"],"其他均为":["4.3"],"是对象就再次调用该函数递归":["4.6"],"else":["4.6"],"基本类型的话直接复制值":["4.6"],"return":["4.6","11.27","34.3","47.2","67.3","68.1"],"obj2":["4.6","5.13","5.52"],"这个深拷贝函数不能复制不可枚举的属性以及":["4.6"],"类型":["4.6","11.82"],"这种方法只是针对普通的引用类型的值做递归复制":["4.6"],"对象的属性里面成环":["4.6"],"即循环引用没有解决":["4.6"],"改进版":["4.6"],"改进后递归实现":["4.6"],"针对能够遍历对象对象的不可枚举属性以及":["4.6"],"我们可以使用":["4.6"],"缩短开发的周期":["4.7"],"child3":["4.8"],"第二次调用parent3":["4.8"],"第一次调用parent3":["4.8"],"手动挂上构造器":["4.8"],"指向自己的构造函数":["4.8"],"constructor":["4.8","11.39","11.44"],"s3":["4.8"],"s4":["4.8"],"互不影响":["4.8"],"正常输出":["4.8"],"构造函数返回的最后结果是引用数据类型":["4.9"],"的实现":["4.9"],"js":["4.9","5.39","13.20","13.25","15.1","27.0","34.1","35.1","36.0","38.0","42.3","49.4","71.20","71.25","76.6"],"function":["4.9","5.17","5.31","5.32","5.34","5.54","11.28","11.53","36.0"],"ctor":["4.9"],"args":["4.9"],"if":["4.9","5.35","5.58","11.65","23.1","34.3"],"typeof":["4.9","5.9"],"throw":["4.9"],"must":["4.9"],"be":["4.9"],"a":["4.9","5.8","5.59"],"let":["4.9","5.61","5.62","11.16","11.27","11.37","13.10","13.12","13.34","13.66","71.10","71.12","71.34","71.66"],"指变量能够被访问到的范围":["4.10"],"一个函数和对其周围状态的引用捆绑在一起":["4.11"],"或者说函数被引用包围":["4.11"],"代码解释器会首先在当前的作用域查找":["4.12"],"ajax":["4.13"],"请求":["4.13"],"web":["4.13","41.1"],"方法用来解析":["4.14"],"字符串":["4.14"],"构造有字符串描述的":["4.14"],"不是数值时":["4.16"],"处理同上":["4.16"],"返回一个只包含":["4.16"],"元素一项的数组":["4.16"],"为数值时":["4.16"],"最大不能超过":["4.16"],"位无符号整型":["4.16"],"即需要小于":["4.16"],"的":["4.16","87.0"],"isarray":["4.17","22.0"],"es6":["4.18"],"新增的方法":["4.18"],"copywithin和":["4.18"],"fill不改变自身的方法":["4.18"],"concat":["4.18","4.23"],"join":["4.18"],"image":["4.19","14.2","85.2"],"20240117153246144":["4.19"],"利用":["4.19"],"reduce":["4.19"],"函数迭代":["4.19"],"从上面普通的递归函数中可以看出":["4.19"],"其实就是对数组的每一项进行处理":["4.19"],"其实也可以用reduce":["4.19"],"来实现数组的拼接":["4.19"],"从而简化第一种方法的代码":["4.19"],"prev":["4.19","4.23"],"nlogn":["4.21"],"result":["4.23"],"插入排序":["4.23"],"插入排序算法描述的是一种简单直观的排序方法":["4.23"],"它的工作原理是通过构建有序序列":["4.23"],"对于未排序数据":["4.23"],"在已排序序列中从后向前扫描":["4.23"],"找到相应的值并插入":["4.23"],"从而达到排序的效果":["4.23"],"insertsort":["4.23"],"current":["4.23"],"while":["4.23"],"会被排列在":["4.24"],"之前":["4.24"],"等于":["4.24"],"type":["5.1","11.96","11.112","77.1","77.2"],"text":["5.1","7.5","11.110","11.136","68.1","77.6"],"javascript":["5.1","14.1","69.3"],"src":["5.1","87.7"],"null":["5.2","5.50","13.86","68.1","71.86","84.6"],"bigint":["5.2"],"的时候借鉴了":["5.3"],"java":["5.3"],"语言":["5.3"],"boolean":["5.4","11.21","11.65","11.96","13.28","13.44","71.28","71.44"],"都会隐式转换":["5.4"],"事件循环":["5.5"],"同步执行完了":["5.5"],"才会执行事件循环的内容":["5.5"],"进入事件循环":["5.5"],"内部可以访问外部的变量":["5.6"],"但是外部不能访问内部的变量":["5.6"],"如果内部有":["5.6"],"注意变量提升":["5.7"],"undefined":["5.9","13.15","13.17","13.23","13.24","71.15","71.17","71.23","71.24","87.3"],"var":["5.10","5.24","5.39","5.63","13.7","13.20","13.22","71.7","71.20","71.22"],"操作符构建出来的":["5.11"],"所以对象之间不相等":["5.11"],"除了引用外":["5.11"],"c":["5.14"],"指向":["5.15","5.48"],"fn":["5.17","75.25"],"geta":["5.18"],"obj":["5.19"],"test1":["5.19"],"arr":["5.21","5.22","5.23","5.24"],"是否会改变原数组":["5.26"],"start":["5.27"],"end":["5.27"],"t":["5.28"],"unique":["5.31","5.32"],"str":["5.34"],"char":["5.35"],"charat":["5.35"],"将空对象的原型指向于构造函数的原型":["5.36"],"闭包是一个函数加上到创建函数的作用域的连接":["5.38"],"lis":["5.39","5.40"],"document":["5.39","5.40"],"getelementsbytagname":["5.40"],"li":["5.40","30.0","73.16"],"for":["5.40","5.63","7.13"],"函数拥有":["5.41"],"对象拥有":["5.41"],"child":["5.43","5.44","5.45","5.46","44.2","75.21"],"extends":["5.43","11.39"],"call":["5.46","5.64"],"bind":["5.47","5.49"],"可以立即执行":["5.49"],"不会立即执行":["5.49"],"math":["5.50","22.0"],"max":["5.50","22.0"],"的数组使用":["5.51"],"b":["5.52"],"assign":["5.52"],"深拷贝":["5.52"],"浏览器关了就没了":["5.53"],"始终有效":["5.53"],"窗口或者浏览器关闭了也一直存在":["5.53"],"所以是持久化存储":["5.53"],"resize":["5.54"],"setremunit":["5.54"],"和":["5.55","11.3","11.49","11.54","11.58","11.82","11.114","11.124","13.12","13.27","13.86","16.1","28.0","71.12","71.27","71.86","84.6","84.8"],"没有变量提升的机制":["5.55"],"区别二":["5.55"],"true":["5.58","11.60","13.73","71.73"],"obj1":["5.61","5.62"],"key":["5.63","19.3","44.1","52.0"],"in":["5.63","19.3","77.14","77.15"],"而且是不能修改的":["5.64"],"apply":["5.64"],"pending":["5.65"],"返回的内容不同":["5.66"],"系统自带有8个":["7.2"],"beforecreated":["7.2","7.7"],"beforemount":["7.2","31.2"],"因为":["7.3","13.19","71.19"],"如果请求是在":["7.3"],"methods":["7.3","40.3"],"中封装好的":["7.3"],"只要写异步代码":["7.4"],"获取":["7.4"],"次进入组件会执行哪些生命周期":["7.6"],"如果当前组件加入了":["7.6"],"keep":["7.6","49.1"],"父":["7.7"],"组件":["7.8","39.2"],"当前的组件会额外新增":["7.8"],"单组件请求":["7.9"],"mounted":["7.9","31.2"],"str1":["7.11"],"子组件通过":["7.11"],"props":["7.11","40.3","68.1"],"vue":["7.12","14.4","16.2","23.2","32.1","33.0","33.2","35.2","37.0","42.3","47.1","50.1","67.2","72.0","87.8"],"单向绑定":["7.12"],"的优先级":["7.13"],"promise":["7.15","47.2"],"then":["7.15"],"lastedittime":["9.0"],"demonstrates":["10.0"],"some":["10.0"],"with":["10.1","41.3"],"additional":["10.1"],"features":["10.1"],"like":["10.1"],"line":["10.1"],"danger":["10.2"],"documentation":["10.3"],"鸿蒙应用开发快速体验":["11.0"],"准备开发环境":["11.1"],"调试以及发布应用的各项功能":["11.2"],"img":["11.2","11.8","11.13","11.67","11.80","87.7"],"以下是具体的安装步骤":["11.2"],"获取deveco":["11.2"],"studio安装包":["11.2"],"官方下载地址为":["11.2"],"https":["11.2","87.7"],"developer":["11.2"],"ohpm":["11.3"],"选择合适的安装路径":["11.3"],"完成后点击":["11.3"],"next":["11.3"],"即可":["11.3","11.4","11.7"],"注":["11.3"],"用于为鸿蒙应用的自动化构建工具提供运行环境":["11.3"],"openharmony":["11.3"],"此处选择第一个":["11.4"],"empty":["11.4"],"ability":["11.4"],"运行项目":["11.5"],"预览":["11.6"],"previewer":["11.6"],"后":["11.7"],"会首先下载模拟器相关的sdk":["11.7"],"下载完成后点击":["11.7"],"finish":["11.7"],"打开手机的开发者模式":["11.8"],"在":["11.8","11.52","33.2","35.1","70.1"],"中":["11.8","32.0"],"连续多次点击系统版本号":["11.8"],"直至出现":["11.8"],"您正处在开发者模式":["11.8"],"的提示信息":["11.8"],"arkts":["11.9","11.56","11.99"],"它由":["11.9"],"typescript":["11.9","11.10","11.31","11.40","11.128","72.0","84.3","84.5","84.7","84.9","84.10"],"线上playground":["11.12"],"typescript提供了一个线上的":["11.12"],"安装code":["11.13"],"runner":["11.13"],"插件":["11.13","34.1"],"runner是一款在vscode中使用的插件":["11.13"],"它提供了简便的代码执行功能":["11.13"],"使开发者能够快速运行和调试代码片段":["11.13"],"常量声明":["11.16"],"用于声明变量":["11.16"],"如果一个变量或常量的声明包含了初始值":["11.17"],"ts":["11.17"],"例如":["11.19","11.22","11.23","11.89","11.91","11.99","11.139","13.36","71.36"],"string":["11.20","11.28","11.36","11.39","11.43","11.46","11.110","84.6","84.8"],"表示字符串":["11.20"],"表示布尔值":["11.21"],"元素类型":["11.22"],"表示数字数组":["11.22"],"姓名":["11.23"],"张三":["11.23"],"年龄":["11.23"],"性别":["11.23"],"男":["11.23"],"未知":["11.27"],"p1":["11.27"],"printnumberorstring":["11.28"],"特殊类型":["11.30"],"若函数没有返回值":["11.30"],"函数的返回值类型可根据函数内容推断出来":["11.31"],"因此可以省略不写":["11.31"],"面向对象编程":["11.34"],"oriented":["11.34"],"programming":["11.34"],"简称oop":["11.34"],"id":["11.36","11.39","11.40","11.136","44.1","79.1","79.2"],"name":["11.36","11.39","11.40","11.43","11.46","11.140","13.16","13.21","71.16","71.21"],"age":["11.36","11.43","11.46"],"person":["11.37","11.39","11.40","11.46"],"zhangsan":["11.37"],"定义静态成员需要使用":["11.38"],"static":["11.38"],"关键字":["11.38"],"constants":["11.38"],"count":["11.38","75.6","75.7","75.12","75.13"],"student":["11.39"],"classnumber":["11.39"],"private":["11.40"],"protected":["11.40"],"概述":["11.42","11.73","11.76","11.102"],"introduce":["11.43"],"void":["11.43","13.7","71.7"],"接口实现":["11.43"],"接口的实现需要用到":["11.43"],"this":["11.44","11.65","11.77","37.0","65.0","87.3"],"很容易预想到":["11.45"],"这个系统将来可能需要支持其他的支付方式":["11.45"],"为了方便代码支持新的支付方式":["11.45"],"我们可以对代码进行如下改造":["11.45"],"首先定义一个支付策略的接口":["11.45"],"接口中声明一个":["11.45"],"方法":["11.45","11.69","19.1","22.0","28.0","87.1"],"用来规范实现类必须实现支付逻辑":["11.45"],"interface":["11.45"],"paymentstrategy":["11.45"],"amount":["11.45"],"gender":["11.46"],"枚举":["11.48"],"enumeration":["11.48"],"是编程语言中常见的一种数据类型":["11.48"],"枚举值的类型":["11.49"],"枚举值的类型为":["11.49"],"的名称":["11.49"],"等值的类型都是":["11.49"],"left":["11.50"],"right":["11.50"],"除了使用默认的数字作为属性的值":["11.50"],"模块化是指将复杂的程序拆解为多个独立的文件单元":["11.52"],"每个文件被称为一个模块":["11.52"],"hello":["11.53","13.34","47.2","71.34"],"同时引入":["11.54"],"modulea":["11.54"],"的内容":["11.54"],"如下":["11.54","11.80","11.128"],"显然就会出命名冲突":["11.54"],"import":["11.54","11.128","72.0","84.2","84.3","84.5","84.7","84.9","84.10"],"from":["11.54","11.128","84.2","84.5","84.7","84.9","84.10"],"默认导出":["11.55"],"默认导出允许一个模块指定一个":["11.55"],"最多一个":["11.55"],"默认的导出项":["11.55"],"语法如下":["11.55","87.8"],"快速入门":["11.56"],"声明式ui":["11.57"],"当前案例中":["11.58"],"界面共有两个状态":["11.58"],"分别是":["11.58","11.82"],"开灯":["11.58"],"若我们将":["11.60"],"ison":["11.60","11.65"],"的值改为":["11.60"],"那么界面上就会显示":["11.60"],"总结":["11.61"],"以上就是声明式ui开发范式的大致流程":["11.61"],"在鸿蒙开发中":["11.62"],"组件是构成界面的最小单元":["11.62"],"我们所看到的界面":["11.62"],"lightpage":["11.65"],"state":["11.65","63.0","64.0"],"false":["11.65","13.27","13.73","71.27","71.73","84.11"],"build":["11.65","11.69"],"column":["11.65"],"space":["11.65"],"声明组件的完整语法如下图所示":["11.67"],"各部分语法说明如下":["11.67"],"组件参数":["11.67"],"如果组件的定义包含参数":["11.67"],"可在组件名称后面的":["11.67"],"中配置相应参数":["11.67"],"可包含属性和方法":["11.69"],"方法用于声明自定义组件的ui结构":["11.69"],"组件属性":["11.69"],"组件属性可用作自定义组件的参数":["11.69"],"使得自定义组件更为通用":["11.69"],"现在需要对前文的开":["11.70"],"关灯的案例做出如下改造":["11.70"],"由于两个按钮的结构十分相似":["11.70"],"条件渲染可根据应用的不同状态渲染不同的ui界面":["11.73"],"例如前文的开":["11.73"],"关灯案例":["11.73"],"循环渲染可使用":["11.76"],"foreach":["11.76"],"数组中的数据项":["11.77"],"可选":["11.77"],"数组中的数据项的索引":["11.77"],"button":["11.77","11.99","73.6","74.5","79.1","79.2"],"backgroundcolor":["11.77","11.124"],"color":["11.77"],"green":["11.77","11.91"],"onclick":["11.77"],"answer":["11.77"],"图片":["11.78"],"类型的参数用于引入":["11.80"],"resources":["11.80","11.87"],"目录下的图片":["11.80"],"resources目录用于统一存放应用所需的各种资源":["11.80"],"包括图片":["11.80"],"音频":["11.80"],"视频":["11.80"],"文本等等":["11.80"],"下面简要介绍":["11.80"],"目录的用法":["11.80"],"首先需要了解":["11.80"],"的目录结构":["11.80"],"用于存放资源的子目录有":["11.80"],"element":["11.80","11.87"],"profile":["11.80"],"和rawfile":["11.80"],"下面分别介绍":["11.80"],"类型的参数可为百分比":["11.82"],"或者为具体尺寸":["11.82"],"100px":["11.82","11.89"],"具体尺寸的单位":["11.82"],"常用的有两个":["11.82"],"px":["11.82"],"vp":["11.82"],"下面逐个介绍":["11.82"],"前置知识":["11.82"],"屏幕参数":["11.82"],"pixel":["11.82"],"物理像素":["11.82"],"以像素个数来定义图像尺寸":["11.82"],"描述":["11.83","11.92","69.3"],"none":["11.83"],"保持原有尺寸显示":["11.83"],"不做任何缩放":["11.83"],"超出显示区域的部分不显示":["11.83"],"使图片显示得更清晰":["11.84"],"该方法的参数为":["11.84","11.112"],"imageinterpolation":["11.84"],"枚举类型":["11.84"],"可选的值有":["11.84"],"名称":["11.84","11.92"],"文本":["11.85"],"类型的参数用于引用":["11.87"],"目录中定义的字符串":["11.87"],"同样需要使用":["11.87"],"r":["11.87"],"引用":["11.87"],"string类型":["11.89","11.91"],"类型的参数可用于指定字体大小的具体单位":["11.89"],"字体大小的单位支持":["11.89"],"取值间隔为":["11.90"],"默认为":["11.90"],"取值越大":["11.90"],"字体越粗":["11.90"],"fontweight类型":["11.90"],"为枚举类型":["11.90","11.91"],"color类型":["11.91"],"其中包含了多种常用颜色":["11.91"],"可选的枚举值如下":["11.92"],"方法处理超出部分":["11.93"],"该方法的参数类型为":["11.93"],"overflow":["11.93"],"其中":["11.93","11.124"],"按钮":["11.94"],"options":["11.96","36.0","68.1"],"buttontype":["11.96"],"stateeffect":["11.96"],"为按钮上显示的文字内容":["11.96"],"背景颜色":["11.98"],"按钮的颜色可使用":["11.98"],"方法进行设置":["11.99","11.124"],"方法为按钮绑定点击事件":["11.100"],"该方法的参数为一个回调函数":["11.100"],"当按钮被点击时":["11.100"],"就会触发该回调函数":["11.100"],"切换按钮":["11.101"],"属性用于设置":["11.103"],"组件的类型":["11.103"],"可通过":["11.103","11.114"],"选中状态背景色":["11.105"],"可使用设置":["11.106"],"switchpointcolor":["11.106"],"方法设置switch类型的toggle组件中的圆形滑块颜色":["11.106"],"开发者可通过":["11.107"],"onchange":["11.107"],"方法为":["11.107"],"组件绑定change事件":["11.107"],"该方法参数为一个回调函数":["11.107"],"文本输入":["11.108"],"placeholder":["11.110"],"resource":["11.110"],"方法设置输入框的类型":["11.112"],"placeholderfont":["11.114"],"输入文本的样式可通过":["11.115"],"fontsize":["11.115"],"fontweight":["11.115"],"就会触发":["11.117"],"change":["11.117"],"事件":["11.117","11.118"],"开发者可使用":["11.117"],"会触发":["11.118"],"focus":["11.118"],"失去焦点时":["11.118"],"blur":["11.118"],"进度条":["11.119"],"属性用于设置当前进度值":["11.121"],"属性用于设置总值":["11.121"],"scalecount":["11.123"],"scalewidth":["11.123"],"属性用于设置进度条的宽度":["11.123"],"弹窗":["11.125"],"弹窗是移动应用中常见的一种用户界面元素":["11.125"],"模块":["11.128"],"警告对话框":["11.130"],"用于向用户发出警告或确认操作的提示":["11.130"],"确保用户在敏感操作前进行确认":["11.130"],"操作列表弹窗":["11.133"],"用于提供一组选项给用户选择":["11.133"],"用户从中选择后":["11.133"],"可执行相应的操作":["11.133"],"summary":["11.136"],"ucbbb1a17":["11.136"],"strong":["11.136"],"span":["11.136","75.3","75.4","77.5"],"ne":["11.136"],"textpickerdialog":["11.136"],"使用说明":["11.137"],"具体用法可参考相关案例或者官方文档":["11.137"],"各选择器的官方文档地址如下":["11.137"],"可考虑自定义弹窗":["11.139"],"自定义弹窗允许开发者自定义弹窗内容和样式":["11.139"],"value":["11.140","19.3","84.8"],"都区分大小写":["13.2","71.2"],"换句话说":["13.2","71.2"],"变量":["13.2","71.2"],"第一个字符必须是一个":["13.3","71.3"],"字母":["13.3","71.3"],"下划线":["13.3","71.3"],"包括单行注释和块注释":["13.4","71.4"],"单行注释以两个斜杠字符":["13.4","71.4"],"开头":["13.4","71.4"],"的一些不规范写法在这种模式下会被处理":["13.5","71.5"],"对于不安全的活动将抛出错误":["13.5","71.5"],"要对整个脚本使用严格模式":["13.5","71.5"],"在脚本的开头加上这一行":["13.5","71.5"],"catch":["13.7","71.7"],"export":["13.7","71.7","73.13","84.7"],"描述了一组保留的关键字":["13.8","71.8"],"const":["13.12","71.12"],"是一个关键字":["13.13","71.13"],"后跟变量名":["13.13","71.13"],"is":["13.14","49.2","71.14"],"not":["13.14","71.14"],"defined":["13.14","71.14"],"这里":["13.14","71.14"],"变量是在函数内部使用":["13.14","71.14"],"定义的":["13.14","71.14"],"函数叫":["13.14","71.14"],"调用它会创建这个变量并给它赋值":["13.14","71.14"],"调用之后变量随即被销毁":["13.14","71.14"],"因此示例中的最后一行会导致错误":["13.14","71.14"],"之所以不会报错":["13.15","71.15"],"是因为":["13.15","71.15"],"ecmascript":["13.15","13.31","13.43","71.15","71.31","71.43"],"matt":["13.16","13.21","71.16","71.21"],"会被提升":["13.17","71.17"],"在全局作用域中声明的变量不会成为":["13.18","71.18"],"window":["13.18","71.18"],"对象的属性":["13.18","71.18"],"循环块内部":["13.20","71.20"],"i":["13.20","71.20","84.1"],"也不允许重复声明":["13.21","71.21"],"nicholas":["13.21","71.21"],"syntaxerror":["13.21","71.21"],"原始数据类型":["13.23","71.23"],"会返回下列字符串之一":["13.24","71.24"],"表示值未定义":["13.24","71.24"],"值的变量跟未定义变量是有区别的":["13.25","71.25"],"message":["13.25","71.25"],"这个变量被声明了":["13.25","71.25"],"只是值为undefined":["13.25","71.25"],"的原因":["13.26","71.26"],"在定义一个将来要保存对象值的变量时":["13.26","71.26"],"建议使用":["13.26","71.26"],"来初始化":["13.26","71.26"],"不要使用其他值":["13.26","71.26"],"这样":["13.26","71.26"],"这两个布尔值不同于数值":["13.27","71.27"],"因此":["13.27","71.27"],"类型使用":["13.29","71.29"],"然后是相应的八进制数字":["13.30","71.30"],"如果字面量中包含的数字超出了应有的范围":["13.30","71.30"],"有效":["13.31","71.31"],"但不推荐":["13.31","71.31"],"因为存储浮点数值使用的内存空间是存储整数值的两倍":["13.31","71.31"],"所以":["13.31","71.31"],"总是想方设法把值转换为整数":["13.31","71.31"],"在小数点后面没有数字或者全是":["13.31","71.31"],"7e":["13.32","71.32"],"如果某个计算得出的值超出这个范围":["13.32","71.32"],"那么这个数值会被自动转为一个特殊的":["13.32","71.32"],"infinity":["13.32","13.77","71.32","71.77"],"无穷":["13.32","71.32"],"值":["13.32","71.32"],"任何无法表示的负数以":["13.32","71.32"],"num1":["13.34","13.66","71.34","71.66"],"world":["13.34","71.34"],"num2":["13.34","13.90","71.34","71.90"],"num3":["13.34","13.90","71.34","71.90"],"000011":["13.34","71.34"],"num4":["13.34","71.34"],"考虑到":["13.34","71.34"],"函数转换字符串时相对复杂且有点反常规":["13.34","71.34"],"通常在需要得到整数时可以优先使用":["13.34","71.34"],"函数":["13.34","71.34"],"函数更专注于字符串是否包函数值模式":["13.34","71.34"],"字符串最前面的空格会被忽略":["13.34","71.34"],"从第一个非空的字符串开始转换":["13.34","71.34"],"如果第一个字符不是数值字符":["13.34","71.34"],"加号或减号":["13.34","71.34"],"立即返回":["13.34","71.34"],"如果第一个字符是数值字符":["13.34","71.34"],"加号或者减号":["13.34","71.34"],"数据类型表示零或多个":["13.35","71.35"],"反斜杠":["13.36","71.36"],"单引号":["13.36","71.36"],"在字符串以单引号标记时使用":["13.36","71.36"],"he":["13.36","71.36"],"said":["13.36","71.36"],"hey":["13.36","71.36"],"他们的值就不能变了":["13.37","71.37"],"一个是直接在后面加空串":["13.38","71.38"],"与使用单引号或双引号不同":["13.39","71.39"],"模板字面量保留换行字符":["13.39","71.39"],"句法表达式":["13.40","71.40"],"只不过求值后得到的":["13.40","71.40"],"是字符串":["13.40","71.40"],"而通过标签函数可以自定义插值行为":["13.41","71.41"],"标签函数":["13.41","71.41"],"字符":["13.42","71.42"],"是":["13.43","25.1","71.43"],"函数不能与":["13.44","71.44"],"关键字一起作为构造函数使用":["13.44","71.44"],"这样做是为了避免创建符号包装对象":["13.44","71.44"],"像使用":["13.44","71.44"],"foo":["13.45","71.45"],"创建新符号":["13.45","71.45"],"otherfooglobalsymbol":["13.45","71.45"],"重用已有符号":["13.45","71.45"],"这就包括了对象字面量属性和":["13.46","71.46"],"这些内置符号都以":["13.47","71.47"],"工厂函数字符串属性的形式存在":["13.47","71.47"],"这些内置符号最重要的用途之一是重新定义它们":["13.47","71.47"],"从而改变原生结构的行为":["13.47","71.47"],"页":["13.59","71.59"],"用于判断当前对象实例":["13.60","71.60"],"不是原型":["13.60","71.60"],"上是否存在给定的属性":["13.60","71.60"],"要检查的属性名必须是字符串或者符号":["13.60","71.60"],"operator":["13.62","71.62"],"对于字符串":["13.63","71.63"],"如果是有效的数值形式":["13.63","71.63"],"则转换为数值再应用改变":["13.63","71.63"],"变量类型从字符串变成数值":["13.63","71.63"],"如果不是有效的数值形式":["13.63","71.63"],"则将变量值设置为":["13.63","71.63"],"一元加由一个加号":["13.64","71.64"],"表示":["13.64","71.64"],"依此类推":["13.65","71.65"],"负值以一种称为二补数":["13.65","71.65"],"或补码":["13.65","71.65"],"的二进制编码存储":["13.65","71.65"],"一个数值的二补数通过如下":["13.65","71.65"],"然后基于真值表中的规则":["13.67","71.67"],"对每一位执行相应的与操作":["13.67","71.67"],"第一个数值的位":["13.67","71.67"],"会按照指定的位数将数值的所有位向左移动":["13.69","71.69"],"会将数值的所有":["13.70","71.70"],"对于正数":["13.71","71.71"],"无符号右移与":["13.71","71.71"],"有符号右移结果相同":["13.71","71.71"],"则返回":["13.73","13.77","13.79","71.73","71.77","71.79"],"如果操作数是空字符串":["13.73","71.73"],"逻辑与操作符可用于任何类型的操作数":["13.74","71.74"],"不限于布尔值":["13.74","71.74"],"如果有操作数不是布尔值":["13.74","71.74"],"与逻辑与类似":["13.75","71.75"],"如果有一个操作数不是布尔值":["13.75","71.75"],"或":["13.77","13.78","71.77","71.78"],"如果有任一操作数是":["13.77","13.78","71.77","71.78"],"nan":["13.77","13.78","13.79","71.77","71.78","71.79"],"除数是有限值":["13.79","71.79"],"如果被除数是有限值":["13.79","71.79"],"除数是":["13.79","71.79"],"现在有了自己的操作符":["13.80","71.80"],"不仅如此":["13.80","71.80"],"则执行数值比较":["13.84","71.84"],"如果操作数都是字符串":["13.84","71.84"],"则逐个比较字符串中对应字符的编码":["13.84","71.84"],"第二组是全等和不全等":["13.85","71.85"],"则尝试将字符串转换为数值":["13.86","71.86"],"再比较是否相等":["13.86","71.86"],"如果一个操作数是对象":["13.86","71.86"],"另一个操作数不是":["13.86","71.86"],"则调用对象的":["13.86","71.86"],"valueof":["13.86","71.86"],"方法取得其原始值":["13.86","71.86"],"再根据前面的规则进行比较":["13.86","71.86"],"比较规则":["13.86","71.86"],"个等于号":["13.87","71.87"],"上面的代码执行了条件赋值操作":["13.88","71.88"],"即根据条件表达式":["13.88","71.88"],"复合赋值操作符":["13.89","71.89"],"乘后赋值":["13.89","71.89"],"的理解":["14.0"],"过程靠":["14.1"],"来实现":["14.1","43.0"],"声明式代码更加简单":["14.1"],"不需要关注实现":["14.1"],"按照要求填代码就可以了":["14.1"],"给上原材料就出结果":["14.1"],"命令式编程":["14.1"],"分层管理":["14.2"],"20240313103948553":["14.2"],"对于前端而言就是如何将数据同步到页面上":["14.2"],"也就是借鉴后端思想":["14.2"],"拼接一个完整的字符串innerhtml":["14.3"],"全部重新渲染":["14.3"],"添加虚拟":["14.3"],"浏览器":["14.4"],"时":["14.4"],"组件化":["14.5"],"实现高内聚":["14.5"],"spa":["15.0"],"页面":["15.1"],"并且提供一个挂载点":["15.1"],"最终打包后会在此页面中引入对应的资源":["15.1"],"页面的渲染全部是由":["15.1"],"动态进行渲染的":["15.1"],"多个完整的页面":["15.2"],"刷新方式":["15.2"],"局部刷新":["15.2"],"整页刷新":["15.2"],"generation":["15.3"],"ssg":["15.3"],"在构建时生成完整的":["15.3"],"md":["16.0","19.0","29.0"],"vnode":["16.1","49.3"],"vdom":["16.1"],"virtual":["16.1"],"中我们常常回味组件编写模板":["16.2"],"会记录第一次生成的":["16.3"],"oldvnode":["16.3"],"当响应式数据发生变化时":["16.3"],"组件化的核心组成":["17.0"],"模板":["17.0"],"属性":["17.0","52.0"],"数据是响应式的":["17.1"],"数据变化后执行":["17.1"],"进行":["18.0"],"diff":["18.0"],"检测差异":["18.0"],"对象内部通过":["19.1"],"definereactive":["19.1","19.3"],"来进行数据的劫持":["19.2"],"需要对属性进行重写添加":["19.2"],"getter":["19.2","26.0"],"及":["19.2"],"target":["19.3"],"中如何检测数组变化":["20.0"],"defineproperty":["20.1"],"对数组的每一项进行拦截":["20.1"],"数组的缺点":["20.2"],"中如何进行依赖收集":["21.0"],"存放它所依赖的":["21.1"],"watcher":["21.1"],"当属性变化后会通知自己对应的":["21.1"],"中会通过":["21.2"],"map":["21.2","44.2"],"结构将属性和":["21.2"],"array":["22.0"],"调用我们重写的":["22.0"],"splcie":["22.0"],"这样可以更新视图":["22.0"],"isvalidarrayindex":["22.0"],"length":["22.0"],"if和":["23.0"],"v":["23.1","23.3","42.1","43.0","68.2","77.5","77.8","77.9","77.17","77.18"],"template":["23.2","44.0","75.1","75.2","75.21","78.1","80.1","80.2","87.8"],"如何选择":["23.3"],"渲染":["24.0"],"计算属性":["24.0"],"computed":["24.1","28.0","65.0"],"计算属性仅当用户取值时才会执行对应的方法":["24.1"],"则是监控值的变化":["24.2"],"源码剖析":["24.3"],"reactive":["25.0","25.1"],"vue3":["25.1"],"源码实现":["25.2"],"effect":["26.0"],"reactiveeffect":["26.0"],"scheduler":["26.0"],"编译为":["27.0"],"中可执行的":["27.0"],"watch":["28.0","65.0"],"method":["28.0"],"同时也初始化了":["28.0"],"provide":["28.0"],"inject":["28.0"],"vue2":["29.0","87.0"],"避免在同一个标签中使用":["30.0"],"如果遇到需要同事使用时可以考虑写成计算属性的方式":["30.0"],"应当避免这种写法":["30.0"],"实例已经创建完成之后被调用":["31.1"],"在这一步":["31.1"],"实例已经完成以下配置":["31.1"],"属性和方法等":["31.1"],"但是这里没有":["31.1"],"el":["31.1"],"组件挂载之前":["31.2"],"组件挂在实例上去之后":["31.2"],"beforeupdate":["31.2"],"组件数据发生变化":["31.2"],"基于虚拟":["32.1"],"dom":["32.1","32.2","33.1","68.2"],"复用给新的虚拟节点":["32.2"],"比较儿子节点":["32.2"],"考虑老节点和新节点儿子的情况":["32.2"],"的虚拟":["33.1"],"算法":["33.1"],"在新旧":["33.1"],"nodes":["33.1"],"patch":["33.2"],"use":["34.0","67.3"],"如果插件是一个对象":["34.1"],"添加全局指令":["34.2"],"全局过滤器":["34.2"],"indexof":["34.3"],"如果已经有插件":["34.3"],"直接返回":["34.3"],"extend":["35.0","36.0"],"需要注意":["35.1"],"中它必须是函数":["35.1"],"所有的组件创建时都会调用":["35.2"],"sub":["36.0"],"会将data":["36.0"],"但是性能高":["37.0"],"正常组件是一个类继承了":["37.0"],"filter":["38.0"],"once":["39.0"],"概念":["39.1"],"comment":["39.2"],"my":["39.2"],"mixin的使用场景和原理":["40.0"],"mixin可以用来扩展组件":["40.1"],"将公共逻辑进行抽离":["40.1"],"在需要该逻辑时进行":["40.1"],"混入方式":["40.2"],"在vue中我们可以":["40.2"],"对象的合并处理":["40.3"],"中的":["41.0"],"插槽设计来源于":["41.1"],"什么时候使用它":["41.2"],"通过插槽可以让用户更好地对组件进行扩展和定制化":["41.2"],"内容":["41.3"],"编译后结果":["41.3"],"attrs":["41.3"],"以及它的实现原理":["42.0"],"中双向绑定靠的是指令":["42.1"],"model":["42.1","43.0","69.4"],"内部会根据标签的不同解析出不同的语法":["42.2"],"并且这里有":["42.2"],"额外":["42.2"],"的语法糖":["42.3"],"可用于组件中的数据的双向绑定":["42.3"],"名字也可以修改为":["42.3"],"component":["42.3","73.9","73.10"],"base":["42.3"],"checkbox":["42.3"],"默认只能双向绑定一个属性":["43.0"],"这里就可以通过":["43.0"],"submenu":["44.0"],"slot":["44.0","49.3"],"title":["44.0"],"children":["44.2"],"components":["45.0","85.4"],"属性中增加组件本身":["45.0"],"实现组件的递归调用":["45.0"],"可以表示组件的具体名称":["45.0"],"trim":["46.0"],"事件修饰符":["46.0"],"stop":["46.0"],"中异步组件的作用和原理":["47.0"],"允许你以一个工厂函数的方式定义你的组件":["47.1"],"写法":["47.2"],"异步组件原理":["47.3"],"nexttick":["48.0"],"中视图更新是异步的":["48.1"],"使用":["48.1"],"alive":["49.0","49.1"],"在路由器中使用keep":["49.2"],"val":["49.3"],"prunecache":["49.3"],"matches":["49.3"],"render":["49.3"],"slots":["49.3"],"每次进入路由的时候":["49.4"],"都会执行":["49.4"],"除了内置指令之外":["50.1"],"inserted":["50.2"],"被绑定元素插入父节点时调用":["50.2"],"仅保证父节点存在":["50.2"],"但不一定已被插入文档中":["50.2"],"drop":["50.3"],"可视化拖拽编辑器":["50.3"],"点击事件处理":["50.3"],"click":["50.3","74.5","75.4","75.6","75.7","77.11","77.12","78.5"],"outside":["50.3"],"createelement":["51.0"],"发布订阅模式":["51.0"],"订阅者把自己想订阅的事件注册到调度中心":["51.0"],"当该事件触发的时候":["51.0"],"发布者发布该事件到调度中心":["51.0"],"缓存值的结果":["52.0"],"不频繁取值":["52.0"],"合理设置":["52.0"],"进行代码分割":["53.0"],"组件加载采用按需加载的方式":["53.0"],"静态资源缓存":["53.0"],"http":["53.0"],"缓存":["53.0"],"服务端和服务端之间进行通信是没有跨域问题的":["54.0"],"跨域的实现方案有很多种":["54.0"],"不过一般常用的就那么几中":["54.0"],"cors":["54.0"],"主要是封装哪方面的":["55.0"],"设置请求超时时间":["55.0"],"根据项目环境设置请求路径":["55.0"],"要做权限管理该怎么做":["56.0"],"每次发送请求时会携带":["56.1"],"后端会对":["56.1"],"进行验证":["56.1"],"守卫":["57.0"],"在重用的组件里调用":["57.0"],"beforerouteupdate":["57.0"],"abstract":["58.0"],"模式是在不支持浏览器":["58.0"],"api":["58.0","75.20"],"环境使用":["58.0"],"项目本地开发完后部署到服务器后报":["59.0"],"vuex":["60.0","60.2"],"是一个专门为":["60.2"],"commit":["60.3"],"mutation":["60.3","64.0"],"只有一份":["60.4"],"复杂的数据需要依赖于模块":["60.4"],"vuex3":["60.5"],"核心就是通过":["60.5"],"中数据的变化":["61.0"],"通过":["61.0"],"每次获取数据前检测":["62.0"],"数据是否存在":["62.0"],"可以获取数据后将结果提交给":["63.0"],"中则是修改":["63.0"],"允许我们将":["64.0"],"分割成模块":["64.0"],"每个模块拥有自己的":["64.0"],"等属性":["65.0"],"用户编写复杂业务逻辑会出现反复横跳的问题":["65.0"],"中所有的属性都是通过":["65.0"],"中的模块之间耦合度低":["66.0"],"模块可以独立使用":["66.0"],"拆分模块":["66.0"],"中很多方法挂遭到了实例中导致没有使用也会被打包":["66.0"],"还有很多组件也是一样":["66.0"],"通过构建工具":["66.0"],"tree":["66.0"],"shaking":["66.0"],"项目中的错误如何处理的":["67.0"],"如果全局的":["67.1"],"config":["67.1","67.2"],"errorhandler":["67.1","67.2"],"res":["67.3"],"中模板编译优化":["68.0"],"cache":["68.1"],"setup":["68.1","87.2"],"data":["68.1","73.16"],"生成的虚拟":["68.1"],"树层级的":["68.2"],"树的结构可能会发生变化":["68.3"],"不稳定结构有哪些呢":["68.3"],"createelementvnode":["68.4"],"openblock":["68.4","68.5"],"createelementblock":["68.4","68.5"],"createcommentvnode":["68.4"],"fragment":["68.5"],"远远不限于":["69.1"],"ecma":["69.1"],"的对象和方法":["69.5"],"domlevel2":["69.5"],"新增了以下模块":["69.5"],"视图":["69.5"],"描述追踪文档不同视图":["69.5"],"如应用":["69.5"],"不过人们通常会把任何特定于浏览器的扩展都归在":["69.6"],"的范畴内":["69.6"],"比如":["69.6"],"弹出新浏览器窗口的能力":["69.6"],"设置凭据标志":["70.1"],"意味着出站请求会包含凭据":["70.1"],"defer":["70.1"],"表示脚本可以延迟到文档完全被解析和显示之后再执行":["70.1"],"ie7":["70.1"],"及更早版本中":["70.1"],"对行内脚本也可以指定这个属性":["70.1"],"integrity":["70.1"],"允许比对接收到的资源和指定的加密签名已验证子资源完整性":["70.1"],"sri":["70.1"],"subresource":["70.1"],"加入以下内容":["72.0"],"将其插槽内容渲染到另一个dom":["73.1"],"成为该dom的一部分":["73.1"],"的子元素":["73.2"],"将内容渲染到":["73.3"],"使它只接收":["73.5"],"primary":["73.5"],"ghost":["73.5"],"你应该确保参数被正确传递":["73.12"],"事件被正常触发和插槽内容正常渲染":["73.12"],"让我们开始吧":["73.12","73.15"],"default":["73.13"],"on":["74.1","74.2"],"mouse":["74.9","74.10"],"position":["74.9","74.10"],"update":["75.6","75.7"],"调整回调函数的刷新时机":["75.14"],"参考回调的刷新时机及":["75.14"],"watcheffect":["75.14"],"默认情况下":["75.14"],"用户创建的侦听器回调":["75.14"],"ref":["75.18","87.5"],"依赖注入":["75.20"],"track":["75.29"],"trigger":["75.29"],"中使用":["76.3"],"单文件组件设置全局css样式":["76.5"],"该怎么设置呢":["76.5"],"转化为全局作用域":["76.7"],"local":["76.7"],"以便只渲染一次元素和组件":["77.4"],"并且跳过以后的更新":["77.4"],"组件及其所有子项将被当作静态内容并跳过渲染":["77.6"],"这可以用来优化更新时的性能":["77.6"],"debounce":["77.11","77.12"],"item":["77.14","77.15"],"index":["77.14","77.15","85.4"],"list":["77.14","77.15"],"指令":["77.16"],"click2":["78.2"],"enter":["78.4"],"时调用":["78.4"],"vm":["78.4"],"submit":["78.4"],"keyup":["78.4"],"onclick1":["78.5"],"xx":["81.1"],"raw":["81.1","85.2"],"来完成它":["81.1"],"根据一个":["81.3"],"until":["82.1"],"pinia":["84.1","84.5","84.7"],"createpinia":["84.2"],"definestore":["84.3","84.5","84.7","84.9","84.10"],"json":["84.4"],"stringify":["84.4"],"parse":["84.4"],"setitem":["84.6"],"statetree":["84.8"],"deserialize":["84.8"],"这可用于在恢复数据之前强制地执行特定的操作":["84.9"],"这可用于在恢复数据之后强制地执行特定的操作":["84.10"],"当设置为":["84.11"],"vite":["85.1"],"plugin":["85.1"],"svg":["85.1"],"pics":["85.2"],"master":["85.2"],"images":["85.2"],"20240204101235373":["85.2"],"png":["85.2"],"alt":["85.2"],"svgicon":["85.4"],"中引入":["85.5"],"数据":["87.1"],"计算属性等":["87.1"],"可直接在模板中使用":["87.3"],"中访问":["87.3"],"函数会在":["87.3"],"beforecreate":["87.3"],"之前调用":["87.3"],"初始值":["87.4"],"返回值":["87.4"],"一个":["87.4"],"refimpl":["87.4"],"的实例对象":["87.4"],"简称":["87.4"],"基本类型不要用它":["87.5"],"要用":["87.5"],"其实":["87.6"],"可以使用":["87.7"],"volar":["87.7"],"插件自动添加":["87.7"],"gitee":["87.7"],"com":["87.7"],"xuchp":["87.7"],"但":["87.8"],"可以批量转换":["87.8"]},{"0":["5.3","5.31","5.40","11.91","13.73","13.79","13.82","13.83","71.73","71.79","71.82","71.83"],"1":["0.11","5.24","5.35","11.15","11.25","11.38","11.64","13.27","13.33","13.65","13.67","13.74","13.75","27.0","71.27","71.33","71.65","71.67","71.74","71.75","75.4","75.6","75.7"],"2":["0.14","5.12","5.21","5.22","5.24","7.8","11.2","13.22","13.24","14.1","69.5","71.22","71.24","78.2"],"3":["0.22","4.5","4.24","5.3","5.5","5.6","5.11","5.16","5.23","5.25","5.36","5.41","11.29","13.24","13.63","13.84","13.90","14.1","22.0","69.5","71.24","71.63","71.84","71.90"],"4":["5.60","11.50","13.60","13.79","14.1","71.60","71.79"],"5":["5.30","13.20","13.82","14.1","71.20","71.82"],"6":["13.43","13.82","70.1","71.43","71.82"],"7":["13.83","71.83"],"8":["7.8"],"9":["11.19"],"10":["11.27","11.46","13.34","71.34"],"12":["4.3"],"13":["4.3"],"14":["87.3"],"15":["11.27","87.3"],"18":["11.36","13.65","71.65"],"23":["87.3"],"25":["13.66","71.66"],"26":["13.16","71.16"],"30":["87.3"],"32":["13.70","71.70"],"33":["85.2"],"87":["87.7"],"123":["5.14"],"200":["77.11","77.12"],"857":["5.33"],"1000":["0.4","5.33"],"1001":["5.33"],"1234":["13.34","71.34"],"1920":["0.22"],"2024":["87.3"],"content":["0.1","0.6","70.1"],"是每一行文字的高":["0.2"],"子元素":["0.3"],"ul":["0.3"],"li":["0.3","5.39"],"子元素选择器":["0.3"],"权重值":["0.4"],"第二":["0.4"],"html":["0.5","5.1","15.3","77.6"],"flex":["0.6"],"justify":["0.6"],"center":["0.6","11.92"],"align":["0.6"],"items":["0.6"],"元素前后没有换行符":["0.7"],"行内块元素":["0.7"],"的原则":["0.8"],"一个元素具有":["0.8"],"那么内部元素再怎么弄":["0.8"],"都不会影响到外面的元素":["0.8"],"div":["0.9","44.2"],"clear":["0.9"],"both":["0.9"],"ui":["0.10","0.22"],"给前端设计图一般都是偶数":["0.10"],"和":["0.11","4.24","5.50","11.80","51.0","52.0"],"的区别":["0.11","5.47"],"c":["0.12"],"normalize":["0.13"],"为了增强跨浏览器渲染的一致性":["0.13"],"优缺点":["0.14"],"占用位置区别":["0.15"],"是不占位置的":["0.15"],"虽然隐藏了":["0.15"],"但是占用位置":["0.15"],"表示完全透明":["0.16"],"表示不透明":["0.16"],"两个冒号":["0.17"],"是伪元素":["0.17"],"是为了做区分":["0.17"],"16px":["0.18"],"每个浏览器默认字体大小不一定一样":["0.18"],"是针对于父元素的":["0.19"],"input":["0.20","3.1","10.1","50.3"],"height":["0.21","11.65","11.140"],"min":["0.21"],"会使用自适应的布局方式":["0.22"],"的设计图":["0.22"],"笔记本电脑":["0.22"],"h6":["2.1"],"空元素":["2.1"],"br":["2.1"],"hr":["2.1"],"元素之间的转换问题":["2.1"],"所以在兼容性上":["2.2"],"场景":["2.3"],"网站的":["2.3"],"logo":["2.3"],"都是用":["2.3"],"标签包裹的":["2.3"],"图片无法加载时显示的值":["2.4"],"区别二":["2.4"],"在":["2.4","7.3","13.12","71.12"],"采用压缩算法":["2.5"],"有一点失真":["2.5"],"成分会更好":["2.6"],"蜘蛛抓取更好":["2.6"],"webkit":["3.2"],"tap":["3.2"],"touch":["3.4"],"none":["3.5","11.84"],"text":["3.6","50.3","77.1","77.2"],"textarea":["3.6"],"array":["4.1"],"regexp":["4.1","4.6"],"date":["4.1","87.3"],"call":["4.2","5.45"],"同上结果":["4.2"],"加上call也ok":["4.2"],"string":["4.2","7.11","11.22","11.23","11.40","11.128","13.28","13.44","71.28","71.44"],"的隐式转换规则":["4.3"],"如果类型相同":["4.3"],"无需进行转换":["4.3"],"如果一个操作值是":["4.3"],"或者":["4.3","17.1"],"那么另一个操作符必须是":["4.3"],"才会返回":["4.3"],"否则都返回":["4.3"],"如果其中有一个是":["4.3"],"类型":["4.3","11.23","11.137"],"那么返回":["4.3"],"两个操作值如果都为":["4.3"],"那么就会将字符串转换为":["4.3"],"它不会拷贝对象的继承属性":["4.5"],"它不会拷贝对象的不可枚举属性":["4.5"],"可以拷贝":["4.5"],"symbol":["4.5","68.1"],"类型的属性":["4.5"],"obj1":["4.5"],"sym":["4.5"],"defineproperty":["4.5","13.46","19.3","28.0","71.46"],"innumerable":["4.5"],"value":["4.5","38.0","43.0","84.6"],"不可枚举属性":["4.5"],"reflect":["4.6"],"ownkeys":["4.6"],"方法":["4.6","34.1","84.8"],"当参数是":["4.6"],"则直接生成一个新的实例返回":["4.6"],"利用":["4.6"],"的":["4.6","11.45"],"getownpropertydescriptors":["4.6"],"方法可以获得对象的所有属性":["4.6"],"以及对应的特性":["4.6"],"顺便结合":["4.6"],"create":["4.6","4.8","4.9"],"方法创建一个新对象":["4.6"],"并继承传入源对象的原型链":["4.6"],"weakmap":["4.6"],"类型作为":["4.6"],"hash":["4.6"],"表":["4.6"],"因为":["4.6","5.49","13.32","71.32"],"是弱引用类型":["4.6"],"可以有效防止内存泄漏":["4.6"],"作为检测循环引用很有帮助":["4.6"],"如果存在循环":["4.6"],"则引用直接返回":["4.6"],"存储的值":["4.6"],"const":["4.6","11.16","11.53","64.0","84.5","84.7","84.9","84.10"],"iscomplexdatatype":["4.6"],"提升开发效率":["4.7"],"20240117094228124":["4.8"],"四":["4.8"],"原型式继承":["4.8"],"一是用作新对象原型的对象":["4.8"],"二是为新对象定义额外属性的对象":["4.8"],"可选参数":["4.8"],"parent4":["4.8"],"friends":["4.8"],"p1":["4.8"],"p2":["4.8","11.27"],"p3":["4.8"],"person4":["4.8"],"object":["4.8","4.9","5.2","19.1","22.0"],"tom":["4.8"],"jerry":["4.8"],"person5":["4.8"],"lucy":["4.8"],"obj":["4.9"],"proto":["4.9","5.41"],"res":["4.9"],"isobject":["4.9"],"这样的组合就是闭包":["4.11"],"也就是说":["4.11"],"如果没找到":["4.12"],"workers":["4.13"],"或者任何异步中":["4.13"],"只要使用了回调函数":["4.13"],"javascript":["4.14","70.1"],"值或对象":["4.14"],"第一个参数是需要解析处理的":["4.14"],"次方":["4.16"],"最大为":["4.16"],"math":["4.16"],"pow":["4.16"],"否则将抛出":["4.16"],"rangeerror":["4.16"],"of":["4.16","10.0","13.47","71.47"],"用于将参数依次转化为数组中的一项":["4.16"],"然后返回这个新数组":["4.16"],"用来判断一个变量是否为数组类型":["4.17"],"slice":["4.18"],"tostring":["4.18"],"tolocalstring":["4.18"],"indexof":["4.18"],"lastindexof":["4.18"],"next":["4.19","11.7","49.4"],"扩展运算符实现":["4.19"],"while":["4.19","13.7","71.7"],"以及":["4.21"],"选择排序":["4.23"],"选择排序是一种简单直观的排序方法":["4.23"],"首先将最小的元素存放在序列的起始位置":["4.23"],"再从剩余未排序元素中继续寻找最小元素":["4.23"],"然后放到已排序的序列后面":["4.23"],"以此类推":["4.23"],"直到所有元素均排序完毕":["4.23"],"selectsort":["4.23"],"minindex":["4.23"],"的相对位置不变":["4.24"],"等":["5.1"],"全部解析完成":["5.1"],"引用类型":["5.2","5.11"],"字符串和其他类型相加":["5.2"],"会被隐式转化成":["5.3"],"很不容易发现错误":["5.3"],"现有":["5.3"],"通过":["5.4"],"valueof":["5.4"],"请求":["5.5"],"定时器":["5.5"],"事件":["5.5","17.0","69.5"],"优先查找内部":["5.6"],"如果内部没有就查找外部的":["5.6"],"注意声明变量是用":["5.6"],"注意":["5.7","13.32","71.32"],"log":["5.8","5.17","5.18","5.58","11.27","11.28","11.32","11.37","11.44","13.20","13.25","13.45","71.20","71.25","71.45"],"undefined":["5.8","5.57","13.86","71.86"],"b":["5.9","5.60"],"对象注意":["5.11"],"world":["5.13"],"console":["5.13","5.18","5.23","5.25","5.58","11.27","11.28","11.31","11.32","11.37","11.44","11.55","13.20","13.25","13.45","71.20","71.25","71.45"],"原型考题":["5.15"],"var":["5.16","5.57","35.1"],"this":["5.17","11.39","36.0"],"test2":["5.19"],"t":["5.27"],"newarr":["5.31","5.32"],"for":["5.31","5.32","5.39","10.3","13.47","39.2","71.47"],"i":["5.31","5.32","5.40","11.44","30.0"],"function":["5.33","11.31","11.32","11.55","38.0","68.4","68.5","75.25"],"return":["5.34","13.7","22.0","68.4","71.7"],"else":["5.35"],"max":["5.35"],"闭包":["5.38"],"getelementsbytagname":["5.39"],"对象查找属性或者方法的顺序":["5.41"],"super":["5.43","11.39"],"name":["5.44","5.46","11.23","11.37","13.18","71.18","73.13","87.8"],"张三":["5.44","5.46","11.46"],"prototype":["5.44","22.0"],"语法":["5.48","69.3","87.5"],"函数":["5.48","11.24","26.0"],"返回的是一个函数":["5.49"],"bind":["5.50","5.64"],"btn":["5.50"],"h1s":["5.50"],"大的数组则使用":["5.51"],"之前的版本是":["5.51"],"插入排序和快排":["5.51"],"是复制真正的值":["5.52"],"不同引用":["5.52"],"只在设置的":["5.53"],"过期时间之前有效":["5.53"],"即时窗口或者浏览器关闭":["5.53"],"也不会失效":["5.53"],"let":["5.54","11.19","11.49","13.19","14.1","67.3","71.19","87.5"],"fontsize":["5.54"],"可以多次声明同一个变量":["5.55"],"str":["5.57","11.38"],"a":["5.62","11.19","11.28","11.44","11.53","68.2","78.5"],"箭头函数的":["5.64"],"进行中":["5.65"],"返回的是数组":["5.66"],"如果有一项匹配":["5.67"],"beforeupdate":["7.2"],"updated":["7.2","31.2"],"beforedestroy":["7.2","31.2"],"destoryed":["7.2"],"调用的时候":["7.3"],"阶段是拿不到":["7.3"],"是在异步中获取的":["7.4"],"就可以了":["7.4"],"例如":["7.4","11.17","11.20","11.48","11.50","11.87","11.100","11.106","42.2"],"beforecreated":["7.5"],"alive":["7.6"],"只会执行一个生命周期":["7.6"],"created":["7.7"],"beforemount":["7.7"],"个生命周期":["7.8"],"系统":["7.8"],"同步可以获取":["7.9"],"dom":["7.9","23.1","48.1","68.1"],"如果子组件请求后父组件请求":["7.9"],"来接收":["7.11"],"type":["7.11","11.99","50.3","68.1"],"default":["7.11","11.55"],"双向绑定":["7.12"],"vue2":["7.13"],"中":["7.13","11.52","33.0"],"setimmediate":["7.15"],"mutationobserver":["7.15"],"宏任务":["7.15"],"the":["10.0"],"md":["10.1"],"js":["10.1","13.4","13.5","13.13","13.18","13.26","13.39","13.80","16.1","43.0","60.2","64.0","67.2","71.4","71.5","71.13","71.18","71.26","71.39","71.80"],"dangerous":["10.2"],"details":["10.2"],"com":["11.2"],"consumer":["11.2"],"cn":["11.2","11.80"],"解压之后双击":["11.2"],"package":["11.3","13.10","71.10"],"manager":["11.3"],"是鸿蒙生态第三方库的包管理工具":["11.3"],"支持共享包的发布":["11.3"],"安装和依赖管理":["11.3"],"为":["11.3"],"harmonyos":["11.3"],"sdk":["11.3"],"配置项目":["11.4"],"可能需要调整的配置项如下":["11.4"],"其余保持默认即可":["11.4"],"配置完成后":["11.4"],"deveco":["11.5"],"预览用于查看应用的ui界面效果":["11.6"],"方便随时调整界面ui布局":["11.6"],"选择模拟的安装目录":["11.7"],"完成后点击":["11.7"],"new":["11.7","37.0","60.5"],"emulator":["11.7"],"选择设备类型":["11.7"],"phone":["11.7","11.80"],"开启usb调试":["11.8"],"系统与更新":["11.8"],"开发人员选项":["11.8"],"打开":["11.8"],"usb调试":["11.8"],"开关":["11.8","11.103"],"使用usb数据线将手机和电脑相连":["11.8"],"简称ts":["11.9"],"扩展而来":["11.9"],"快速入门":["11.10"],"运行环境说明":["11.11"],"playground":["11.12"],"供练习使用":["11.12"],"安装ts":["11.13"],"node":["11.13"],"node是一个":["11.13"],"typescript":["11.13","11.52","84.8","85.2","85.5"],"它允许我们直接运行":["11.13"],"代码":["11.13"],"node的安装和运行依赖于node":["11.13"],"声明":["11.14"],"而":["11.16"],"便可以根据初始值进行类型推断":["11.17"],"此时我们就可以不显式指定其类型":["11.17"],"常用数据类型":["11.18"],"你好":["11.20"],"可选值为":["11.21"],"true":["11.21","13.21","13.45","68.1","71.21","71.45","84.11"],"表示字符串数组":["11.22"],"数组类型的变量可由数组字面量":["11.22"],"对象类型的声明需要包含所有属性的":["11.23"],"名称":["11.23","11.93"],"及":["11.23"],"zhagnsan":["11.27"],"男":["11.27","11.46"],"lisi":["11.27"],"则可以使用":["11.30"],"void":["11.30","11.44","11.45","84.6"],"test":["11.31","13.2","71.2"],"foreach":["11.32"],"类":["11.33"],"是一种编程范式":["11.34"],"其核心理念在于将程序中的数据与操作数据的方法有机地组织成对象":["11.34"],"从而使程序结构更加模块化和易于理解":["11.34"],"通过对象之间的协同合作":["11.34"],"constructor":["11.36","11.40","36.0"],"对象属性的访问":["11.37"],"number":["11.38","13.44","71.44"],"utils":["11.38"],"tolowercase":["11.38"],"public":["11.40"],"age":["11.40","13.16","13.17","13.25","71.16","71.17","71.25"],"接口":["11.41","11.42"],"implements":["11.43"],"关键字":["11.43"],"实现类中":["11.43"],"需要包含接口属性的赋值逻辑":["11.43"],"以及接口方法的实现逻辑":["11.43"],"class":["11.43","13.7","71.7","87.8"],"student":["11.43","11.44"],"introduce":["11.44"],"hello":["11.44","11.55","76.2"],"am":["11.44"],"然后分别创建一个":["11.44"],"然后在订单类中增加一个":["11.45"],"的属性":["11.45"],"并且在订单类中的":["11.45"],"方法中调用":["11.45"],"可以看到变量的值为一个一般对象":["11.46"],"枚举":["11.47"],"其主要功能是定义一组有限的选项":["11.48"],"方向":["11.48"],"使用场景":["11.49"],"现需要编写一个函数":["11.49"],"move":["11.49"],"其功能是根据输入的方向":["11.49"],"上":["11.49"],"下":["11.49"],"左":["11.49"],"我们还能手动为每个属性赋值":["11.50"],"enum":["11.50"],"模块化":["11.51"],"默认情况下":["11.52"],"module":["11.53","72.0"],"有多种方式可以用来解决命名冲突":["11.54"],"下面逐一介绍":["11.54"],"导入重命名":["11.54"],"语法如下":["11.54"],"export":["11.55","68.4","68.5","84.3","84.5","84.9","84.10"],"关灯":["11.58","11.60"],"状态":["11.58"],"所以我们可以使用一个":["11.58"],"boolean":["11.58","11.107","13.24","42.3","71.24"],"描述界面显示效果":["11.59"],"开灯":["11.60"],"的图片":["11.60"],"否则就会显示":["11.60"],"下面为大家总结一下声明式ui的核心思想":["11.61"],"声明式描述":["11.61"],"都是由众多组件组合而成的":["11.62"],"所以编写界面其实就是组合组件的过程":["11.62"],"入门案例":["11.63"],"image":["11.65"],"images":["11.65","87.7"],"img":["11.65","11.70","11.76","11.96","11.103","11.106","11.130","11.133","11.139"],"png":["11.65"],"语法说明":["11.66","11.74"],"各组件支持的参数":["11.67"],"可查看":["11.67"],"api":["11.67","29.0","66.0"],"文档":["11.67"],"查看方式如下":["11.67"],"首先将鼠标在相应组件悬停":["11.67"],"点击":["11.67"],"show":["11.67","50.3","52.0"],"in":["11.67","22.0","30.0"],"自定义组件":["11.68"],"除去系统预置的组件外":["11.68"],"compnent":["11.69"],"装饰器":["11.69"],"component":["11.69","85.4"],"装饰器用于装饰":["11.69"],"关键字声明的数据结构":["11.69"],"所以可考虑自定义一个按钮组件":["11.70"],"然后进行复用":["11.70"],"以及以下的播放":["11.73"],"暂停案例":["11.73"],"均可使用条件渲染实现":["11.73"],"条件渲染的语法如下":["11.74"],"语句基于一个数组来快速渲染一个组件列表":["11.76"],"例如以下案例中的选项列表就可通过循环渲染实现":["11.76"],"key生成函数":["11.77"],"数组中的每个数据项生成唯一的key":["11.77"],"key的作用":["11.77"],"在数组发生变化":["11.77"],"修改数组元素或者向数组增加或删除元素":["11.77"],"时":["11.77","84.11"],"需要重新渲染组件列表":["11.77"],"在重新渲染时":["11.77"],"它会尽量复用原来的组件对象":["11.77"],"而不是为每个元素都重新创建组件对象":["11.77"],"key的作用就是辅助":["11.77"],"完成组件对象的复用":["11.77"],"具体逻辑如下":["11.77"],"在进行初次渲染时":["11.77"],"会使用keygenerator为数组中的每个元素生成一个唯一的key":["11.77"],"并将key作为组件对象的标识":["11.77"],"当数组发生变化导致":["11.77"],"概述":["11.79","11.86","11.95","11.109","11.120","11.127"],"可存在多种版本":["11.80"],"用于适配不同的环境":["11.80"],"例如语言环境":["11.80"],"zh":["11.80"],"cn和en":["11.80"],"us":["11.80"],"系统主题":["11.80"],"dark和light":["11.80"],"设备类型":["11.80"],"tablet":["11.80"],"等等":["11.80"],"我们可以为上述每种环境各自准备一套资源文件":["11.80"],"每种环境对应":["11.80"],"下的一个目录":["11.80"],"例如上述的":["11.80"],"en":["11.80"],"我们在使用resources下的资源时":["11.80"],"无需指定具体的环境版本":["11.80"],"系统会根据设备所处的环境自动选择匹配的版本":["11.80"],"例如当设备系统语言为中文时":["11.80"],"常用属性":["11.81","11.88","11.97","11.104","11.111","11.122"],"这种方式的弊端是":["11.82"],"在不同像素密度的屏幕上":["11.82"],"相同的像素个数对应的物理尺寸是不同的":["11.82"],"这样一来就会导致我们的应用在不同设备上显示的尺寸可能不同":["11.82"],"如下图所示":["11.82"],"virtual":["11.82"],"为了保证一致的观感":["11.82"],"我们可以使用虚拟像素作为单位":["11.82"],"虚拟像素是一种可根据屏幕像素密度灵活缩放的单位":["11.82"],"1vp相当于像素密度为160ppi的屏幕上的1px":["11.82"],"harmonyos会根据如下公式将虚拟像素换算为对应的物理像素":["11.82"],"根据上述公式":["11.82"],"不难看出":["11.82"],"使用虚拟像素作为单位时":["11.82"],"同一尺寸":["11.82"],"在像素密度低的屏幕上":["11.82"],"contain":["11.83"],"保持宽高比进行缩小或者放大":["11.83"],"使得显示区域刚好包含整个图片":["11.83"],"cover":["11.83"],"使得图片刚好完全覆盖显示区域":["11.83"],"描述":["11.84","11.93"],"不使用图片插值":["11.84"],"high":["11.84"],"base":["11.87"],"目录中有一个":["11.87"],"json":["11.87","68.1"],"px":["11.89"],"fp":["11.89"],"其中":["11.89","13.12","71.12"],"font":["11.89"],"pixel":["11.89"],"与":["11.89"],"可选枚举值如下":["11.90"],"名称描述":["11.90"],"lighter":["11.90"],"字体较细":["11.90"],"normal":["11.90","11.99"],"字体粗细正常":["11.90"],"类型的参数可用于设置":["11.91"],"rgb":["11.91"],"格式的颜色":["11.91"],"具体写法可以为":["11.91"],"start":["11.92"],"首部对齐":["11.92"],"居中对齐":["11.92"],"为枚举类型":["11.93"],"可用枚举值有":["11.93"],"clip":["11.93"],"为按钮形状":["11.96"],"该属性的类型":["11.96"],"可选的枚举值有":["11.96","11.112"],"名称描述效果":["11.96","11.103","11.121"],"capsule":["11.96"],"胶囊形状":["11.96"],"backgroundcolor":["11.98"],"方法进行设置":["11.98"],"圆角按钮":["11.99"],"buttontype":["11.99"],"arkts":["11.100","11.107"],"button":["11.100"],"点击事件":["11.100"],"toggle":["11.102"],"枚举类型进行设置":["11.103","11.121"],"可选的枚举值如下":["11.103","11.121"],"switch":["11.103"],"可使用":["11.105"],"selectedcolor":["11.105"],"相关案例见":["11.106","11.115","11.130","11.133","11.139"],"具体定义如下":["11.107"],"callback":["11.107"],"ison":["11.107"],"属性用于设置无输入时的提示文本":["11.110"],"效果如下":["11.110","11.123"],"inputtype":["11.112"],"枚举类型":["11.112"],"光标样式":["11.113"],"placeholdercolor":["11.114"],"方法设置":["11.114"],"placeholder":["11.114"],"fontcolor":["11.115"],"等通用属性方法进行设置":["11.115"],"常用事件":["11.116"],"onchange":["11.117"],"方法为":["11.117","11.118"],"textinput":["11.117"],"开发者可使用":["11.118"],"onfocus":["11.118"],"onblur":["11.118"],"属性用于设置进度条类型":["11.121"],"可通过":["11.121"],"linear":["11.121","11.123"],"默认值为":["11.123"],"4vp":["11.123"],"该属性可用于":["11.123"],"ring":["11.123"],"scalering":["11.123"],"三种类型":["11.123"],"用于设置前景色":["11.124"],"用于设置背景色":["11.124"],"常用于显示一些重要的信息":["11.125"],"消息提示":["11.126"],"toast":["11.127"],"方法的参数定义如下":["11.128"],"options":["11.128","68.4"],"message":["11.128"],"警告对话框":["11.129"],"具体效果如下":["11.130","11.133"],"使用说明":["11.131","11.134"],"操作列表弹框":["11.132"],"选择器弹窗":["11.135"],"文本滑动选择器弹窗":["11.136"],"文档地址":["11.137"],"自定义弹窗":["11.138"],"demos":["11.139"],"和变量":["13.2","71.2"],"或美元符号":["13.3","71.3"],"剩下的其他字符可以是":["13.3","71.3"],"如":["13.4","13.65","70.1","71.4","71.65"],"use":["13.5","71.5"],"strict":["13.5","71.5"],"虽然看起来像个没有赋值给任何变量的字符串":["13.5","71.5"],"extends":["13.7","71.7"],"这些关键字有特殊用途":["13.8","71.8"],"即标识符":["13.13","71.13"],"不过":["13.14","71.14"],"在函数内定义变量时省去":["13.14","71.14"],"操作符":["13.14","71.14"],"可以创建一个全局变量":["13.14","71.14"],"没有":["13.14","37.0","71.14"],"会被挂载到":["13.14","71.14"],"运行时把它看成等价于如下代码":["13.15","71.15"],"matt":["13.17","71.17"],"不会被提升":["13.17","71.17"],"声明的变量则会":["13.18","71.18"],"settimeout":["13.20","71.20"],"声明的作用域也是块":["13.21","71.21"],"if":["13.21","13.26","23.3","49.3","50.3","52.0","68.2","71.21","71.26","73.16"],"null":["13.23","71.23"],"表示值为布尔值":["13.24","71.24"],"uncaught":["13.25","71.25"],"只要检查这个变量的值是不是":["13.26","71.26"],"就可以知道这个变量是否在后面被重新赋予了一个对象的引用":["13.26","71.26"],"比如":["13.26","13.47","71.26","71.47"],"car":["13.26","71.26"],"不等于":["13.27","71.27"],"非空字符串":["13.28","71.28"],"空字符串":["13.28","71.28"],"ieee":["13.29","71.29"],"就回忽略前缀的":["13.30","71.30"],"后面的数字被当做十进制":["13.30","71.30"],"的情况下":["13.31","71.31"],"就会变成整数":["13.31","71.31"],"floatnum1":["13.31","71.31"],"小数点后面没有数字":["13.31","71.31"],"当成整数":["13.31","71.31"],"负无穷大":["13.32","71.32"],"表示":["13.32","13.87","71.32","71.87"],"任何无法表示的正数以":["13.32","71.32"],"一旦得到":["13.32","71.32"],"就不能再进一步用于任何计算":["13.32","71.32"],"独特属性":["13.33","71.33"],"任何涉及":["13.33","71.33"],"的操作始终返回":["13.33","71.33"],"在连续多步计算时这可能是个问题":["13.33","71.33"],"则继续依次检测每一个字符":["13.34","71.34"],"直到字符串末尾":["13.34","71.34"],"或碰到非数值字符":["13.34","71.34"],"假设字符串中第一个字符是数值字符":["13.34","71.34"],"函数也能识别不同的整数格式":["13.34","71.34"],"十进制":["13.34","71.34"],"八进制":["13.34","71.34"],"十六进制":["13.34","71.34"],"换句话说":["13.34","71.34"],"如果字符串以":["13.34","71.34"],"0x":["13.34","71.34"],"开头":["13.34","71.34"],"就会被解释为十六进制":["13.34","71.34"],"且紧跟着数值字符":["13.34","71.34"],"在非严格模式下会被某些实现解释为八进制":["13.34","71.34"],"1234blue":["13.34","71.34"],"0xa":["13.34","71.34"],"解释为十六进制":["13.34","71.34"],"位":["13.35","71.35"],"unicode":["13.35","71.35"],"要修改某个变量中的字符串值":["13.37","71.37"],"数值调用":["13.38","71.38"],"可以夸行定义字符串":["13.39","71.39"],"模板字面量在定义时立即求值并转换为字符串实例":["13.40","71.40"],"任何插入的变量也会从它们最接近的作用域中取值":["13.40","71.40"],"字符串插值通过在":["13.40","71.40"],"中使用一个":["13.40","71.40"],"会接收被插值记号分隔后的模板和对每个表达式求值的结果":["13.41","71.41"],"标签函数本身是一个常规函数":["13.41","71.41"],"而不是被转":["13.42","71.42"],"换后的字符表示":["13.42","71.42"],"或":["13.44","71.44","87.4"],"那样":["13.44","71.44"],"它们都支持构造函数且可用于初始化包含原":["13.44","71.44"],"始值的包装对象":["13.44","71.44"],"全局注册表中的符号必须使用字符串键来创建":["13.45","71.45"],"因此作为参数传给":["13.45","71.45"],"我们知道":["13.47","71.47"],"循环会在相关对象上使用":["13.47","71.47"],"ispropertyof":["13.60","71.60"],"用于判断当前对象是否为另一个对象的原型":["13.60","71.60"],"propertyisenumerable":["13.60","71.60"],"一元操作符是":["13.62","71.62"],"nan":["13.63","13.86","71.63","71.86"],"变量类型从字符串变为数值":["13.63","71.63"],"对于布尔值":["13.63","71.63"],"如果是":["13.63","13.77","13.78","71.63","71.77","71.78"],"false":["13.63","71.63"],"则转换成":["13.63","71.63"],"放在变量前头":["13.64","71.64"],"对数值没有任何影响":["13.64","71.64"],"个步骤计算":["13.65","71.65"],"得到":["13.65","71.65"],"确定绝对值的二进制表示":["13.65","71.65"],"对于":["13.65","71.65"],"二进制00000000000000000000000000011001":["13.66","71.66"],"第二个数值的位":["13.67","71.67"],"结果":["13.67","71.67"],"按位异或":["13.68","71.68"],"对于负数":["13.71","71.71"],"有时候差异会非常大":["13.71","71.71"],"与有符号右移不同":["13.71","71.71"],"如果操作数是非空字符串":["13.73","71.73"],"如果操作数是数值":["13.73","71.73"],"则逻辑与并不一定会返回布尔值":["13.74","71.74"],"而是遵循如下规则":["13.74","71.74"],"如果第一个操作数是对象":["13.74","13.75","71.74","71.75"],"则返回第二个操作数":["13.74","71.74"],"如果第二个操作数是对象":["13.74","71.74"],"则只有第一个操作数求值为":["13.74","71.74"],"那么逻辑或操作符也不一定返回布尔值":["13.75","71.75"],"它遵循如":["13.75","71.75"],"下规则":["13.75","71.75"],"则返回第一个操作数":["13.75","71.75"],"个乘性操作符":["13.76","71.76"],"乘以":["13.77","71.77"],"除以":["13.78","71.78"],"如果被除数是":["13.79","71.79"],"指数操作符也有自己的指数赋值操作符":["13.80","71.80"],"该操作符执行指数运算和结果的赋值操作":["13.80","71.80"],"如果有任一操作数是数值":["13.84","71.84"],"则将另一个操作数转换为数值":["13.84","71.84"],"执行数值比较":["13.84","71.84"],"它们在比较之前不执行转换":["13.85","71.85"],"相等":["13.86","71.86"],"不能转换为其他类型的值在进行比较":["13.86","71.86"],"如果有任一操作数是":["13.86","71.86"],"则相等操作符返回":["13.86","71.86"],"不相等操作符返回":["13.86","71.86"],"的值决定将哪个值赋给变量":["13.88","71.88"],"如果":["13.88","71.88"],"除后赋值":["13.89","71.89"],"也可以使用逗号操作符来辅助":["13.90","71.90"],"赋值":["13.90","71.90"],"官方":["14.0"],"vue是一套用于构架用户界面的":["14.0"],"numbers":["14.1"],"backbone":["14.2"],"underscore":["14.2"],"jquery":["14.2"],"对于前端而言":["14.2"],"数据变化无法同步到视图中":["14.2"],"后":["14.3"],"的渲染核心就是调用渲染":["14.4"],"render":["14.4","16.2","16.3","31.1","68.4","68.5","73.13"],"方法将虚拟":["14.4"],"低耦合":["14.5"],"的理解":["15.0","48.0"],"切换页面时通过监听路由变化":["15.1"],"渲染对应的页面client":["15.1"],"side":["15.1"],"rendering":["15.1"],"客户端渲染":["15.1"],"csr":["15.1"],"mpa":["15.1"],"搜索引擎优化":["15.2"],"无法实现":["15.2"],"容易实现":["15.2"],"页面切换":["15.2"],"速度快":["15.2"],"页面":["15.3"],"就是在打包的时候":["15.3"],"就是用":["16.1"],"对象来描述真实":["16.1"],"是对真实":["16.1"],"template":["16.2","28.0","35.1","42.3","73.1","73.12","78.4"],"这个模板会被编译器编译为渲染函数":["16.2"],"将会引起组件刷新":["16.3"],"此时就会生成新的":["16.3"],"插槽":["17.0"],"内部设计原因导致":["18.0"],"设计的是每个组件一个":["18.0"],"使用":["19.1"],"setter":["19.2"],"性能差":["19.2"],"当新增属性和删除属性时无法边控变化":["19.2"],"需要通过":["19.2"],"get":["19.3","75.29"],"记录渲染":["19.3"],"watcher":["19.3","51.0"],"set":["19.3"],"newvalue":["19.3"],"让记录的":["19.3"],"重新执行一下即可":["19.3"],"而是选择重写数组":["20.1"],"push":["20.1"],"数组的索引和长度变化是无法监控的":["20.2"],"去更新":["21.1"],"默认在初始化时会调用":["21.1"],"effect":["21.2"],"映射起来":["21.2"],"splice":["22.0"],"如果是对象本身的属性":["22.0"],"则直接添加即可":["22.0"],"如果条件不成立不会渲染当前指令所在节点的":["23.1"],"explorer":["23.2"],"vuejs":["23.2"],"用户":["24.0"],"computed属性是具备缓存的":["24.1"],"当值发生变化时调用对应的回调函数":["24.2"],"经常用于监控某个值的变化":["24.2"],"区别":["25.0"],"数据响应式中非常重要的两个概念":["25.1"],"用于处理对象类型的数据响应":["25.1"],"run":["26.0"],"app":["26.0"],"innerhtml":["26.0"],"state":["26.0","75.16","75.17","84.4"],"将":["27.0"],"模板转换成":["27.0"],"内哦不会对数据进行劫持":["28.0"],"对象采用":["28.0"],"数组采用方法重写":["28.0"],"再看一下用户是否传入了":["28.0"],"el":["28.0"],"属性和":["28.0"],"新增的一个":["29.0"],"arr":["30.0"],"一般也不咋用":["31.1"],"beforemount再挂载之前被调用":["31.1"],"相关的":["31.1"],"函数首次被调用":["31.1"],"mounted":["31.1"],"被新创建的":["31.1"],"更新之前":["31.2"],"组件数据更新之后":["31.2"],"beforeunmount":["31.2"],"组件实例销毁之前":["31.2"],"destroyed":["31.2"],"unmounted":["31.2"],"diff":["32.0"],"做更新":["32.1"],"老的没儿子":["32.2"],"现在有儿子":["32.2"],"直接插入新的儿子":["32.2"],"老的有儿子":["32.2"],"新的没儿子":["32.2"],"对比时辨识":["33.1"],"vnode":["33.1","50.2"],"如果不使用":["33.1"],"过程中通过":["33.2"],"是干什么的":["34.0"],"必须提供":["34.1"],"install":["34.1"],"全局组件":["34.2"],"通过全局混入来添加一些组件选项":["34.2"],"additional":["34.3"],"parameters":["34.3"],"args":["34.3"],"toarray":["34.3"],"arguments":["34.3"],"除了第一项":["34.3"],"方法的作用":["35.0"],"profile":["35.1"],"p":["35.1","75.1","75.2","75.23","75.24","80.1","80.2"],"firstname":["35.1"],"extend":["35.2"],"方法进行创建":["35.2"],"存起来":["36.0"],"函数式组件就是普通的函数":["37.0"],"返回处理后的值":["38.0"],"filterb":["38.0"],"的使用场景有哪些":["39.0"],"是":["39.1","49.1","68.1"],"compoent":["39.2"],"指令":["39.2"],"混入":["40.1"],"采用策略模式针对不同的属性进行合并":["40.1"],"如果混入的数据和本身组件中的数据冲突":["40.1"],"局部混入":["40.2"],"inject":["40.3"],"computed同名时会被替换":["40.3"],"slot":["41.0","44.2"],"components":["41.1"],"规范草案":["41.1"],"可以通过具名插槽指定渲染的位置":["41.2"],"v":["41.3","52.0","68.1","68.3","75.27","75.28","76.3"],"作用域插槽":["41.3"],"可以绑定一个动态值到视图上":["42.1"],"同时修改视图能改变数据对应的值":["42.1"],"的处理逻辑":["42.2"],"checked":["42.3"],"event":["42.3"],"change":["42.3"],"props":["42.3","68.4","68.5"],"修饰符绑定多个属性":["43.0"],"my":["43.0"],"编写递归组件":["44.1"],"在组件中调用自己":["44.1"],"submenu":["44.1"],"elsubmenu":["44.2"],"title":["44.2","73.16"],"方便调试和查找对应组件":["45.0"],"children":["45.0","68.1"],"filter":["45.0"],"item":["45.0"],"prevent":["46.0"],"self":["46.0"],"once":["46.0","77.5"],"这个工厂函数会异步解析你的组件定义":["47.1"],"import":["47.2","84.8","85.2","85.5"],"webpackchunkname":["47.2"],"b4":["47.2"],"默认渲染异步占位符节点":["47.3"],"方法可以保证用户定义的逻辑在更新之后执行":["48.1"],"可用于获取更新后的":["48.1"],"平时在哪里使用":["49.0"],"vue":["49.1","60.2","60.5","66.0","68.4","68.5","73.12","73.15","75.14","81.1","81.3","87.3"],"router":["49.2","72.0"],"view":["49.2"],"getfirstcomponentchild":["49.3"],"获得第一个组组件":["49.3"],"componentoptions":["49.3"],"check":["49.3"],"pattern":["49.3"],"getcomponentname":["49.3"],"获取组件名":["49.3"],"看是否需要缓存":["49.3"],"不需要缓存则直接返回":["49.3"],"not":["49.3"],"included":["49.3"],"to":["49.4","73.2"],"from":["49.4","68.4","68.5","84.3","84.8"],"同时":["50.1"],"update":["50.2","75.3","75.4"],"所在组件的":["50.2"],"更新时调用":["50.2"],"hide":["50.3"],"focus":["50.3","77.8","77.9"],"有调度中心统一调度订阅者注册到调度中心的处理代码":["51.0"],"观察者模式":["51.0"],"dep":["51.0"],"强制缓存":["53.0"],"对比缓存":["53.0"],"localstorage":["53.0"],"实现缓存资源":["53.0"],"cross":["54.0"],"origin":["54.0"],"resource":["54.0"],"sharing":["54.0"],"设置拦截请求":["55.0"],"自动添加":["55.0"],"如果控制到按钮级别的权限怎么做":["56.0"],"当页面刷新时我们可以使用token":["56.1"],"来获得用户权限":["56.1"],"访问权限":["56.1"],"根据用户是否登录判断能否访问一个页面":["56.1"],"通过路由守卫实现判断用户是否有此权限":["56.1"],"在路由配置里调用":["57.0"],"beforeenter":["57.0"],"解析异步路由组件":["57.0"],"在被激活的组件里调用":["57.0"],"不依赖于浏览器历史":["58.0"],"模式":["58.0"],"是什么原因呢":["59.0"],"的个人理解":["60.0"],"修改状态":["60.3"],"状态是一个树状结构":["60.4"],"最终会将模块的状态挂载到根模块上":["60.4"],"模块和状态的名字冲突":["60.4"],"watch":["61.0"],"监控":["61.0"],"不存在则发请求重新拉去数据":["62.0"],"存储到":["62.0"],"中可以多次进行":["63.0"],"commit":["63.0"],"action":["64.0"],"getter":["64.0"],"甚至是嵌套子模块":["64.0"],"modulea":["64.0"],"访问":["65.0"],"存在指向明确问题":["65.0"],"中很多未使用的方法或者属性依旧会被打包":["65.0"],"并且所有全局":["65.0"],"机制实现按需引入":["66.0"],"减少用户打包后的体积":["66.0"],"重写":["66.0"],"允许自定义渲染器":["66.0"],"扩展能力强":["66.0"],"不会发生以前的事情":["66.0"],"改写":["66.0"],"被定义":["67.1"],"所有的错误仍会发送给它":["67.1"],"因此这些错误仍然会向单一的分析服务的地方进行汇报":["67.1"],"配置函数":["67.2"],"data":["67.3","68.4","87.1"],"err":["67.3"],"isvnode":["68.1"],"key":["68.1","77.14","77.15"],"nu1l":["68.1"],"flag":["68.2"],"span":["68.2"],"ctx":["68.4","68.5"],"cache":["68.4","68.5"],"setup":["68.4"],"todisplaystring":["68.5"],"所定义的那样":["69.1"],"完整的":["69.1"],"包含以下几个部分":["69.1"],"包含如下几个部分":["69.3"],"是一个应用编程接口":["69.4"],"css":["69.5"],"样式前后的文档":["69.5"],"的接口":["69.5"],"描述事件及事件处理的接口":["69.5"],"移动":["69.6"],"缩放和关闭浏览器窗口的能力":["69.6"],"对象":["69.6"],"提供关于浏览器的详尽信息":["69.6"],"如果接收到的资源的签名与这个属性指定的签名不匹配":["70.1"],"则页面会报错":["70.1"],"脚本不会执行":["70.1"],"这个属性可以用于确保内容分发网络":["70.1"],"cdn":["70.1"],"delivery":["70.1"],"network":["70.1"],"不会提供恶意内容":["70.1"],"language":["70.1"],"废弃":["70.1"],"最初用于表示代码块中的脚本语言":["70.1"],"javascript1":["70.1"],"declare":["72.0"],"teleport":["73.2"],"body":["73.3"],"dashed":["73.5"],"link":["73.5"],"mybutton":["73.13"],"treecomponent":["73.16"],"off":["74.1","74.2"],"inc":["74.5"],"加":["74.5"],"is":["74.9","74.10"],"click":["75.3","78.1","82.2"],"count":["75.3","75.4","75.9","75.10"],"都会在":["75.14"],"组件更新":["75.14"],"之前":["75.14"],"被调用":["75.14"],"的副作用":["75.18"],"来完成它":["75.20"],"以下是你要实现的内容":["75.20","81.1"],"让我们开始吧":["76.5","78.4"],"可以将对应的":["76.7"],"更新元素的文本内容":["77.6"],"onclick":["77.11","77.12"],"oh":["77.17","77.18"],"click1":["78.1"],"me":["78.2"],"在这个挑战中":["78.4"],"我们将尝试它":["78.4"],"添加按键修饰符让有且只有":["78.5"],"counter":["79.1","79.2"],"reactivestate":["81.2"],"函数在这种场景下非常有用":["82.1"],"id":["83.1"],"npm":["84.1"],"pinia":["84.2","84.3","84.8","84.9","84.10"],"piniapluginpersistedstate":["84.2"],"进行序列化":["84.4"],"反序列化":["84.4"],"整个":["84.4"],"默认将被持久化":["84.4"],"如何你不想使用默认的配置":["84.4"],"usestore":["84.5","84.7","84.9","84.10"],"store":["84.7","84.9","84.10"],"save":["84.7"],"definestore":["84.8"],"icons":["85.1"],"d":["85.1"],"style":["85.2"],"zoom":["85.2"],"path":["85.2"],"resolve":["85.2"],"svgclass":["85.3"],"aria":["85.3"],"hidden":["85.3"],"svg":["85.4"],"设计是":["87.0"],"是分散在":["87.1"],"领先":["87.3"],"所有钩子执行的":["87.3"],"01":["87.3"],"lastedittime":["87.3"],"ref对象":["87.4"],"对象的":["87.4"],"否则报错":["87.5"],"接收的数据可以是":["87.6"],"基本类型":["87.6"],"typora":["87.7"],"pics":["87.7"],"raw":["87.7"],"master":["87.7"],"e8":["87.7"],"aa":["87.7"],"e5":["87.7"],"8a":["87.7"],"person":["87.8"],"h2":["87.8"],"姓名":["87.8"]},{"0":["5.32","5.39","11.2","13.27","13.28","13.63","13.67","13.71","13.77","13.78","14.1","68.4","71.27","71.28","71.63","71.67","71.71","71.77","71.78"],"1":["0.7","4.16","5.18","11.28","11.44","11.53","11.72","69.1","75.3"],"2":["0.11","0.17","5.8","5.49","5.53","5.64","27.0"],"3":["0.8","0.21","2.6","4.13","4.16","5.12","5.21","5.22","5.24","5.27","11.2","13.80","71.80"],"4":["5.6","5.16","10.1","13.24","13.63","13.84","13.86","22.0","32.2","69.5","69.6","71.24","71.63","71.84","71.86"],"5":["5.16","13.34","13.79","69.6","71.34","71.79"],"7":["13.82","70.1","71.82"],"8":["13.83","71.83"],"9":["13.83","71.83"],"10":["11.99","13.31","71.31"],"15":["13.34","71.34"],"16":["13.34","71.34"],"17":["87.3"],"22":["13.34","71.34"],"28":["87.3"],"36":["9.0"],"70":["13.34","71.34"],"85":["87.7"],"111":["5.9"],"120":["11.123"],"123":["4.3"],"128":["11.91"],"175":["13.34","71.34"],"300":["11.65"],"456":["5.14"],"501":["11.2"],"754":["13.29","71.29"],"1111":["5.59"],"1280":["0.22"],"通过":["0.1","2.1"],"如果文字换行":["0.2"],"则整个盒子的高度会增大":["0.2"],"属性选择器":["0.3"],"a":["0.3","4.3","5.61","11.20"],"href":["0.3"],"属性哪些可以继承":["0.3"],"选择器":["0.4"],"0100":["0.4"],"第三":["0.4"],"类选择器":["0.4"],"body":["0.5","73.1"],"div":["0.5","49.2","81.1"],"background":["0.6"],"red":["0.6","77.14","77.15"],"方式二":["0.6"],"position":["0.6"],"relative":["0.6"],"css2":["0.7"],"新增":["0.7"],"list":["0.7","10.3","39.2"],"item":["0.7","4.19"],"如何触发":["0.8"],"float":["0.8"],"的值非":["0.8"],"方式三":["0.9"],"创建一个虚拟标签":["0.9"],"after":["0.9"],"最常用":["0.9"],"这样不管是布局也好":["0.10"],"转换":["0.10","5.4"],"是相对于自身":["0.11"],"main":["0.12","11.130","11.139"],"中":["0.12","62.0"],"我们使用了":["0.13"],"优点":["0.14"],"减少了":["0.14"],"http":["0.14"],"重绘和回流的问题":["0.15"],"重绘并回流":["0.15"],"只重绘不回流":["0.15"],"产生回流一定会造成重绘":["0.15"],"r":["0.16"],"表示红色":["0.16"],"g":["0.16","4.2"],"表示绿色":["0.16"],"b":["0.16","5.62","11.19"],"是什么":["0.17"],"作用":["0.17","68.1"],"解决办法":["0.18"],"css":["0.18"],"响应式图片":["0.21"],"性能优化":["0.21"],"html":["0.21"],"picture":["0.21"],"source":["0.21"],"srcset":["0.21"],"图的宽度和电脑的宽度不对应":["0.22"],"怎么办":["0.22"],"把":["0.22"],"display":["2.1"],"进行转换":["2.1"],"inline":["2.1"],"比":["2.2","2.5"],"好":["2.2"],"区别二":["2.2","5.66"],"是一个实体标签":["2.3"],"用来给文字加粗":["2.3"],"逻辑标签":["2.3"],"用来加强字符语气的":["2.3"],"标签只有加粗的样式":["2.3"],"没有实际的含义":["2.3"],"标签表示标签内字符比较重要":["2.3"],"用于强调的":["2.3"],"seo":["2.4"],"的层面上":["2.4"],"蜘蛛抓取不到图片的内容":["2.4"],"体积小":["2.5"],"适合做":["2.5"],"ie8":["2.6"],"不兼容":["2.6"],"type":["3.1","42.3","70.1"],"text":["3.1","11.62","11.86","73.5"],"highlight":["3.2"],"color":["3.2","77.14","77.15"],"android":["3.3"],"callout":["3.4"],"none":["3.4"],"webkit":["3.5"],"user":["3.6"],"select":["3.6"],"math":["4.1"],"function":["4.1","5.30","5.40","5.52","35.1"],"存储方式":["4.1"],"基础类型存储在栈内存中":["4.1"],"boolean":["4.2","13.23","71.23"],"undefined":["4.2","13.26","71.26"],"regexp":["4.2"],"如果有一个操作值是":["4.3"],"那么转换成":["4.3"],"object":["4.3","5.23"],"且另一方为":["4.3"],"就会把":["4.3"],"转为原始类型再进行判断":["4.3"],"true规则2":["4.3"],"false规则2":["4.3"],"true规则4字符串转隐式转换成number之后再对比":["4.3"],"e规则布尔型隐式转换成number之后再对比":["4.3"],"var":["4.3","5.6"],"value":["4.3","11.87","42.2","75.29","77.17","87.4"],"enumerable":["4.5"],"false":["4.5","11.21","73.12"],"obj2":["4.5"],"image":["4.5","11.79"],"20240115102506908":["4.5"],"new":["4.6","5.44","5.46","11.44","25.1"],"constructor":["4.6","11.43","49.3"],"日期对象直接返回一个新的日期对象":["4.6"],"正则对象直接返回一个新的正则对象":["4.6"],"如果循环引用了就用":["4.6"],"来解决":["4.6"],"has":["4.6"],"继承可以使得子类别具有父类的各种方法和属性":["4.7"],"20240117094250912":["4.8"],"五":["4.8"],"寄生式继承":["4.8"],"使用原型式继承可以获得一份目标对象的浅拷贝":["4.8"],"然后利用这个浅拷贝的能力再进行增强":["4.8"],"添加一些方法":["4.8"],"寄生式继承相比于原型式继承":["4.8"],"还是在父类基础上添加了更多的方法":["4.8"],"parent5":["4.8"],"null":["4.9","13.74","41.3","68.4","68.5","71.74"],"isfunction":["4.9"],"return":["4.9","5.18","5.63","11.38","11.39","35.1","36.0","49.3","68.5","73.13"],"bind原理介绍":["4.9"],"bind是挂在":["4.9"],"闭包让你可以在一个内层函数访问到起外层函数的作用域":["4.11"],"基本概念":["4.11"],"就去腹肌作用域查找":["4.12"],"实际上就是在使用闭包":["4.13"],"作为函数参数传递的形式":["4.13"],"第二个参数是可选参数":["4.14"],"提供可选的":["4.14"],"reviver":["4.14"],"函数":["4.14","13.32","13.33","16.2","21.1","21.2","71.32","71.33"],"而不管这个参数是数字还是其他":["4.16"],"from":["4.16","84.6","85.2","85.5"],"设计初衷是快速便捷地基于其他对象创建新数组":["4.16"],"准确来说就是从一个类似数组的可迭代对象中创建换一个新的数组实例":["4.16"],"三个参数":["4.16"],"类似数组的对象":["4.16"],"必选":["4.16"],"加工函数":["4.16"],"新生成的数组会经过该函数的加工再返回":["4.16"],"this":["4.16","5.34","11.36","11.40","43.0","73.13"],"作用域":["4.16"],"未形成标准的":["4.18"],"tosource":["4.18"],"以及":["4.18"],"es7":["4.18"],"includes数组遍历的方法":["4.18"],"some":["4.19"],"split":["4.19"],"和":["4.19","5.53","16.3","56.1"],"tostring":["4.19"],"共同处理":["4.19"],"n":["4.21","4.24"],"等来衡量":["4.21"],"堆排序":["4.23"],"堆排序是指利用堆这种数据结构所设计的一种排序算法":["4.23"],"堆积":["4.23"],"是一个近似完全二叉树的结构":["4.23"],"并同时满足堆积的性质":["4.23"],"即子节点的键值或索引总是小于":["4.23"],"或者大于":["4.23"],"它的父节点":["4.23"],"堆的底层":["4.23"],"实际上就是一棵完全二叉树":["4.23"],"可以用数组实现":["4.23"],"heap":["4.23"],"sort":["4.23"],"k":["4.23"],"swap":["4.23"],"max":["4.23"],"heapify":["4.23"],"start":["4.23"],"end":["4.23","11.92"],"dad":["4.23"],"son":["4.23"],"大于":["4.24"],"源码分析":["4.24"],"才会指向":["5.1"],"代码":["5.1"],"按顺序执行":["5.1"],"变成链接的形式":["5.2"],"nan":["5.2"],"是一个数值类型":["5.2"],"但是不是一个具体的数字":["5.2"],"后有":["5.3"],"出来":["5.3"],"事件循环包含":["5.5"],"宏任务":["5.5"],"微任务":["5.5"],"promise":["5.5","7.4"],"还是没有写":["5.6"],"window":["5.6","13.14","71.14"],"js":["5.7","5.51","11.13","13.32","13.40","50.3","71.32","71.40","87.4"],"console":["5.9","5.10","5.14","5.19","5.21","5.22","5.24","5.34","11.38","11.100","13.18","13.21","71.18","71.21"],"log":["5.9","5.10","5.13","5.19","5.23","5.25","11.31","11.38","11.55","11.100","13.18","13.21","71.18","71.21"],"对象的":["5.11"],"key":["5.11","5.35","33.0","68.4"],"都是字符串类型":["5.11"],"let":["5.18","5.43","5.44","5.45","5.58","11.17","11.20","11.21","11.44","13.39","13.40","13.80","36.0","71.39","71.40","71.80"],"参数可以写":["5.27"],"items":["5.28"],"unique":["5.30"],"length":["5.31","5.32","5.40"],"if":["5.31","5.32","11.74","44.1","67.3","68.3"],"fnarr":["5.33"],"newarr":["5.33"],"in":["5.35","10.0","13.60","39.2","71.60"],"将空对象作为构造函数的上下文":["5.36"],"改变":["5.36"],"关闭":["5.38"],"i":["5.39","11.39","14.1","39.2"],"查找规则":["5.41"],"现在对象本身找":["5.41"],"构造函数中找":["5.41"],"name":["5.43","5.45","11.4","11.87","26.0","36.0"],"张三":["5.43","5.45"],"o":["5.44","5.45"],"prototype":["5.46"],"call":["5.48"],"所以需要加":["5.49"],"执行":["5.49"],"是带":["5.50"],"id":["5.50","7.9","49.2"],"的":["5.50","84.4"],"button":["5.50","11.95","11.103","73.13","78.4"],"h1":["5.50"],"现在是冒泡排序":["5.51"],"原理实现链接":["5.51"],"src":["5.51","11.70","11.76","11.106","11.115","11.130","11.133","11.139","87.3"],"json":["5.52","11.80"],"parse":["5.52"],"stringify":["5.52"],"copyobj":["5.52"],"不可以设置过期时间":["5.53"],"document":["5.54"],"documentelement":["5.54"],"clientwidth":["5.54"],"不可以多次声明同一个变量":["5.55"],"区别三":["5.55"],"声明变量的":["5.55"],"你好":["5.57","11.87","84.5","84.9","84.10"],"报错":["5.59","22.0"],"指向定义时候外层第一个普通函数的":["5.64"],"箭头函数不能":["5.64"],"fulfilled":["5.65"],"已成功":["5.65"],"返回的是具体的内容":["5.66"],"则返回":["5.67"],"这个问题具体要看项目和业务的情况了":["7.2"],"因为组件的加载顺序是":["7.2"],"里面的方法的":["7.3"],"会报错了":["7.3"],"settimeout":["7.4","7.15"],"请求":["7.4"],"created":["7.5"],"activated":["7.6","7.8","7.9","31.2","49.4"],"如果没有加入":["7.6"],"子":["7.7","7.11"],"deactivated":["7.8","31.2"],"如果当前组价加入了":["7.8"],"判断":["7.9"],"这种方式":["7.11"],"父传子很方便":["7.11"],"但是父传给孙子辈分的组件很麻烦":["7.11"],"父":["7.11"],"v":["7.12","77.1","77.2"],"model":["7.12","75.27","75.28","77.2","77.17","77.18"],"的优先级大于":["7.13"],"callback":["7.15"],"built":["10.0"],"export":["10.1","84.8"],"default":["10.1","41.3","73.5"],"data":["10.1","22.0","68.5"],"block":["10.2","68.1"],"output":["10.2"],"full":["10.3"],"exe":["11.2"],"进入安装向导":["11.2"],"点击":["11.2"],"next":["11.2"],"选择安装目录":["11.3"],"阅读相关协议":["11.3"],"勾选":["11.3"],"accept":["11.3"],"finish":["11.4"],"项目名称":["11.4"],"bundle":["11.4"],"studio提供了多种方式用于运行项目":["11.5"],"包括预览":["11.5"],"只需打开需要预览的页面文件":["11.6"],"例如下图中的":["11.6"],"index":["11.6","73.9","73.10"],"下载系统镜像":["11.7"],"注意选择":["11.7"],"api9":["11.7"],"版本":["11.7"],"等待下载完成后":["11.7"],"手机会弹框提示选择":["11.8"],"usb":["11.8"],"连接方式":["11.8"],"需要选择":["11.8"],"传输文件":["11.8"],"之后会弹窗询问":["11.8"],"是否允许usb调试":["11.8"],"可勾选":["11.8"],"始终允许使用这台计算机进行调试":["11.8"],"然后点击":["11.8"],"确定":["11.8"],"在继承typescript语法的基础上进行了一系列优化":["11.9"],"使开发者能够以更简洁":["11.9"],"更自然的方式开发应用":["11.9"],"地址为https":["11.12"],"www":["11.12"],"js环境":["11.13"],"因此在安装ts":["11.13"],"node之前":["11.13"],"我们需要准备好node":["11.13"],"准备node":["11.13"],"js环境需要完成以下两步操作":["11.13"],"安装node":["11.13"],"配置环境变量":["11.13"],"在配置完node":["11.13"],"js环境后":["11.13"],"变量声明":["11.15"],"用于声明常量":["11.16"],"两者的区别是变量在赋值后可以修改":["11.16"],"typescript":["11.17","11.30","11.74","11.118","68.1","84.4","84.6"],"c":["11.17"],"hello":["11.20","11.31"],"isopen":["11.21"],"item1":["11.22"],"item2":["11.22"],"item3":["11.22"],"进行初始化":["11.22"],"age":["11.23","87.8"],"number":["11.23","11.128","13.23","13.24","13.28","71.23","71.24","71.28"],"gender":["11.23"],"对象类型的变量可以通过对象字面量":["11.23"],"函数声明语法":["11.25"],"参数详解":["11.26"],"注":["11.27","11.69"],"调用函数时":["11.27"],"未传递可选参数":["11.27"],"则该参数的值为":["11.27"],"默认参数":["11.27"],"可在函数的参数列表为参数指定默认值":["11.27"],"任意类型":["11.28"],"若函数需要处理任意类型的值":["11.28"],"则可以使用":["11.28"],"any":["11.28"],"返回值详解":["11.29"],"作为返回值类型":["11.30"],"其含义为空":["11.30"],"注意":["11.32","13.27","71.27"],"匿名函数能够根据上下文推断出参数类型":["11.32"],"因此参数类型可以省略":["11.32"],"箭头函数":["11.32"],"匿名函数的语法还可以进一步的简化":["11.32"],"只保留参数列表和函数体两个核心部分":["11.32"],"class":["11.33"],"实现更为复杂的程序功能":["11.34"],"是对象的蓝图或模板":["11.34"],"语法说明":["11.35"],"读":["11.37"],"lisi":["11.37"],"写":["11.37"],"string":["11.38","13.24","71.24"],"introduce":["11.39"],"and":["11.39"],"am":["11.39"],"interface":["11.41","11.42","72.0"],"是面向对象编程中的另一个重要概念":["11.42"],"对象和一个":["11.44"],"对象":["11.44"],"注意两个对象的类型均可以设置":["11.44"],"p1":["11.44"],"zhangsan":["11.44"],"变量的类型为":["11.46"],"上":["11.48","13.14","71.14"],"下":["11.48"],"左":["11.48"],"右":["11.49"],"进行移动":["11.49"],"此时就可以先使用枚举定义好所有可能的输入选项":["11.49"],"direction":["11.49"],"up":["11.49"],"bottom":["11.49","11.128"],"left":["11.49"],"right":["11.49"],"函数的实现如下":["11.49"],"再例如":["11.50"],"每个模块都拥有自己的作用域":["11.52"],"这意味着在一个模块中声明的任何内容":["11.52"],"如变量":["11.52"],"str":["11.53","13.39","71.39"],"world":["11.53"],"num":["11.53"],"as":["11.54"],"hellofroma":["11.54"],"strfroma":["11.54"],"hellofromc":["11.54"],"strfromc":["11.54"],"modulea":["11.55"],"默认导入":["11.55"],"由于每个模块最多有一个默认导出":["11.55"],"因此默认导入无需关注导入项的原始名称":["11.55"],"并且无需使用":["11.55"],"在继承了typescript语法的基础上":["11.56"],"是一种编写用户界面的范式":["11.57"],"类型的变量来表示这两个状态":["11.58"],"true":["11.58","11.107","13.63","13.87","68.5","71.63","71.87","85.3"],"表示":["11.58"],"在分析完界面状态后":["11.59"],"我们需要准确的描述界面在不同状态下的显示效果":["11.59"],"为了实现点击按钮开":["11.60"],"关灯的效果":["11.60"],"我们可以为按钮绑定点击事件":["11.60"],"当用户点击":["11.60"],"开灯按钮":["11.60"],"开发者只需描述在界面在不同状态下要呈现的最终效果":["11.61"],"而无需关注界面变化的具体过程":["11.61"],"arkts提供了很多的内置组件":["11.62"],"例如":["11.62","11.98","11.124"],"案例效果":["11.64"],"width":["11.65"],"borderradius":["11.65"],"else":["11.65","68.2"],"reference":["11.67"],"就会弹出":["11.67"],"子组件":["11.67","67.1"],"如果组件支持子组件配置":["11.67"],"可在":["11.67"],"后的":["11.67"],"arkts":["11.68","11.98"],"还支持自定义组件":["11.68"],"被":["11.69"],"装饰后才具备组件化的能力":["11.69"],"装饰器是typescript中的一种特殊语法":["11.69"],"常用于装饰类":["11.69"],"属性":["11.69","13.47","68.1","71.47"],"案例的完整代码见":["11.70","11.73","11.76"],"demos":["11.70","11.73","11.76","11.99","11.106","11.115","11.124","11.130","11.133"],"entry":["11.70","11.73","11.76","11.106","11.115","11.130","11.133","11.139"],"渲染控制":["11.71"],"img":["11.73","11.92","11.110","11.121","11.123","11.124"],"ui描述":["11.74"],"需要重新渲染时":["11.77"],"会再次使用keygenerator为每个元素重新生成一遍key":["11.77"],"然后":["11.77"],"会检查新生成的key在上次渲染时是否已经存在":["11.77"],"若存在":["11.77"],"就会认为这个key对应的数组元素没有发生变化":["11.77"],"那它就会直接复用这个key所对应的组件对象":["11.77"],"若不存在":["11.77"],"就会认为这个key对应的元素发生了变化":["11.77"],"或者该元素为新增元素":["11.77"],"此时":["11.77"],"就会为该元素重新创建一个组件对象":["11.77"],"开发者可以通过keygenerator函数自定义key的生成规则":["11.77"],"如果开发者没有定义keygenerator函数":["11.77"],"则系统会使用默认的key生成函数":["11.77"],"即":["11.77"],"则会使用zh":["11.80"],"cn目录下的资源":["11.80"],"为英文时":["11.80"],"则会使用en":["11.80"],"us目录下的资源":["11.80"],"若没有与当前所处环境相对应的版本":["11.80"],"则使用":["11.80"],"base":["11.80"],"目录下资源":["11.80"],"各目录存储的具体资源如下":["11.80"],"存放媒体资源":["11.80"],"视频等文件":["11.80"],"存放用于描述页面元素的尺寸":["11.80"],"颜色":["11.80"],"样式等的各种类型的值":["11.80"],"每种类型的值都定义在一个相应的":["11.80"],"文件中":["11.80"],"存放自定义配置文件":["11.80"],"rawfile":["11.80"],"用于存储任意格式的原始文件":["11.80"],"需要注意的是rawfile不会根据设备所处的环境去匹配不同的资源":["11.80"],"总结":["11.80"],"resources目录下可用于存放图片的目录有":["11.80"],"单个像素的物理尺寸大":["11.82"],"对应的物理像素会更少":["11.82"],"相反在像素密度高的屏幕上":["11.82"],"单个像素的物理尺寸小":["11.82"],"对应的物理像素会更多":["11.82"],"因此就能在不同像素密度的屏幕上":["11.82"],"获得基本一致的观感了":["11.82"],"类型的参数":["11.82","11.89"],"默认以":["11.82","11.89"],"作为单位":["11.82"],"类型参数用于引用resources下的element目录中定义的数值":["11.82"],"引用element目录中的数值":["11.82"],"fill":["11.83"],"不保持宽高比进行放大缩小":["11.83"],"使得图片充满显示区域":["11.83"],"scaledown":["11.83"],"保持宽高比进行缩小或不变":["11.83"],"不会放大":["11.83"],"高质量插值":["11.84"],"可能会影响图片渲染的速度":["11.84"],"medium":["11.84","11.90"],"中等质量插值":["11.84"],"low":["11.84"],"文件":["11.87"],"内容如下":["11.87"],"greeting":["11.87"],"vp":["11.89"],"类似":["11.89"],"具体大小也会随屏幕的像素密度变化而变化":["11.89"],"number类型":["11.89","11.91"],"regular":["11.90"],"字体粗细适中":["11.90"],"bold":["11.90"],"字体较粗":["11.90"],"bolder":["11.90"],"或者":["11.91","28.0","85.1"],"008000":["11.91"],"类型的参数用于使用16进制的数字设置":["11.91"],"尾部对齐":["11.92"],"各选项效果如下":["11.92"],"文本超长时":["11.93"],"进行裁剪显示":["11.93"],"ellipsis":["11.93"],"显示不下的文本用省略号代替":["11.93"],"circle":["11.96"],"圆形":["11.96"],"normal":["11.96"],"普通形状":["11.96"],"相关案例见":["11.99","11.100","11.124"],"我被点击了":["11.100"],"为切换按钮组件":["11.102"],"checkbox":["11.103"],"复选框":["11.103"],"按钮":["11.103"],"方法设置":["11.105"],"toggle":["11.105"],"void":["11.107"],"当":["11.107","33.1"],"组件的状态由关闭切换为打开时":["11.107"],"为":["11.107"],"textinput":["11.109","11.118"],"用于设置输入框当前的文本内容":["11.110"],"名称":["11.112"],"描述":["11.112"],"可通过":["11.113"],"caretcolor":["11.113"],"的样式":["11.114"],"其中":["11.114","13.36","71.36"],"组件绑定":["11.117"],"该方法的参数定义如下":["11.117"],"组件绑定相关事件":["11.118"],"两个方法的参数定义如下":["11.118"],"event":["11.118"],"progress":["11.120"],"线性样式":["11.121"],"ring":["11.121"],"环形无刻度样式":["11.121"],"eclipse":["11.121"],"属性用于设置":["11.123"],"的刻度数":["11.123"],"提示用户进行操作或收集用户输入":["11.125"],"消息提示":["11.127"],"常用于显示一些简短的消息或提示":["11.127"],"resource":["11.128"],"duration":["11.128"],"可使用全局方法":["11.131","11.134"],"alertdialog":["11.131"],"actionsheet":["11.134"],"u8ed6fe33":["11.136"],"textpickerdialog":["11.137"],"文本滑动选择器弹窗":["11.137"],"官方文档":["11.137"],"是两个不同的变量":["13.2","71.2"],"类似地":["13.2","71.2"],"美元符号或数字":["13.3","71.3"],"单行注释":["13.4","71.4"],"块注释以一个斜杠和一个星号":["13.4","71.4"],"但它其实是一个预处理指令":["13.5","71.5"],"任何支持的":["13.5","71.5"],"引擎看到它都会切换到严格模式":["13.5","71.5"],"选择这种语法形式的目的是不破坏":["13.5","71.5"],"const":["13.7","13.22","22.0","47.2","68.1","71.7","71.22","84.3","84.8"],"finally":["13.7","71.7"],"super":["13.7","71.7"],"with":["13.7","43.0","71.7"],"try":["13.7","71.7"],"比如表示控制语句的开始和结束":["13.8","71.8"],"或者执行特定的操作":["13.8","71.8"],"protected":["13.10","71.10"],"private":["13.10","71.10"],"的所有版本中都可以使用":["13.12","71.12"],"而":["13.12","71.12"],"message":["13.13","71.13"],"变成全局变量":["13.14","71.14"],"去掉之前的":["13.14","71.14"],"操作符后":["13.14","71.14"],"这个就是所谓的提升":["13.15","71.15"],"hoist":["13.15","71.15"],"referenceerror":["13.16","13.17","13.25","71.16","71.17","71.25"],"uncaught":["13.17","71.17"],"cannot":["13.17","71.17"],"access":["13.17","71.17"],"matt":["13.18","71.18"],"是块级作用域":["13.19","71.19"],"所以不可能检查前面是否声明过同名变量":["13.19","71.19"],"声明的限制只适用于它指向的变量的引用":["13.21","71.21"],"换句话说":["13.21","13.65","71.21","71.65"],"如果":["13.21","71.21"],"优先":["13.22","71.22"],"表示值为字符串":["13.24","71.24"],"表示值为数值":["13.24","71.24"],"is":["13.25","13.44","71.25","71.44"],"not":["13.25","71.25","84.7"],"defined":["13.25","71.25"],"对未声明的变量":["13.25","71.25"],"只能执行一个有用的操作":["13.25","71.25"],"就是对它调用":["13.25","71.25"],"是一个对象的引用":["13.26","71.26"],"值是由":["13.26","71.26"],"派生而来的":["13.26","71.26"],"布尔值字面量":["13.27","71.27"],"非零数值":["13.28","71.28"],"包括无穷值":["13.28","71.28"],"格式表示正式和浮点数":["13.29","71.29"],"十六进制":["13.30","71.30"],"要创建十六进制字面量":["13.30","71.30"],"必须让真正的数值前缀":["13.30","71.30"],"处理":["13.31","71.31"],"floatnum2":["13.31","71.31"],"小数点后面是零":["13.31","71.31"],"没有可用于计算的数值表示形式":["13.32","71.32"],"要确定一个值是不是有限大":["13.32","71.32"],"介于":["13.32","71.32"],"javascript":["13.32","71.32"],"能表示的最小值和最大值之间":["13.32","71.32"],"可以使用":["13.32","29.0","71.32"],"isinfinite":["13.32","71.32"],"不等于包括":["13.33","71.33"],"在内的任何值":["13.33","71.33"],"提供了":["13.33","71.33"],"isnan":["13.33","71.33"],"该函数接受一个参数":["13.33","71.33"],"可以是任意数据类型":["13.33","71.33"],"然后判断这个参数是否":["13.33","71.33"],"把一个值传给":["13.33","71.33"],"num5":["13.34","71.34"],"解释为十进制":["13.34","71.34"],"num6":["13.34","71.34"],"函数还有第二个参数":["13.34","71.34"],"用于指定底数":["13.34","71.34"],"进制数":["13.34","71.34"],"默认是":["13.34","71.34"],"通过第二个参数":["13.34","71.34"],"可以极大扩展转换后获得的结果类型":["13.34","71.34"],"af":["13.34","71.34"],"字符序列":["13.35","71.35"],"字符串可以使用双引号":["13.35","71.35"],"xnn":["13.36","71.36"],"以十六进制编码":["13.36","71.36"],"nn":["13.36","71.36"],"表示的字符":["13.36","71.36"],"必须先销毁原始的字符串":["13.37","71.37"],"表达式实现":["13.40","71.40"],"通过前缀到模板字面量来应用自定义行为":["13.41","71.41"],"如下例所示":["13.41","71.41"],"为此":["13.42","71.42"],"可以使用默认的":["13.42","71.42"],"新增的数据类型":["13.43","71.43"],"符号是原始值":["13.43","71.43"],"mysymbol":["13.44","71.44"],"typeerror":["13.44","71.44"],"的任何值都会被转化成字符串":["13.45","71.45"],"还可以使用":["13.45","71.45"],"keyfor":["13.45","71.45"],"来查询全局注册表":["13.45","71.45"],"这个方法接收符号":["13.45","71.45"],"返回该全局符号对应的字":["13.45","71.45"],"符串键":["13.45","71.45"],"如果查询的不是全局符号":["13.45","71.45"],"iterator":["13.47","71.47"],"那么就可以通过在自定义对象上重新定义":["13.47","71.47"],"用于判断给定属性是否可用":["13.60","71.60"],"for":["13.60","14.1","71.60"],"语句枚举":["13.60","71.60"],"属性名必须是字符串":["13.60","71.60"],"ecmascript":["13.62","71.62"],"再应用改变":["13.63","71.63"],"变量类型从布尔值变成数值":["13.63","71.63"],"一元减由一个减号":["13.64","71.64"],"先确定":["13.65","71.65"],"的二进制表示":["13.65","71.65"],"找到数值的一补数":["13.65","71.65"],"或反码":["13.65","71.65"],"num2":["13.66","71.66"],"按位异或用脱字符":["13.68","71.68"],"下面是按位异或的真值表":["13.68","71.68"],"位都向右移":["13.70","71.70"],"同时保留符号":["13.70","71.70"],"无符号右移会给空位补":["13.71","71.71"],"而不管符号位是":["13.71","71.71"],"什么":["13.71","71.71"],"如果操作数是非":["13.73","71.73"],"数值":["13.73","71.73"],"包括":["13.73","63.0","71.73"],"才会返回该对象":["13.74","71.74"],"如果两个操作数都是对象":["13.74","13.75","13.86","71.74","71.75","71.86"],"如果有一个操作数是":["13.74","71.74"],"如果第一个操作数求值为":["13.75","71.75"],"则返回第二个操作数":["13.75","71.75"],"乘法":["13.76","71.76"],"乘以非":["13.77","71.77"],"除数不是":["13.79","71.79"],"squared":["13.80","71.80"],"如果有任一操作数是对象":["13.84","71.84"],"则调用其":["13.84","71.84"],"valueof":["13.84","71.84"],"方法":["13.84","71.84"],"记住":["13.86","71.86"],"即使两个操作数都是":["13.86","71.86"],"相等操作符也是返回":["13.86","71.86"],"因为按照规则":["13.86","71.86"],"不等于":["13.86","71.86"],"则比较他们是不是同一个对象":["13.86","71.86"],"如果两个操作数都指向同一个对象":["13.86","71.86"],"只有两个操作数在不转换的前提下相等才返回":["13.87","71.87"],"是":["13.88","71.88"],"则赋值":["13.88","71.88"],"取模后赋值":["13.89","71.89"],"加后赋值":["13.89","71.89"],"在赋值时使用逗号操作符分隔值":["13.90","71.90"],"最终会返回表达式中最后一个值":["13.90","71.90"],"渐进式框架":["14.0"],"total":["14.1"],"需要将逻辑聚拢在":["14.2"],"controller":["14.2"],"层":["14.2"],"映射关系的简化":["14.2"],"可以比较新旧虚拟节点":["14.3"],"找到变化再进行更新":["14.3"],"虚拟":["14.3"],"dom":["14.4","31.1","37.0","75.14"],"渲染成真实":["14.4"],"单向数据流":["14.5"],"组件化开发能大幅提高应用开发效率":["14.5"],"multi":["15.1"],"多页引用":["15.1"],"多个":["15.1"],"用户体验良好":["15.2"],"切换加载资源":["15.2"],"速度慢":["15.2"],"用户体验差":["15.2"],"维护成本":["15.2"],"先将页面放到浏览器中运行一下":["15.3"],"将":["15.3"],"保存起来":["15.3"],"的抽象":["16.1"],"由于直接操作dom":["16.1"],"性能低但是":["16.1"],"在接下来的挂载过程中会调用":["16.2"],"newvnode":["16.3"],"使用":["16.3","54.0"],"生命周期":["17.0"],"组件化好处":["17.0"],"高聚合":["17.0"],"组件要合理的划分":["17.1"],"如果不拆分组件":["17.1"],"watcher":["18.0"],"渲染":["18.0"],"没有采用一个属性对应一个":["18.0"],"defineproperty":["19.1","66.0"],"将属性进行劫持":["19.1"],"set":["19.2"],"delete":["19.2"],"实现":["19.2"],"数组不采用":["19.2"],"shift":["20.1","78.4"],"pop":["20.1"],"splice":["20.1"],"render":["21.1","21.2","28.0"],"此时会触发属性依赖收集":["21.1"],"默认在初始化时会调用":["21.2"],"如果是":["22.0"],"实例":["22.0","60.5"],"或者根数据":["22.0"],"时":["22.0"],"更新":["22.0"],"无意义":["22.0"],"ob":["22.0"],"isvue":["22.0"],"show的怎么理解":["23.0"],"元素":["23.1","31.1"],"org":["23.2"],"可以阻断内部代码是否执行":["23.3"],"如果条件不成立不会执行内部逻辑":["23.3"],"vue3":["24.0"],"中有三种":["24.0"],"依赖的值不发生变化":["24.1"],"对其取值时计算属性方法不会重新执行":["24.1"],"进行一些操作":["24.2"],"异步要注意静态问题":["24.2"],"底层采用的是":["25.1"],"proxy":["25.1"],"数据变化后":["26.0"],"会调用":["26.0"],"schduler":["26.0"],"内部都会再次触发":["26.0"],"ast":["27.0"],"语法树":["27.0"],"parsehtml":["27.0"],"优先级更高":["28.0"],"如果用户写的是":["28.0"],"会做模板编译":["28.0"],"三部曲":["28.0"],"用于讲一个数据变成响应式的":["29.0"],"在父子组件通信时":["29.0"],"exists":["30.0"],"在":["30.0"],"vue2":["30.0","51.0"],"vm":["31.1","49.4"],"el替换":["31.1"],"并挂载到实例上去之后调用该钩子":["31.1"],"可以用于获取":["31.1"],"beforeupdate":["31.1"],"数据更新时调用":["31.1"],"发生在虚拟":["31.1"],"组件实例销毁之后":["31.2"],"keep":["31.2"],"alive":["31.2"],"缓存的组件激活时调用":["31.2"],"算法原理":["32.0"],"的核心就比较两个虚拟节点的差异":["32.1"],"直接删除页面节点":["32.2"],"老的儿子是文本":["32.2"],"新的文字是文本":["32.2"],"直接更新文本节点即可":["32.2"],"会使用一种最大限度减少动态元素并且尽可能地尝试就地修改":["33.1"],"复用相同类型元素的算法":["33.1"],"正在更新使用":["33.1"],"可以判断两个虚拟节点是否是相同节点":["33.2"],"可以复用老节点":["33.2"],"如果插件是一个函数":["34.1"],"它会被作为":["34.1"],"添加":["34.2"],"vue":["34.2","39.1","47.2","50.3","65.0","75.20"],"其他的参数整合成数组":["34.3"],"unshift":["34.3"],"typeof":["34.3"],"install":["34.3"],"lastname":["35.1"],"aka":["35.1"],"alias":["35.1"],"有了此方法我们可以用于手动挂载组件":["35.2"],"后端存储的字符串模板我们可以通过":["35.2"],"child":["36.0","75.20"],"xxxx":["36.0","43.0","45.0"],"的过程":["37.0"],"最终就是将返回的虚拟":["37.0"],"变成真实":["37.0"],"常见场景":["38.0"],"单位转换":["38.0"],"千分符":["38.0"],"文本格式化":["38.0"],"时间格式化等操作":["38.0"],"的内置指令":["39.1"],"li":["39.2"],"会采用":["40.1"],"就近原则":["40.1"],"以组件的数据为准":["40.1"],"跟":["40.2"],"data会被合并":["40.3"],"生命周期和watch方法会被合并成队列":["40.3"],"components":["40.3"],"是怎样实现的":["41.0"],"利用":["41.1"],"slot":["41.1","44.1"],"常用的组件例如":["41.2"],"弹窗组件":["41.2"],"article":["41.3"],"编译后的结果":["41.3"],"能修改的视图就是表单组件":["42.1"],"经常会听到一句话":["42.1"],"文本框会被解析成":["42.2"],"input":["42.2"],"bind":["42.3","50.3","76.3"],"on":["42.3","77.11","77.12"],"emit":["42.3"],"编译后结果是":["43.0"],"children":["44.1","73.16"],"options":["45.0","68.5"],"capture":["46.0"],"passive":["46.0"],"native":["46.0"],"推荐的做法是将异步组件和":["47.1"],"webpack":["47.1"],"对象写法":["47.2"],"asynccomponernt":["47.2"],"需要加载的组件":["47.2"],"应该是一个":["47.2"],"组件加载完毕后调用":["47.3"],"多次调用":["48.1"],"会被合并":["48.1"],"中的内置组件":["49.1"],"能在组件切换过程中会缓存组件的实例":["49.1"],"也可以通过meta属性指定哪些页面需要缓存":["49.2"],"哪些不要":["49.2"],"excluded":["49.3"],"same":["49.3"],"may":["49.3"],"get":["49.3"],"getdata":["49.4"],"获取数据":["49.4"],"也允许用户注册自定义指令来对":["50.1"],"但是可能发生在其子":["50.2"],"更新之前":["50.2"],"指令的值可能发生了改变":["50.2"],"isshow":["50.3"],"显示面板":["50.3"],"directive":["50.3"],"clickoutside":["50.3"],"el":["50.3"],"的关系":["51.0"],"代理模式":["51.0"],"代理模式给某一个对象提供一个代理对象":["51.0"],"并有代理对象控制对原对象的引用":["51.0"],"装饰模式":["51.0"],"的选取":["52.0"],"控制组件力粒度":["52.0"],"采用组件级更新":["52.0"],"采用函数式组件":["52.0"],"图片资源的压缩":["53.0"],"雪碧图":["53.0"],"对小图片进行":["53.0"],"base64":["53.0"],"减少":["53.0"],"跨域资源共享":["54.0"],"有服务端设置":["54.0"],"允许指定的客户端访问服务器":["54.0"],"构建工具中设置反向代理":["54.0"],"token":["55.0"],"设置响应拦截":["55.0"],"对响应的状态码或者数据进行格式化":["55.0"],"页面权限":["56.1"],"前端配置的路由分为两部分":["56.1"],"通用路由配置":["56.1"],"需要权限的路由配置":["56.1"],"在权限路由中增加访问权限":["56.1"],"beforerouteenter":["57.0"],"beforeresolve":["57.0"],"popstate":["58.0"],"hashchange":["58.0"],"兼容性好但是不够美观":["58.0"],"服务端无法获取":["58.0"],"history":["59.0"],"模式刷新时会向服务器发起请求":["59.0"],"应用程序开发的":["60.2"],"状态管理模式":["60.2"],"dispatch":["60.3"],"action":["60.3"],"数据不够扁平化":["60.4"],"调用的时候过长":["60.4"],"更改状态":["60.4"],"mutation":["60.4"],"创建了一个":["60.5"],"中状态变化":["61.0"],"采用":["62.0"],"操作":["63.0"],"中也可以调用":["63.0"],"mutations":["64.0"],"actions":["64.0"],"getters":["64.0"],"moduleb":["64.0"],"api":["65.0","69.4"],"都在":["65.0"],"对象上公开":["65.0"],"对":["65.0"],"tree":["65.0"],"源码改造渲染方式":["66.0"],"扩展更方便":["66.0"],"的时候使用":["66.0"],"来进行数据的劫持":["66.0"],"需要对属性进行重写添加":["66.0"],"getter":["66.0"],"及":["66.0"],"父组件":["67.1"],"err":["67.2"],"dynamicchildren":["68.1"],"patchflag":["68.1"],"此时生成的虚拟节点多出一个dynamicchildren":["68.1"],"这个就是":["68.1"],"可以收集所有后代动态节点":["68.1"],"这样后续更新时可以直接跳过静态节点":["68.1"],"实现靶向更新":["68.1"],"setup":["68.5"],"核心":["69.1"],"有":["69.1"],"类型":["69.3","70.1"],"语句":["69.3"],"用于在":["69.4"],"样式":["69.5"],"描述处理元素":["69.5"],"样式的接口":["69.5"],"遍历和范围":["69.5"],"location":["69.6"],"提供浏览器加载页面的详尽信息":["69.6"],"screen":["69.6"],"或":["70.1","78.4"],"vbscript":["70.1"],"大多数浏览器都会忽略这个值":["70.1"],"不应该再使用它":["70.1"],"表示包含要指向的代码的外部文件":["70.1"],"代替":["70.1"],"表示代码中脚本语言的内容类型":["70.1"],"也成":["70.1"],"mime":["70.1"],"按照惯例":["70.1"],"routemeta":["72.0"],"将以下元素渲染成":["73.1"],"span":["73.2","77.4"],"的子元素中":["73.3"],"且默认值为":["73.5"],"active":["73.9","73.10","77.14","77.15"],"mybutton":["73.12"],"disabled":["73.12"],"template":["73.15","76.5","77.4","81.1"],"do":["73.15"],"click":["74.1","74.2","78.4","79.1","79.2"],"dec":["74.5"],"减":["74.5"],"at":["74.9","74.10"],"component":["75.1","75.2","80.1","80.2"],"plusone":["75.9","75.10"],"ref":["75.12","75.13"],"eleref":["75.12","75.13"],"这意味着你在侦听器回调中访问的":["75.14"],"将是被":["75.14"],"更新之前的状态":["75.14"],"count":["75.16","75.17","81.2"],"这通常在对浅引用的内部值进行深度变更后使用":["75.18"],"doubled":["75.23","75.24"],"调用":["75.25"],"可以将":["76.3"],"p":["76.5"],"转换为局部作用域":["76.7"],"去掉":["76.7"],"使它从不更新":["77.5"],"更新元素的":["77.6"],"innerhtml":["77.6"],"state":["77.8","77.9","84.5","84.9","84.10"],"it":["77.11","77.12"],"style":["77.14","77.15"],"vatltexue":["77.18"],"click2":["78.1"],"原生阻止冒泡":["78.2"],"e":["78.2"],"stoppropagation":["78.2"],"添加按键修饰符让即使":["78.4"],"alt":["78.4","87.7"],"被一同按下时也会触发":["78.4"],"被按下的时候才触发":["78.5"],"increment":["79.1","79.2"],"创建的代理返回其原始对象":["81.3"],"你能实现它吗":["82.1"],"increase":["82.2"],"app":["83.1"],"plugin":["84.2"],"usestore":["84.3","84.8"],"那么你可以将一个对象传递给":["84.4"],"persist":["84.4","84.5","84.9","84.10"],"属性来配置持久化":["84.4"],"somestate":["84.5","84.9","84.10"],"两个方法":["84.6"],"import":["84.6"],"definestore":["84.6"],"pinia":["84.6"],"me":["84.7"],"saved":["84.7"],"notme":["84.7"],"savemetoo":["84.7"],"zipson":["84.8"],"ctx":["84.9","84.10"],"持久化":["84.11"],"恢复":["84.11"],"yarn":["85.1"],"createsvgiconsplugin":["85.2"],"use":["85.3"],"virtual":["85.4"],"icons":["85.4"],"register":["85.4"],"usesvgicon":["85.5"],"option":["87.0"],"配置":["87.0"],"风格的":["87.0"],"methods":["87.1"],"computed":["87.1"],"中的":["87.1"],"description":["87.3"],"filepath":["87.3"],"ts":["87.3"],"md":["87.3"],"属性是响应式的":["87.4"],"注意点":["87.4"],"中操作数据需要":["87.4"],"源对象":["87.5"],"返回值":["87.5"],"一个":["87.5"],"对象类型":["87.6"],"若":["87.6"],"a8":["87.7"],"a1":["87.7"],"a5":["87.7"],"85value":["87.7"],"png":["87.7"],"自动补充value":["87.7"],"年龄":["87.8"],"性别":["87.8"]},{"0":["3.2","13.36","71.36"],"1":["5.27","11.39","26.0","68.4","73.16"],"2":["5.60","7.4","13.34","13.80","26.0","68.1","69.1","71.34","71.80"],"3":["0.11","5.7","5.53","5.64","7.2","68.1"],"4":["0.22","4.5","4.13","5.11","68.1"],"5":["7.8","13.24","13.60","13.63","13.86","13.90","57.0","71.24","71.60","71.63","71.86","71.90"],"6":["13.60","69.6","71.60"],"8":["13.34","71.34"],"10":["4.24","5.54","13.33","13.83","71.33","71.83"],"17":["11.44"],"35":["11.44"],"43":["9.0"],"50":["87.7"],"60":["11.17"],"100":["5.10"],"262":["13.26","71.26"],"400":["67.3"],"1500":["11.128"],"3269":["49.3"],"10000":["11.128"],"如何转换盒子模型":["0.1"],"box":["0.1"],"sizing":["0.1"],"行数":["0.2"],"行高":["0.2"],"文字系列":["0.3"],"font":["0.3"],"size":["0.3"],"color":["0.3"],"line":["0.3","13.39","71.39"],"权重":["0.4"],"0010":["0.4"],"第四":["0.4"],"此元素会作为列表展示":["0.7"],"https":["0.7"],"www":["0.7"],"w3school":["0.7"],"none":["0.8","3.6"],"overflow":["0.8"],"visible":["0.8"],"display":["0.8"],"px":["0.10"],"是相对于第一个有":["0.11"],"的父元素定位的":["0.11"],"如果有":["0.11"],"left":["0.11","46.0"],"l":["0.12"],"左":["0.12"],"这是由":["0.13"],"nicolas":["0.13"],"gallagher":["0.13"],"和":["0.13","11.44","60.4","70.1"],"请求的次数":["0.14"],"提升了性能":["0.14"],"但是重绘不一定会造成回流":["0.15"],"产生回流的情况":["0.15"],"改变元素的位置":["0.15"],"表示蓝色":["0.16"],"取值可以在正整数或者百分数":["0.16"],"a":["0.16","4.16","11.22","11.31","11.39","13.44","22.0","64.0","71.44","78.4"],"表示透明度":["0.16"],"在元素之前":["0.17"],"webkit":["0.18","3.4","3.6"],"transform":["0.18"],"是针对于根":["0.19"],"html":["0.19","48.1","69.4"],"jpg":["0.21"],"meida":["0.21"],"图进行等比缩放":["0.22"],"缩放成和电脑一样的尺寸":["0.22"],"换":["0.22"],"的电脑":["0.22"],"移动端的设计图":["0.22"],"把某元素转化成行内元素":["2.1"],"不独占一行":["2.1"],"不能设置宽高":["2.1"],"题外话":["2.3"],"为了符合":["2.3"],"css3":["2.3"],"的规范":["2.3"],"标签尽量少用":["2.3"],"改用":["2.3"],"就可以了":["2.3"],"所以前端在写":["2.4"],"标签的时候":["2.4"],"banner":["2.5"],"等中大图片":["2.5"],"一般是做动图的":["2.5"],"html5":["2.6"],"标签的":["2.6"],"解决":["2.6"],"autocapitalize":["3.1"],"rgba":["3.2"],"长按时下载图片":["3.3"],"被引用或者拷贝时":["4.1"],"会创建一个完全相等的变量":["4.1"],"引用类型存储在堆内存中":["4.1"],"date":["4.2"],"array":["4.2","5.21","5.24","5.51","5.52"],"document":["4.2","5.50"],"htmldocument":["4.2"],"window":["4.2"],"gettype":["4.2"],"obj":["4.2","4.5","4.16","5.52"],"type":["4.2","77.8","77.9","77.17","77.18"],"function":["4.3","5.13","5.39","11.30","11.49","50.3"],"this":["4.3","5.36","11.43"],"return":["4.3","5.30","7.15","10.1","11.36","11.77","43.0","84.3"],"注意这里a又可以等于1":["4.3"],"console":["4.3","5.43","5.44","5.45","5.61","5.62","11.17","11.49","13.26","13.32","13.66","14.1","67.2","71.26","71.32","71.66","84.9","84.10"],"log":["4.3","5.14","5.21","5.22","5.24","5.34","5.62","11.49","13.32","14.1","71.32","84.9","84.10"],"f规则object隐式转换":["4.3"],"注":["4.3","11.13"],"但是执行过3遍之后":["4.3"],"再重新执行a一3或之前的数字就是false":["4.3"],"因为valuei已经加上去了":["4.3"],"这里需要注意一下":["4.3"],"号操作符":["4.3"],"不仅可以用作数字相加":["4.3"],"还可以用作字符串拼接":["4.3"],"如果其中有一个是字符串":["4.3"],"另外一个是":["4.3"],"或布尔型":["4.3"],"则调用":["4.3"],"方法进行字符串拼接":["4.3"],"如果是纯对象":["4.3"],"数组":["4.3"],"正则等":["4.3"],"扩展运算符方式":["4.5"],"利用":["4.5"],"的扩展预算符":["4.5"],"在构造对象的同时完成浅拷贝的功能":["4.5"],"扩展预算符的语法为":["4.5"],"cloneobj":["4.5"],"concat":["4.5"],"拷贝数组":["4.5"],"数组的":["4.5"],"方法其实也是浅拷贝":["4.5"],"slice":["4.5"],"方法仅仅针对数组类型":["4.5"],"get":["4.6"],"alldesc":["4.6"],"遍历传入参数所有键的特性":["4.6"],"getprototypeof":["4.6"],"继承原型链":["4.6"],"set":["4.6","66.0","75.29"],"of":["4.6","10.3"],"clone":["4.8"],"original":["4.8"],"getfriends":["4.8"],"20240117094316990":["4.8"],"六":["4.8"],"寄生组合式继承":["4.8"],"在前面这几种继承方式的优缺点基础上进行改造":["4.8"],"得出了寄生组合式的继承方法":["4.8"],"这也是所有继承方式里面相对最优的继承方式":["4.8"],"parent":["4.8"],"这里改用":["4.8"],"就可以减少组合继承中多进行一次构造的过程":["4.8"],"对象上的个方法":["4.9"],"调用这三个方法的必须是一个函数":["4.9"],"func":["4.9"],"thisarg":["4.9"],"param1":["4.9"],"param2":["4.9"],"bind":["4.9"],"共同点":["4.9"],"闭包其实就是一个可以访问其他函数内部变量的函数":["4.11"],"通常情况下":["4.11"],"直到找到该变量或者不存在父级作用域中":["4.12"],"iife":["4.13"],"立即执行函数":["4.13"],"方法是将一个":["4.14"],"表示加工函数执行时":["4.16"],"的值":["4.16","13.47","71.47"],"js":["4.16","45.0"],"var":["4.16"],"b":["4.16","5.61"],"c":["4.16","11.19","43.0"],"length":["4.16","5.39","14.1","73.16"],"foreach":["4.18","5.33"],"every":["4.18"],"some":["4.18"],"filter":["4.18"],"map":["4.18"],"调用":["4.19","34.3"],"es6":["4.19"],"中的":["4.19"],"flat":["4.19"],"直接调用":["4.19"],"方法":["4.19","5.11","11.34","34.3"],"可以直接实现数组扁平化":["4.19"],"语法":["4.19","13.5","71.5"],"depth":["4.19"],"表示展开深度":["4.19"],"其实大多数时候我们对此并未建立形象的认知":["4.21"],"归并排序":["4.23"],"归并排序是建立在归并操作上的一种有效的排序算法":["4.23"],"该算法是采用分治法的一个非常典型的应用":["4.23"],"将已有序的子序列合并":["4.23"],"得到完全有序的序列":["4.23"],"先使每个子序列有序":["4.23"],"再使子序列段间有序":["4.23"],"若将两个有序表合并成一个有序表":["4.23"],"称为":["4.23"],"二路归并":["4.23"],"归并排序是一种稳定的排序方法":["4.23"],"归并排序的性能不收输入数据的影响":["4.23"],"为排序个数":["4.24"],"当":["4.24"],"时":["4.24","11.60","13.38","71.38"],"采用插入排序":["4.24"],"脚本":["5.1"],"会阻塞":["5.1"],"typeof":["5.2","13.2","13.25","71.2","71.25"],"结果是":["5.2"],"就是为了填补之前的坑":["5.3"],"具体区别":["5.3"],"是一个表示":["5.3"],"无":["5.3","33.2"],"的对象":["5.3"],"方法通常由":["5.4"],"javascript":["5.4"],"在后台自动调用":["5.4"],"then":["5.5"],"settimeout":["5.5"],"要执行宏任务的前提是清空了所有的微任务":["5.5"],"有变量提升的":["5.6"],"变量悬挂声明":["5.6"],"除了函数外没有块级作用域":["5.7"],"else":["5.9","11.49","11.74"],"对象如何找属性":["5.11"],"查找规则":["5.11"],"new":["5.18","5.43","5.45","5.64","7.15","11.39","36.0"],"tostring":["5.23","5.25"],"call":["5.23"],"功能有插入":["5.28"],"删除":["5.28"],"item":["5.33"],"index":["5.33"],"push":["5.33"],"world":["5.34","11.38"],"指向":["5.36"],"了函数的自由变量":["5.38"],"onclick":["5.40","73.12","73.13"],"alert":["5.40","44.2"],"对象原型中找":["5.41"],"构造函数原型中找":["5.41"],"对象上一层原型中找":["5.41"],"o":["5.43","5.46"],"let":["5.46","5.63","11.22","11.23","11.39","13.22","13.32","71.22","71.32"],"apply":["5.48","34.3"],"参数不同":["5.49"],"第二个参数是数组":["5.49"],"getelementbyid":["5.50"],"at":["5.51","22.0"],"ad82a40509c5b5b4680d4299c8f08d6c6d31af3c":["5.51"],"newobj":["5.52"],"isarray":["5.52"],"for":["5.52","13.7","33.1","68.3","71.7"],"const":["5.52","84.2","84.6","85.4"],"key":["5.52"],"in":["5.52"],"有过期时间":["5.53"],"可以设置过期时间":["5.53"],"把时间调整到之前的时间":["5.53"],"就过期了":["5.53"],"声明常量":["5.55"],"声明的变量可以再次赋值":["5.55"],"num":["5.57","13.90","71.90"],"obj1":["5.63"],"不能当做构造函数":["5.64"],"rejected":["5.65"],"返回整体":["5.66"],"true":["5.67","13.3","13.33","71.3","71.33"],"父组件引入了子组件":["7.2"],"那么先执行父的前":["7.2"],"个生命周期":["7.2"],"再执行子组件的":["7.2"],"中没有":["7.3"],"data":["7.3"],"xxx":["7.4"],"等等":["7.4"],"beforemount":["7.5"],"beforecreated":["7.6"],"第一次进入这个组件会执行":["7.8"],"是否相等":["7.9"],"如果不相同发起请求":["7.9"],"孙子":["7.11"],"子组件不能直接修改父组件的数据":["7.11"],"子组件直接使用父组件的数据":["7.11"],"vue3":["7.13","38.0","39.2","87.0"],"description":["9.0"],"filepath":["9.0"],"extensions":["10.0"],"msg":["10.1","73.2"],"highlighted":["10.1"],"output":["10.1"],"即可":["11.2"],"image":["11.2","11.62"],"png":["11.2"],"选择安装路径":["11.2"],"完成后点击":["11.2"],"浏览配置汇总页":["11.3"],"确认无误后点击":["11.3"],"等待下载":["11.3"],"下载完成后":["11.3"],"包名":["11.4"],"通常为公司域名倒置":["11.4"],"save":["11.4"],"location":["11.4"],"项目目录":["11.4"],"模拟器和真机运行":["11.5"],"ets":["11.6","11.70","11.73","11.76","11.99","11.106","11.115","11.124","11.130","11.133","11.139"],"然后点击ide右侧的":["11.6"],"系统镜像下载完毕后":["11.7"],"配置模拟器":["11.7"],"可选":["11.7"],"至此模拟器安装完毕":["11.7"],"回到ide":["11.8"],"在右上角的设备列表中选择连接的手机":["11.8"],"默认已选中":["11.8"],"最后点击运行按钮":["11.8"],"即可将项目运行到真机中":["11.8"],"首次运行会提示缺少签名信息":["11.8"],"点击":["11.8"],"open":["11.8"],"值得注意的是":["11.9"],"本身也是由另一门语言":["11.9"],"typescriptlang":["11.12"],"org":["11.12"],"便可在终端执行以下命令来安装ts":["11.13"],"node了":["11.13"],"npm":["11.13"],"install":["11.13"],"g":["11.13"],"完成后需要重新启动vscode":["11.13"],"另其重新加载环境变量和相关依赖":["11.13"],"img":["11.15","11.61","11.83","11.93"],"而常量在赋值后便不能再修改":["11.16"],"typescript":["11.16","11.22","11.23","11.58","11.117"],"进行初始化":["11.23"],"声明函数的基础语法如下":["11.25"],"类型":["11.28"],"print":["11.28"],"test":["11.30"],"sum":["11.31"],"number":["11.31","13.83","71.83"],"两者用":["11.32"],"符号连接":["11.32"],"它定义了对象的属性":["11.34"],"数据":["11.34"],"和行为":["11.34"],"通过类可以创建多个具有相似结构和行为的对象":["11.34"],"introduce":["11.36"],"hello":["11.36","11.38","76.5"],"i":["11.36"],"对象方法的调用":["11.37"],"对象创建后":["11.37"],"xiaoming":["11.39"],"三年二班":["11.39"],"student":["11.40"],"extends":["11.40"],"接口通常会作为一种契约或规范让类":["11.42"],"class":["11.42","68.1","87.3"],"p2":["11.44"],"lisi":["11.44","11.77"],"最后分别调用":["11.44"],"的":["11.44","32.1","47.1","75.14"],"这样改造完之后":["11.45"],"就可以很容易的在不改变现有代码的情况下":["11.45"],"支持新的支付方式了":["11.45"],"比如现在需要支持":["11.45"],"那我们就可以创建":["11.45"],"这个类":["11.45"],"并实现":["11.45"],"implement":["11.45"],"此时就可以声明一个接口来描述该对象的类型":["11.46"],"如下":["11.46","11.58"],"interface":["11.46"],"右":["11.48"],"或季节":["11.48"],"春":["11.48"],"if":["11.49","49.2"],"向上移动":["11.49"],"函数":["11.52","11.82","13.44","28.0","71.44"],"类等":["11.52"],"在该模块外部是不可见的":["11.52"],"导入":["11.53"],"导入须使用":["11.53"],"import":["11.53","11.55","84.4"],"创建模块对象":["11.54"],"上述导入重命名的方式能够很好的解决命名冲突的问题":["11.54"],"但是当冲突内容较多时":["11.54"],"这种写法会比较冗长":["11.54"],"除了导入重命名外":["11.54"],"hellofroma":["11.55"],"from":["11.55","84.4"],"由于默认导入时无需关注导入项的名称":["11.55"],"主要扩展了":["11.56"],"声明式ui开发":["11.56"],"下面通过一个具体案例来学习这种开发范式":["11.57"],"假如现在要实现如下界面":["11.57"],"false":["11.58","11.107"],"在当前案例中":["11.59"],"我们就将":["11.60"],"状态数据驱动界面更新":["11.61"],"button":["11.62","11.98","87.8"],"案例的最终效果如下图所示":["11.64"],"dark":["11.65"],"row":["11.65"],"中添加子组件":["11.67"],"若不支持子组件":["11.67"],"则不需要写":["11.67"],"属性方法":["11.67"],"属性方法用于配置组件的样式和其他属性":["11.67"],"可以在组件声明的末尾进行链式调用":["11.67"],"各组件支持的属性可查看":["11.67"],"使用自定义组件":["11.68"],"用于修改或扩展其原有的行为":["11.69"],"在学完自定义组件的语法之后":["11.69"],"我们会发现前文案例中的每个页面实际上都是一个自定义组件":["11.69"],"但是和自定义组件的语法相比":["11.69"],"前边的每个案例还会多出一个":["11.69"],"entry":["11.69","11.84","11.92","11.93","11.99","11.100","11.110","11.124"],"main":["11.70","11.73","11.76","11.92","11.99","11.100","11.106","11.115","11.124","11.133"],"pages":["11.70","11.76","11.106","11.115","11.130","11.133","11.139"],"条件渲染":["11.72"],"src":["11.73","11.92","11.93","11.99","11.100","11.110","11.124"],"循环渲染":["11.75"],"json":["11.77","11.82"],"stringify":["11.77"],"在某些情况下默认的key生成函数":["11.77"],"会导致界面渲染效率低下":["11.77"],"此时可考虑通过keygenerator函数自定义生成逻辑":["11.77"],"例如如下场景":["11.77"],"状态变量数组定义如下":["11.77"],"zhangsan":["11.77"],"wangwu":["11.77"],"foreach语句如下":["11.77"],"column":["11.77"],"为图片组件":["11.79"],"以及":["11.80"],"两个目录下图片的使用方式有所不同":["11.80"],"下面逐一介绍":["11.80"],"media目录":["11.80"],"该目录下的资源":["11.80"],"需要使用":["11.80"],"r":["11.80"],"app":["11.80","11.87","49.2"],"filename":["11.80"],"的方式引用":["11.80"],"无需指定具体版本":["11.80"],"系统会自动根据所处环境选择相应版本":["11.80"],"例如上图中的img":["11.80"],"png图片":["11.80"],"可通过":["11.80"],"引用":["11.80"],"需要注意的是":["11.80"],"的返回值即为":["11.80"],"同样需要使用":["11.82"],"要了解具体语法":["11.82"],"需要先熟悉element目录下的文件内容":["11.82"],"前文提到过":["11.82"],"element目录中可保存各种类型的数值":["11.82"],"且每种类型的值分别定义在一个json文件中":["11.82"],"文件中的内容为键值对":["11.82"],"name":["11.82","87.3"],"value":["11.82"],"的形式":["11.82"],"具体内容如下":["11.82"],"module":["11.82"],"desc":["11.82"],"模块描述":["11.82"],"使得图片完全显示在显示区域内":["11.83"],"auto":["11.83"],"自适应显示":["11.83"],"各选项的效果如下图所示":["11.83"],"相关案例见":["11.83","11.84","11.89","11.91","11.92","11.93","11.107","11.110","11.118"],"低等质量插值":["11.84"],"各选项效果如下图所示":["11.84"],"demos":["11.84","11.89","11.92","11.93","11.100","11.107","11.110","11.118"],"为文本组件":["11.86"],"此时我们便可通过如下方式引用并显示":["11.87"],"的内容":["11.87"],"作为单位":["11.89"],"resource类型":["11.89","11.91"],"类型参数用于引用resources下的element目录中定义的数值":["11.89"],"字体非常粗":["11.90"],"string类型":["11.90"],"类型的参数仅支持":["11.90"],"类型和":["11.90"],"类型参数的字符串形式":["11.90"],"例如例如":["11.90"],"具体写法为":["11.91"],"0x008000":["11.91"],"类型的参数用于应用resources下的element目录中定义的值":["11.91"],"各选项效果如下":["11.93"],"为按钮组件":["11.95"],"表示是否开启点击效果":["11.96"],"点击效果如下":["11.96"],"子组件会作为按钮上显示的内容":["11.96"],"可以是图片":["11.96"],"文字等":["11.96"],"这种方式下":["11.96"],"组件就不在需要":["11.96"],"绿色按钮":["11.98"],"一般用于两种状态之间的切换":["11.102"],"例如下图中的蓝牙开关":["11.102"],"组件的状态":["11.103"],"例如":["11.103"],"组件在选中":["11.105"],"或打开":["11.105"],"从打开切换为关闭时":["11.107"],"为文本输入组件":["11.109"],"normal":["11.112"],"基本输入模式":["11.112"],"方法设置光标的颜色":["11.113"],"用于设置字体":["11.114"],"包括字体大小":["11.114"],"字体粗细等":["11.114"],"callback":["11.117"],"void":["11.118"],"为进度条组件":["11.120"],"月食样式":["11.121"],"scalering":["11.121"],"环形有刻度样式":["11.121"],"capsule":["11.121"],"的刻度线的宽度":["11.123"],"2vp":["11.123"],"arkts提供了多种内置的弹窗供开发者使用":["11.125"],"除此之外还支持自定义弹窗":["11.125"],"一般会在短暂停留后自动消失":["11.127"],"属性用于设置提示信息":["11.128"],"属性用于设置提示信息停留时长":["11.128"],"单位为毫秒":["11.128"],"取值范围是":["11.128"],"component":["11.130","11.133","11.139"],"show":["11.131","11.134","23.1"],"datepickerdialog":["11.136","11.137"],"日期滑动选择期弹窗":["11.136","11.137"],"不能作为函数名":["13.2","71.2"],"关键字":["13.3","69.3","71.3"],"保留字":["13.3","69.3","71.3"],"以它们的反向组合":["13.4","71.4"],"结尾":["13.4","71.4"],"也可以单独指定一个函数在严格模式下执行":["13.5","71.5"],"continue":["13.7","71.7"],"switch":["13.7","71.7"],"yield":["13.7","71.7"],"按照规定":["13.8","71.8"],"public":["13.10","71.10"],"hi":["13.13","71.13"],"就变成了全局变量":["13.14","71.14"],"只要调用了一次函数":["13.14","71.14"],"就会定义这个变量":["13.14","71.14"],"并且可以在函数外部访问到":["13.14","71.14"],"虽然可以通过省略":["13.14","71.14"],"操作符定义全局变量":["13.14","71.14"],"但不推荐这么做":["13.14","71.14"],"在局部作用域中定义的全局变量基恩男维护":["13.14","71.14"],"也会造成困惑":["13.14","71.14"],"这是因为不能一下子断定省略":["13.14","71.14"],"也就是把所有变量声明都拉到函数作用域的顶部":["13.15","71.15"],"此外反复多次使用":["13.15","71.15"],"声明同一个变量也没有问题":["13.15","71.15"],"没有定义":["13.16","71.16"],"在这里":["13.16","71.16"],"变量之所以不能在":["13.16","71.16"],"块外部被引用":["13.16","71.16"],"是因为它的作用域仅限于该块内部":["13.16","71.16"],"before":["13.17","71.17"],"initialization":["13.17","71.17"],"age":["13.18","71.18","75.12","75.13"],"同时也就不可能在没有声明的情况下去声明它":["13.19","71.19"],"变量引用的是一个对象":["13.21","71.21"],"那么修改对象内部的属性并不违反":["13.21","71.21"],"的限制":["13.21","71.21"],"person":["13.21","71.21","87.3"],"string":["13.23","13.42","71.23","71.42","75.29"],"symbol":["13.23","71.23"],"object":["13.24","13.28","13.44","71.24","71.28","71.44"],"表示值为对象":["13.24","71.24"],"而不是函数":["13.24","71.24"],"对未声明的变量调用":["13.25","71.25"],"delete":["13.25","66.0","71.25"],"也不会报错":["13.25","71.25"],"但是这个操作没什么用":["13.25","71.25"],"实际上在严格模式下会抛出错误":["13.25","71.25"],"因此在":["13.26","71.26"],"ecma":["13.26","71.26"],"将他们定义为表面上相等":["13.26","71.26"],"如":["13.26","71.26"],"是区分大小写的":["13.27","71.27"],"nan":["13.28","13.74","13.75","71.28","71.74","71.75"],"任意对象":["13.28","71.28"],"在某些语言中也叫双精度值":["13.29","71.29"],"0x":["13.30","71.30"],"区分大小写":["13.30","71.30"],"然后是十六进制数字":["13.30","71.30"],"对于非常大或者非常小的数值":["13.31","71.31"],"浮点值可以用科学计数法来表示":["13.31","71.31"],"科学计数法用于表示一个应该乘以":["13.31","71.31"],"的给定次幂的数值":["13.31","71.31"],"中科学计数法的格式要求是一个数值":["13.31","71.31"],"整数或者浮点数":["13.31","71.31"],"result":["13.32","71.32"],"后":["13.33","71.33"],"该函数会尝试把它转换为数值":["13.33","71.33"],"某些非数值的值可以直接转换成数值":["13.33","71.33"],"如字符串":["13.33","71.33"],"或布尔值":["13.33","71.33"],"任何不能转换为数值的值都会导致这个函数返回":["13.33","71.33"],"按二进制解析":["13.34","71.34"],"按八进制解析":["13.34","71.34"],"按十进制解析":["13.34","71.34"],"按十六进制解析":["13.34","71.34"],"函数的工作方式和":["13.34","71.34"],"函数相似":["13.34","71.34"],"都是从位置":["13.34","71.34"],"开始检测每个字符":["13.34","71.34"],"同样":["13.34","71.34"],"单引号":["13.35","71.35"],"或反引号":["13.35","71.35"],"是十六进制的":["13.36","71.36"],"x41":["13.36","71.36"],"等于":["13.36","71.36"],"然后将包含新值的另一个字符串保存到该变量":["13.37","71.37"],"可以传入一个参数作为底数":["13.38","71.38"],"first":["13.39","71.39"],"title":["13.40","44.1","71.40"],"aaa":["13.40","71.40"],"接收到的参数依次是原始字符串数组和对每个表达式求值的结果":["13.41","71.41"],"且符号实例是唯一":["13.43","71.43"],"不可变的":["13.43","71.43"],"not":["13.44","71.44"],"constructor":["13.44","71.44"],"如果你确实想使用符号包装对象":["13.44","71.44"],"可以借用":["13.44","71.44"],"则返回":["13.45","13.74","13.75","71.45","71.74","71.75"],"undefined":["13.45","13.83","71.45","71.83"],"创建全局符号":["13.45","71.45"],"s":["13.45","71.45"],"defineproperties":["13.46","71.46"],"定义的属性":["13.46","71.46"],"来改变":["13.47","71.47"],"在迭代该对象时的行为":["13.47","71.47"],"tolocalstring":["13.60","71.60"],"返回对象的字符串表示":["13.60","71.60"],"该字符串反应对象所在的本地化执行环境":["13.60","71.60"],"中最简单的操作符":["13.62","71.62"],"对于浮点数":["13.63","71.63"],"加":["13.63","71.63"],"主要用于把数值变成负值":["13.64","71.64"],"如把":["13.64","71.64"],"就是每个":["13.65","71.65"],"都变成":["13.65","71.65"],"每个":["13.65","71.65"],"二进制11111111111111111111111111100110":["13.66","71.66"],"正或负":["13.70","71.70"],"对正数来说":["13.71","71.71"],"这跟有符号右移效果相同":["13.71","71.71"],"但对负数来说":["13.71","71.71"],"infinity":["13.73","13.79","71.73","71.79"],"如果操作数是":["13.73","71.73"],"null":["13.73","13.75","13.83","71.73","71.75","71.83"],"如果两个操作数都是":["13.75","71.75"],"除法和取模":["13.76","71.76"],"的有限数值":["13.77","71.77"],"则根据第二个操作数的符号返回":["13.77","13.78","71.77","71.78"],"除以任何数值":["13.78","71.78"],"如果是":["13.79","71.79"],"除以":["13.79","71.79"],"有一个是字符串的规则":["13.82","71.82"],"如果两个操作数都是字符串":["13.82","71.82"],"则将第二个字符串拼接到第一个字符串后面":["13.82","71.82"],"如果只有一个操作数是字符串":["13.82","71.82"],"则将另一个操作数转换为字符串":["13.82","71.82"],"如果有任一操作数是字符串":["13.83","71.83"],"布尔值":["13.83","71.83"],"或":["13.83","71.83"],"则先在后台使用":["13.83","71.83"],"取得结果后再根据前面的规则执行比较":["13.84","71.84"],"如果没有":["13.84","71.84"],"操作符":["13.84","71.84"],"否则":["13.86","71.86"],"两者不不相等":["13.86","71.86"],"特殊情况":["13.86","71.86"],"表达式":["13.86","71.86"],"结果":["13.86","71.86"],"不全等操作符用一个叹号和两个等于号":["13.87","71.87"],"减后赋值":["13.89","71.89"],"左移后赋值":["13.89","71.89"],"的核心库只关注视图层":["14.0"],"关注了过程":["14.1"],"隐藏":["14.2"],"20240313104458974":["14.2"],"虽然没有完成遵循":["14.2"],"就是一个对象":["14.3"],"用来描述真实":["14.3"],"缺点就是虚拟":["14.4"],"编写麻烦":["14.4"],"测试性":["14.5"],"每个页面必须重新加载js":["15.1"],"css等相关资源":["15.1"],"服务端返回完整的":["15.1"],"同时数据也可以在后端进行获取一并返回":["15.1"],"模板引擎":["15.1"],"相对容易":["15.2"],"相对复杂":["15.2"],"用户体验好":["15.2"],"快":["15.2"],"内容的改变不需要重新加载整个页面":["15.2"],"仅适合静态页面网站":["15.3"],"变化率不高的网站":["15.3"],"ssr":["15.3"],"层的操作效率高":["16.1"],"可以将":["16.1"],"操作转化成对象操作":["16.1"],"最终通过":["16.1"],"返回的对象就是虚拟":["16.2"],"dom":["16.2"],"做":["16.3"],"操作":["16.3"],"可重用":["17.0"],"可组合":["17.0"],"组件化开发能大幅提高应用的开发效率":["17.0"],"那更新的时候整个页面都要重新更新":["17.1"],"如果过分的拆分组件会导致":["17.1"],"这样会导致大量":["18.0"],"只会劫持已经存在的属性":["19.1"],"数组则是通过重写数组的方法来实现":["19.1"],"多层对象是通过递归来实现劫持":["19.1"],"来进行劫持":["19.2"],"浪费性能":["19.2"],"对所有索引进行劫持会造成性能浪费":["19.2"],"handler":["19.3","50.3"],"temp":["19.3"],"unshift":["20.1"],"sort":["20.1"],"depend":["21.1"],"当属性发生修改时会触发":["21.1"],"此时会触发依赖收集":["21.2"],"track":["21.2"],"vmcount":["22.0"],"avoid":["22.0"],"adding":["22.0"],"properties":["22.0"],"to":["22.0"],"instance":["22.0"],"its":["22.0"],"root":["22.0"],"runtime":["22.0"],"declare":["22.0"],"it":["22.0"],"只是切换当前":["23.1"],"如果页面逻辑在第一次加载的时候已经被确认后续不会频繁更改则采用":["23.3"],"effect":["24.0"],"计算属性可以简化模板中的复杂表达式":["24.1"],"vue3提供了":["24.2"],"oncleanup":["24.2"],"通常用于处理单值的响应式":["25.1"],"重新运行":["26.0"],"将静态语法做静态标记":["27.0"],"markup":["27.0"],"diff":["27.0"],"来做优化":["27.0"],"静态节点跳过":["27.0"],"最终就拿到了":["28.0"],"内部挂在的时候会产生一个":["28.0"],"watcher":["28.0"],"会调用":["28.0"],"函数会触发依赖收集":["28.0"],"eventbus":["29.0"],"或者使用状态管理工具":["29.0"],"中解析时":["30.0"],"先解析":["30.0"],"再解析":["30.0"],"重新渲染和打补丁之前":["31.1"],"此时修改数据不会再次触发更新方法":["31.1"],"updated":["31.1"],"由于数据更改导致的虚拟":["31.1"],"重新渲染和打补丁":["31.1"],"在这之后会调用该钩子":["31.1"],"beforedestroy":["31.1"],"缓存的组件停用时调用":["31.2"],"errorcaptured":["31.2"],"捕获一个来自子孙组件的错误时被调用":["31.2"],"rendertracked":["31.2"],"dev":["31.2"],"调试钩子":["31.2"],"响应式依赖被收集时调用":["31.2"],"算法是平级比较":["32.1"],"老的儿子是一个列表":["32.2"],"新的儿子也是一个列表":["32.2"],"updatechildren":["32.2"],"列表优化比较":["32.2"],"头头":["32.2"],"尾尾":["32.2"],"的作用和原理":["33.0"],"v":["33.1","49.2"],"渲染的元素列表时":["33.1"],"他默认使用":["33.1"],"就地更新":["33.1"],"会导致更新的时候出问题":["33.2"],"方法调用时":["34.1"],"会将":["34.1"],"实例方法":["34.2"],"通过把它们添加到":["34.2"],"walter":["35.1"],"white":["35.1"],"heisenberg":["35.1"],"两个组件就是两个实例":["36.0"],"希望数据不干扰":["36.0"],"child1":["36.0"],"替换对应组件":["37.0"],"函数式组件不会被记录在组件的父子关系中":["37.0"],"这个写个方法":["38.0"],"不行吗":["38.0"],"果断废弃了过滤器":["38.0"],"p":["38.0","81.1"],"只渲染元素和组件一次":["39.1"],"随后的重新渲染":["39.1"],"之后":["39.2","75.14"],"增加了":["39.2"],"memo":["39.2"],"通过依赖列表的方式控制页面渲染":["39.2"],"mixin有很多缺陷":["40.1"],"命名冲突问题":["40.1"],"数据来源问题":["40.1"],"全局混入":["40.2"],"一般情况下全局混入用于编写组件":["40.2"],"directives":["40.3"],"filters会在原型链上叠加":["40.3"],"什么时候使用它":["41.0"],"进行占位":["41.1"],"在使用组件时":["41.1"],"布局组件":["41.2"],"template":["41.3","48.1","73.5","75.20","87.3"],"是":["42.1"],"事件":["42.2"],"会解决中文输入问题":["42.2"],"target":["42.3"],"那组件中如果有多个数据想要做双向数据绑定怎么办":["42.3"],"很遗憾在":["42.3"],"vue2":["42.3"],"中不支持使用多个":["42.3"],"attrs":["43.0","73.13"],"elmenuitem":["44.2"],"nativeonclick":["44.2"],"sub":["45.0"],"鼠标按键修饰符":["46.0"],"right":["46.0"],"middle":["46.0"],"code":["47.1"],"对象":["47.2"],"mycomponent":["47.2"],"异步组件加载时使用的组件":["47.2"],"loading":["47.2","55.0"],"loadingcomponent":["47.2"],"forceupdate":["47.3"],"div":["48.1","87.3"],"而不是销毁他们":["49.1"],"在组建再次重新激活时可以通过缓存的实例拿到之前渲染的":["49.1"],"需要缓存的视图组件":["49.2"],"route":["49.2"],"registered":["49.3"],"as":["49.3"],"different":["49.3"],"local":["49.3"],"components":["49.3","87.3"],"so":["49.3"],"cid":["49.3"],"alone":["49.3"],"is":["49.3"],"enough":["49.3"],"ctor":["49.3"],"tag":["49.3"],"生成缓存的key":["49.3"],"如果有key":["49.3"],"在":["49.4"],"alive":["49.4"],"缓存组件被激活的时候":["49.4"],"进行扩展":["50.1"],"指令的目的在于可以将操作":["50.1"],"也可能没有":["50.2"],"componentupdated":["50.2"],"指令所在组件的":["50.2"],"bindings":["50.3"],"vnode":["50.3"],"e":["50.3"],"contains":["50.3"],"装饰器的用法":["51.0"],"对功能进行增强":["51.0"],"中介者模式":["51.0"],"中介者是一个行为设计模式":["51.0"],"通过提供一个统一的接口让系统的不同部分进行通信":["51.0"],"函数式组件开销低":["52.0"],"采用异步组件":["52.0"],"借助":["52.0"],"webpack":["52.0"],"分包的能力":["52.0"],"请求":["53.0"],"打包时开启":["53.0"],"gzip":["53.0"],"压缩处理":["53.0"],"compression":["53.0"],"nginx":["54.0"],"做反向代理":["54.0"],"websocket":["54.0"],"增添请求队列":["55.0"],"实现":["55.0","66.0"],"meta":["56.1"],"备注":["56.1"],"用户登录后可得到对应的权限列表":["56.1"],"通过权限列表筛查出对应符合的路由信息":["56.1"],"最后通过":["56.1"],"导航被确认":["57.0"],"aftereach":["57.0"],"不利于":["58.0"],"seo":["58.0"],"优化":["58.0"],"服务端无法响应到对应的资源":["59.0"],"采用集中存储管理应用的所有组件的状态":["60.2"],"核心就是解决数据的共享":["60.2"],"为了解决接口的复用问题":["60.3"],"封装公共的逻辑":["60.3"],"action":["60.4"],"的选取":["60.4"],"进行数据共享":["60.5"],"store":["61.0","84.3","84.6","84.11"],"持久化插件":["62.0"],"非":["63.0"],"中修改数据":["63.0"],"createstore":["64.0"],"modules":["64.0"],"shaking":["65.0"],"更加友好":["65.0"],"代码也更容易压缩":["65.0"],"组件逻辑共享问题":["65.0"],"采用":["65.0"],"mixins":["65.0"],"setter":["66.0"],"的性能差":["66.0"],"当新增属性和删除属性时无法监控变化":["66.0"],"需要通过":["66.0"],"数组不采用":["66.0"],"孙子组件出错时":["67.1"],"错误会一直向上抛":["67.1"],"vm":["67.2"],"info":["67.2"],"status":["67.3"],"handleqerror":["67.3"],"enum":["68.1"],"动态文本节点":["68.1"],"动态c1ass":["68.1"],"style":["68.1","76.7","87.7"],"动态sty1e":["68.1"],"除了c1ass":["68.1"],"sty1e动态属性":["68.1"],"full":["68.1"],"有key":["68.1"],"这里我们知道默认根节点是一个":["68.2"],"节点":["68.2"],"如果要是按照之前的套路来搞":["68.2"],"text":["68.4","70.1","75.27","75.28","77.8","77.9"],"定义并提供核心功能":["69.1"],"描述遍历和操作":["69.5"],"树的接口":["69.5"],"domlevel3":["69.5"],"进一步扩展了":["69.5"],"增加了统一的方式加载和保存文档的方法":["69.5"],"包含在一个叫":["69.5"],"提供关于用户屏幕分辨率的详尽信息":["69.6"],"performance":["69.6"],"提供浏览器占用内存":["69.6"],"导航行为和时间统计的详尽信息":["69.6"],"这个值始终都是":["70.1"],"尽管":["70.1"],"ecmascript":["70.1"],"都已经废弃了":["70.1"],"文件的":["70.1"],"类型通常是":["70.1"],"application":["70.1"],"x":["70.1","74.9","74.10"],"不过给":["70.1"],"hidden":["72.0"],"boolean":["72.0"],"noshowingchildren":["72.0"],"的子元素":["73.1"],"span":["73.1"],"vue":["73.5"],"activeindex":["73.9","73.10"],"toggle":["73.9","73.10","74.1","74.2"],"custom":["73.12","84.5"],"click":["73.12","77.14","77.15","87.8"],"something":["73.15"],"y":["74.9","74.10"],"count":["75.1","75.2","77.4","77.5","79.1","79.2","80.1","80.2","81.1"],"如果想在侦听器回调中能访问被":["75.14"],"更新":["75.14"],"输出":["75.21"],"stop":["75.25"],"val":["75.29"],"标签中的":["76.7"],"model":["77.1"],"capitalize":["77.1","77.2"],"使它从不更新":["77.4"],"pre":["77.6"],"跳过该元素及其所有子元素的编译":["77.6"],"元素内具有":["77.6"],"many":["77.11","77.12"],"times":["77.11","77.12"],"activetab":["77.14","77.15"],"me":["78.1"],"onclick1":["78.4"],"添加按键修饰符让有且只有":["78.4"],"被按下的时候才触发":["78.4"],"onctrlclick":["78.5"],"添加按键修饰符让没有任何系统修饰符被按下的时候才触发":["78.5"],"reactivestate":["81.1"],"让我们来试试吧":["82.1"],"yarn":["84.1"],"persistedstate":["84.2"],"state":["84.3","84.8"],"definestore":["84.4"],"pinia":["84.4"],"export":["84.4","84.6","85.2","85.4"],"my":["84.5"],"这个":["84.5"],"usestore":["84.6"],"persist":["84.7","84.8"],"该":["84.7"],"somestate":["84.8"],"你好":["84.8"],"即将恢复":["84.9"],"id":["84.9","84.10"],"刚刚恢复完":["84.10"],"时可能发生的任何错误都将使用":["84.11"],"add":["85.1"],"plugin":["85.2"],"icons":["85.2","85.5"],"default":["85.2"],"defineconfig":["85.2"],"command":["85.2"],"usesvgicon":["85.4"],"若想新增或者修改一个需求":["87.1"],"就需要分别修改":["87.1"],"compositionapi2":["87.3"],"h2":["87.3"],"姓名":["87.3"],"但模板中不需要":["87.4"],"直接使用即可":["87.4"],"对于":["87.4"],"proxy":["87.5"],"的实例对象":["87.5"],"简称":["87.5"],"接收的是对象类型":["87.6"],"zoom":["87.7"],"重新分配一个新对象":["87.7"],"会":["87.7"],"失去":["87.7"],"响应式":["87.7"],"gender":["87.8"],"changename":["87.8"],"修改名字":["87.8"]},{"0":["0.18","4.6","11.77"],"1":["11.77","13.64","68.5","71.64"],"2":["5.40"],"3":["5.60","13.31","27.0","44.0","69.1","71.31"],"4":["5.36","5.41","5.64","7.2","13.90","71.90"],"5":["5.6","22.0","32.2","68.1"],"6":["4.19","13.12","13.24","13.63","13.79","22.0","68.1","71.12","71.24","71.63","71.79"],"7":["13.60","13.79","68.1","69.6","71.60","71.79"],"8":["13.90","68.1","69.6","71.90"],"9":["13.30","71.30"],"11":["4.3","13.83","71.83"],"16":["13.15","71.15"],"26":["13.17","13.18","71.17","71.18"],"34":["13.34","71.34"],"50":["0.6","11.65"],"150":["11.82"],"200":["47.2"],"222":["5.9"],"256":["68.5"],"404":["58.0"],"726":["5.51"],"750":["0.22"],"1000":["4.24"],"是一个死值":["0.2"],"height":["0.3"],"text":["0.3","11.77","11.89","11.92","11.93","68.5","77.17","77.18"],"align":["0.3"],"background":["0.3"],"css不可继承属性":["0.3"],"伪元素选择器":["0.4"],"0001":["0.4"],"第五":["0.4"],"absolute":["0.6"],"left":["0.6","0.15"],"com":["0.7","5.51"],"cn":["0.7"],"cssref":["0.7"],"pr":["0.7"],"的值为":["0.8"],"inline":["0.8"],"table":["0.8"],"cell":["0.8"],"content":["0.9"],"display":["0.9"],"block":["0.9","2.1","68.4","68.5"],"也好":["0.10"],"方便一点":["0.10"],"right":["0.11"],"top":["0.11","0.15"],"bottom":["0.11"],"最终只有":["0.11"],"r":["0.12"],"右":["0.12"],"jonathan":["0.13"],"neal":["0.13"],"维护的一个":["0.13"],"缺点":["0.14"],"维护比较差":["0.14"],"例如图片位置进行调整或者内容宽高修改":["0.14"],"显示隐藏元素":["0.15"],"产生重绘的情况":["0.15"],"取值":["0.16"],"继承的区别":["0.16"],"在元素之后":["0.17"],"清除浮动":["0.17"],"scale":["0.18"],"元素的":["0.19"],"color":["0.20","11.50","11.98"],"red":["0.20"],"700px":["0.21"],"宽度":["0.22"],"因为":["0.22","13.34","71.34"],"设计图":["0.22"],"就是":["0.22"],"把某元素转化成行内块元素":["2.1"],"可以设置宽高":["2.1"],"加载顺序有区别":["2.2"],"浏览器先加载标签":["2.2"],"用来作文字倾斜的":["2.3"],"是一个逻辑标签":["2.3"],"用来强调文字内容的":["2.3"],"只是一个倾斜的标签":["2.3"],"没有实际含义":["2.3"],"为了增加":["2.4"],"效果要加入":["2.4"],"webp":["2.5"],"同时支持有损和无损压缩":["2.5"],"相同质量的图片":["2.5"],"可以通过":["2.6"],"html5shiv":["2.6"],"js":["2.6","76.5"],"off":["3.1"],"存储的是地址":["4.1"],"多个引用指向同一个地址":["4.1"],"这里会涉及一个":["4.1"],"先进行typeof判断":["4.2"],"如果是基础数据类型":["4.2"],"对于typeofi返回结果是object的":["4.2"],"再进行如下的判断":["4.2"],"正则返回结果":["4.2"],"replace":["4.2"],"s":["4.2"],"注意正则中间有个空格":["4.2"],"代码验证":["4.2"],"需要注意大小写":["4.2"],"哪些是typeof判断":["4.2"],"哪些是tostring判断":["4.2"],"思考下":["4.2"],"是object":["4.2"],"因此tostring返回":["4.2"],"则默认调用对象的转换方法会存在优先级":["4.3"],"然后再进行拼接":["4.3"],"如果其中有一个是数字":["4.3"],"布尔值或者数字":["4.3"],"则会将其转换成数字进行加法运算":["4.3"],"对象的情况还是参照上一条规则":["4.3"],"如果其中一个是字符串":["4.3"],"一个是数字":["4.3"],"则按照字符规则进行拼接":["4.3"],"常规情况":["4.3"],"下面看一下特殊情况":["4.3"],"lundefined":["4.3"],"规则1":["4.3"],"undefined转换字符串":["4.3"],"1null":["4.3"],"null转换字符串":["4.3"],"1true":["4.3"],"true转换字符串":["4.3"],"1n":["4.3"],"arr":["4.5","4.6","4.16"],"begin":["4.5"],"end":["4.5"],"手动实现一个浅拷贝":["4.5"],"对基础类型做一个最基本的一个拷贝":["4.5"],"对引用类型开辟一个新的存储":["4.5"],"并且拷贝一层对象属性":["4.5"],"const":["4.5","38.0","84.4"],"shallowclone":["4.5"],"if":["4.5","5.52"],"typeof":["4.5","5.52","11.17"],"null":["4.5","13.3","13.24","13.28","34.3","71.3","71.24","71.28"],"clonetarget":["4.5"],"下面是验证代码":["4.6"],"num":["4.6"],"str":["4.6"],"boolean":["4.6"],"true":["4.6","13.26","71.26"],"unf":["4.6"],"nul":["4.6"],"name":["4.6","87.4"],"我是一个对象":["4.6"],"id":["4.6","48.1"],"func":["4.6"],"我是一个函数":["4.6"],"reg":["4.6"],"我是一个正则":["4.6"],"ig":["4.6"],"parent6":["4.8"],"child6":["4.8"],"child5":["4.8"],"person6":["4.8"],"20240117094338932":["4.8"],"改变函数":["4.9"],"的":["4.9","14.3"],"this":["4.9","7.11","13.7","71.7"],"指向":["4.9"],"不同点":["4.9"],"和":["4.9","5.1","11.90","13.3","13.32","13.82","42.1","71.3","71.32","71.82","84.7"],"直接返回执行结果":["4.9"],"返回的是一个函数":["4.9"],"方法":["4.9","11.44","20.1","56.1"],"特征":["4.9"],"方法参数":["4.9"],"多个":["4.9"],"函数内部变量是无法被外部访问的":["4.11"],"因此使用闭包的作用":["4.11"],"闭包产生的本质就是当前环境中存在指向父级作用域的引用":["4.12"],"创建了闭包":["4.13"],"保存了全局作用域":["4.13"],"window":["4.13"],"对象或者值转换为":["4.14"],"第一个参数传入的是要转换的对象":["4.14"],"第二个参数是一个":["4.14"],"function":["4.16","5.50","13.5","13.7","13.24","14.1","41.3","43.0","71.5","71.7","71.24"],"value":["4.16","11.117","42.1"],"index":["4.16"],"console":["4.16","5.30","5.35","5.46","5.63","11.30","11.39","13.80","36.0","71.80","84.11"],"log":["4.16","5.30","5.35","5.43","5.44","5.45","5.46","5.61","11.17","11.30","11.39","13.26","13.66","13.80","36.0","67.2","71.26","71.66","71.80"],"arguments":["4.16"],"reduce":["4.18","14.1"],"reduceright":["4.18"],"entries":["4.18"],"infinity":["4.19"],"表示一直展开":["4.19"],"正则和":["4.19"],"json":["4.19"],"方法共同处理":["4.19"],"空间复杂度":["4.21"],"对一个算法在运行过程中临时占用存储空间大小的度量":["4.21"],"但表现比选择排序好很多":["4.23"],"代价是需要额外的内存空间":["4.23"],"mergesort":["4.23"],"merge":["4.23"],"il":["4.23"],"ir":["4.23"],"mid":["4.23"],"采用三路快速排序":["4.24"],"采用中位数作为哨兵元素":["4.24"],"解析是同步的":["5.1"],"一起的":["5.1"],"不是按顺次执行":["5.1"],"空对象指针":["5.3"],"转为数值为":["5.3"],"并不显式地出现在代码中":["5.4"],"除了比较值":["5.4"],"流程":["5.5"],"同步":["5.5"],"优先级":["5.6"],"声明变量":["5.6"],"声明普通函数":["5.6"],"普通声明函数是不看写函数的顺序的":["5.7"],"bash":["5.9"],"bas":["5.10"],"输出":["5.10","84.9","84.10"],"现在对象本身找":["5.11"],"构造函数中找":["5.11"],"对象原型中找":["5.11"],"false":["5.12","13.3","13.32","13.33","71.3","71.32","71.33"],"undefined":["5.13","5.17","13.28","13.74","13.75","13.82","71.28","71.74","71.75","71.82"],"因为key":["5.14"],"为对象时":["5.14"],"都会被转成":["5.14"],"new":["5.16","19.3","35.1"],"输出结果":["5.16","5.17","5.19"],"funca":["5.18"],"array":["5.22","5.23","5.25"],"indexof":["5.23","5.25"],"prototype":["5.24","5.64","34.2"],"替换":["5.28"],"返回":["5.28"],"删除的元素":["5.28"],"push":["5.31","5.32","49.3"],"return":["5.31","5.32","5.33","11.31","85.2"],"math":["5.33"],"max":["5.33"],"hello":["5.34","11.13","84.3"],"最多的字符是":["5.35"],"次数是":["5.35"],"对构造函数有返回值的处理判断":["5.36"],"onclick":["5.39","5.50","11.65"],"就是把原型串联起来":["5.41"],"bind":["5.48","7.12"],"github":["5.51","14.3"],"存储大小的限制":["5.53"],"存储量不能超过":["5.53"],"4k":["5.53"],"style":["5.54"],"声明的常量不能被再次赋值":["5.55"],"区别四":["5.55"],"声明的变量没有自身的作用域":["5.55"],"报错":["5.57"],"不报错":["5.59"],"c":["5.60"],"a":["5.63","11.54","13.28","13.30","13.36","42.3","71.28","71.30","71.36"],"b":["5.63","11.16","11.20","11.22","11.31","64.0"],"箭头函数没有":["5.64"],"已失败":["5.65"],"每一个匹配到的都返回":["5.66"],"全部匹配才会返回":["5.67"],"那么我们的业务是父组件引入子组件":["7.2"],"并且优先加载子组件的数据":["7.2"],"那么在父组件中的请求要放":["7.2"],"中有":["7.3"],"中可以拿到":["7.3"],"的方法的":["7.3"],"使用":["7.4","13.32","52.0","71.32"],"vue":["7.4","14.2","31.1","77.6","82.1"],"系统内置的":["7.4"],"mounted":["7.5","7.7"],"created":["7.6","7.8"],"beforemount":["7.6","7.8"],"beforecreated":["7.8"],"destroyed":["7.9","31.1"],"关闭页面":["7.9"],"记录视频播放的时间":["7.9"],"parent":["7.11"],"xxx":["7.11"],"使用父组件的数据":["7.11"],"resolve":["7.15"],"blog":["9.0"],"api":["9.0"],"examples":["9.0"],"provided":["10.0"],"by":["10.0"],"markdown":["10.3"],"extensions":["10.3"],"配置安装选项":["11.2"],"勾选第一项创建桌面快捷方式即可":["11.2"],"install":["11.2"],"开始安装":["11.2"],"finish":["11.3"],"完成配置":["11.3"],"完成配置后":["11.3"],"可根据喜好调整deveco":["11.3"],"studio主题风格":["11.3"],"configure":["11.3"],"下的":["11.3"],"ide界面说明":["11.4"],"项目结构概述":["11.4"],"下面逐一演示":["11.5"],"perviewer":["11.6"],"即可看到预览效果":["11.6"],"若想将项目运行到模拟器":["11.7"],"首先需要启动模拟器":["11.7"],"点击下图中的启动按钮":["11.7"],"稍等片刻":["11.7"],"等待模拟器开机":["11.7"],"开机后的模拟器如下图所示":["11.7"],"signing":["11.8"],"configs":["11.8"],"进行配置即可":["11.8"],"生成签名信息需要先登陆华为开发者账号":["11.8"],"sign":["11.8"],"in":["11.8"],"浏览器会自动跳转到登录页面":["11.8"],"javascript":["11.9"],"因此三者的关系如下图所示":["11.9"],"zh":["11.12"],"play":["11.12"],"编写程序并运行":["11.13"],"在完成上述环境的准备后":["11.13"],"就可以编写typescript程序并运行了":["11.13"],"具体操作如下":["11.13"],"首先在合适的位置创建一个工程目录":["11.13"],"例如":["11.13","11.80","11.105"],"d":["11.13","11.19"],"workspace":["11.13"],"然后使用vscode打开目录":["11.13"],"number":["11.16","38.0"],"isdone":["11.21"],"person":["11.23","11.34"],"img":["11.25","11.57","11.59","11.64","11.102","11.113","11.127"],"例如定义一个":["11.34"],"其对象可以有":["11.34"],"am":["11.36"],"and":["11.36","69.5"],"便可通过对象调用类中声明的方法":["11.37"],"如下":["11.37"],"intro":["11.37"],"使用静态成员":["11.38"],"静态成员无需通过对象实例访问":["11.38"],"直接通过类本身访问即可":["11.38"],"注意":["11.39","13.65","71.65"],"类的继承需要使用关键字":["11.39"],"子类构造器中需使用":["11.39"],"说明":["11.40"],"修饰的属性或方法是私有的":["11.40"],"只能在声明它的类中的被访问":["11.40"],"修饰的属性或方法是受保护的":["11.40"],"只能在声明它的类和其子类中被访问":["11.40"],"去遵守":["11.42"],"确保类实现某些特定的行为或功能":["11.42"],"你会发现":["11.44"],"同样是":["11.44"],"类型的两个对象":["11.44"],"调用同一个":["11.44"],"方法时":["11.44"],"表现出了不同的行为":["11.44"],"这就是":["11.44"],"这个接口":["11.45"],"implements":["11.45"],"夏":["11.48"],"秋":["11.48"],"冬":["11.48"],"向下移动":["11.49"],"通过为枚举属性赋值":["11.50"],"可以赋予枚举属性一些更有意义的信息":["11.50"],"例如以下枚举":["11.50"],"为了在一个模块中使用其他模块的内容":["11.52"],"必须对这些内容进行":["11.52"],"导入":["11.52"],"from":["11.53"],"modulea":["11.53"],"还可以将某个模块的内容统一导入到一个":["11.54"],"模块对象":["11.54"],"上":["11.54","16.3"],"这样就能简洁有效的解决命名冲突的问题了":["11.54"],"具体语法如下":["11.54"],"所以默认导出支持匿名内容":["11.55"],"比如匿名函数":["11.55"],"相关的能力":["11.56"],"state":["11.58","84.6"],"ison":["11.58"],"具体逻辑如下图所示":["11.59"],"当用于点击":["11.60"],"关灯按钮":["11.60"],"开发者只需修改状态变量的值":["11.61"],"界面就会自动更新":["11.61"],"等等":["11.62"],"并且arkts还支持自定义组件":["11.62"],"让开发者可根据具体需求自定义组件中的内容":["11.62"],"button":["11.65","73.12","87.3"],"关灯":["11.65"],"开灯":["11.65"],"除去每个组件的专有属性":["11.67"],"还有各组件都能配置的通用属性":["11.67"],"通用属性也可通过":["11.67"],"文档查看":["11.67"],"事件方法":["11.67"],"事件方法用于为组件绑定交互事件":["11.67"],"各组件的支持的事件可查看":["11.67"],"可使代码的结构更加清晰":["11.68"],"并且能提高代码的复用性":["11.68"],"那":["11.69"],"的作用又是啥呢":["11.69"],"在鸿蒙应用中":["11.69"],"每个页面都是由一些列组件组合而成的":["11.69"],"并且这些组件都是逐层嵌套的":["11.69"],"因此这些组件最终形成了一个组件树的结构":["11.69"],"如下图所示":["11.69"],"helloworld":["11.70","11.73","11.76"],"custom":["11.70","11.139","73.13"],"solution":["11.70","11.73","11.76","11.130","11.133","11.139"],"pages":["11.73","11.83","11.84","11.87","11.89","11.91","11.92","11.93","11.99","11.100","11.107","11.110","11.118","11.124"],"condition":["11.73"],"初次渲染时":["11.77"],"每个元素对应的key依次为":["11.77"],"zhagnsan":["11.77"],"若现有一个操作是向":["11.77"],"数组头部插入新的元素":["11.77"],"例如新元素为wanger":["11.77"],"按照默认的key生成逻辑":["11.77"],"插入新元素之后每个元素的key就会依次变为":["11.77"],"wanger":["11.77"],"用于在应用中显示图片":["11.79"],"因此可以直接将":["11.80"],"作为":["11.80"],"组件的参数":["11.80"],"rawfile目录":["11.80"],"path":["11.80"],"to":["11.80"],"your":["11.80"],"file":["11.80"],"文件的路径为相对于":["11.80"],"的路径":["11.80"],"例如上图中的icon":["11.80"],"greeting":["11.82"],"你好":["11.82","84.6"],"integer":["11.82"],"我们可以通过":["11.82"],"引用相应的":["11.82"],"具体语法为":["11.82"],"data":["11.82"],"demos":["11.83","11.87","11.90","11.91","11.96","11.103","11.121","11.123","11.128"],"entry":["11.83","11.87","11.89","11.90","11.91","11.96","11.103","11.107","11.118","11.121","11.123","11.128"],"src":["11.83","11.84","11.87","11.89","11.90","11.91","11.103","11.107","11.118","11.121","11.123","11.128"],"main":["11.83","11.84","11.87","11.89","11.90","11.91","11.93","11.103","11.107","11.110","11.118","11.121","11.123","11.128","84.4"],"ets":["11.83","11.84","11.87","11.89","11.90","11.91","11.92","11.93","11.100","11.103","11.107","11.110","11.118","11.121","11.123"],"component":["11.83","11.84","11.89","11.91","11.92","11.93","11.99","11.100","11.106","11.107","11.110","11.115","11.118","11.124"],"image":["11.84","14.0"],"用于显示文字内容":["11.86"],"相关案例见":["11.87","11.90","11.96","11.103","11.121","11.123","11.128"],"attribute":["11.92","11.93","11.99","11.106","11.115","11.124"],"通常用于响应用户的点击操作":["11.95"],"参数了":["11.96"],"具体如下":["11.96"],"状态下的背景色":["11.105"],"toggle":["11.106"],"用于接收用户输入的文本内容":["11.109"],"input":["11.110","11.115","42.1"],"password":["11.112"],"密码输入模式":["11.112"],"效果如下":["11.113","11.114"],"用于设置字体颜色":["11.114"],"string":["11.117","72.0"],"void":["11.117"],"其中":["11.117"],"用于显示各种进度":["11.120"],"胶囊样式":["11.121"],"progress":["11.124"],"来满足各种不同的需求":["11.125"],"具体效果如下":["11.127"],"属性用于设置提示信息到底部的距离":["11.128"],"dialog":["11.130","11.133","11.139"],"显示警告对话框":["11.131"],"具体用法可参考相关案例或者官方文档":["11.131","11.134"],"显示操作列表弹窗":["11.134"],"uc3dbfab7":["11.136"],"timepickerdialog":["11.137"],"时间滑动选择器弹窗":["11.137"],"因为它是一个关键字":["13.2","71.2"],"但是":["13.2","14.2","71.2"],"只要把这个预处理命令放到函数头的开头即可":["13.5","71.5"],"dosomething":["13.5","71.5"],"debugger":["13.7","71.7"],"import":["13.7","70.1","71.7"],"default":["13.7","71.7"],"保留的关键字不能用作标识符或属性名":["13.8","71.8"],"static":["13.10","71.10"],"只能在":["13.12","71.12"],"合法":["13.13","71.13"],"但不推荐":["13.13","71.13"],"不初始化的情况下":["13.13","71.13"],"是不是有意为之":["13.14","71.14"],"在严格模式下":["13.14","71.14"],"如果像这样给未声明的变量赋值":["13.14","71.14"],"则会导致抛出":["13.14","71.14"],"如果需要定义多个变量":["13.14","71.14"],"可以在一条语句中用逗号分隔每个变量":["13.14","71.14"],"及可选的初始化":["13.14","71.14"],"快作用域是函数作用域的子集":["13.16","71.16"],"因此使用与":["13.16","71.16"],"的作用域限制也适用于":["13.16","71.16"],"不允许同一个块作用域中出现冗余声明":["13.16","71.16"],"这样会导致报错":["13.16","71.16"],"在":["13.17","37.0","71.17"],"声明之前的执行瞬间被称为":["13.17","71.17"],"temporal":["13.17","71.17"],"因此不能依赖条件声明模式":["13.19","71.19"],"ok":["13.21","71.21"],"for":["13.21","71.21"],"循环中":["13.21","71.21"],"不能用":["13.21","71.21"],"声明迭代变量":["13.21","71.21"],"迭代变量会自增":["13.21","71.21"],"次之":["13.22","71.22"],"复杂数据类型":["13.23","71.23"],"object":["13.23","25.1","71.23","87.7"],"或":["13.24","71.24"],"表示值为函数":["13.24","71.24"],"用等于操作符":["13.26","71.26"],"比较":["13.26","71.26"],"n":["13.28","38.0","71.28"],"不同的数值类型相应地也有不同的数值字面量格式":["13.29","71.29"],"以及":["13.30","71.30"],"后跟一个大写或者小写字母":["13.31","71.31"],"e":["13.31","71.31"],"再加上一个要乘的":["13.31","71.31"],"的多少次幂":["13.31","71.31"],"isfinite":["13.32","71.32"],"negative":["13.32","71.32"],"是数值":["13.33","71.33"],"可以转换为数值10":["13.33","71.33"],"它也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止":["13.34","71.34"],"这意味着第一次出现的小数点是有效的":["13.34","71.34"],"但是第二次出现的小数点就无效了":["13.34","71.34"],"此时剩余的字符会被忽略":["13.34","71.34"],"将转换为":["13.34","71.34"],"函数的另一个不同之处在于":["13.34","71.34"],"他始终忽略字符串开头的零":["13.34","71.34"],"这个函数能识别前面讨论的所有的浮点格式":["13.34","71.34"],"以及十进制格式":["13.34","71.34"],"开头的":["13.34","71.34"],"始终被忽略":["13.34","71.34"],"十六进制数值最终会返回":["13.34","71.34"],"只解析十进制值":["13.34","71.34"],"因此不能指定底数":["13.34","71.34"],"最后":["13.34","71.34"],"如果字符串表示整数":["13.34","71.34"],"没有小数点或者小数点后面全是":["13.34","71.34"],"则":["13.34","71.34"],"返回整数":["13.34","71.34"],"标示":["13.35","71.35"],"必须成对出现":["13.35","71.35"],"unnn":["13.36","71.36"],"nnnn":["13.36","71.36"],"默认情况下返回的是十进制":["13.38","71.38"],"second":["13.39","71.39"],"subtitle":["13.40","71.40"],"bbbb":["13.40","71.40"],"header":["13.40","71.40"],"这个函数的返回值是对模板字面量求":["13.41","71.41"],"值得到的字符串":["13.41","71.41"],"raw":["13.42","71.42"],"标签函数":["13.42","71.42"],"符号的用途是确保对象属性使用唯一标识符":["13.43","71.43"],"不会发生属性冲突的风险":["13.43","71.43"],"mywrappedsymbol":["13.44","71.44"],"创建普通符号":["13.45","71.45"],"s2":["13.45","71.45"],"对象字面量只能在计算属性语法中使用符号作为属性":["13.46","71.46"],"这些内置符号也没有什么特别之处":["13.47","71.47"],"它们就是全局函数":["13.47","71.47"],"的普通字符串属性":["13.47","71.47"],"指向一个符号":["13.47","71.47"],"tostring":["13.60","13.82","13.84","71.60","71.82","71.84"],"valueof":["13.60","13.63","13.83","71.60","71.63","71.83"],"返回对象对应的字符串":["13.60","71.60"],"或减":["13.63","71.63"],"如果是对象":["13.63","71.63"],"则调用其":["13.63","13.83","71.63","71.83"],"方法取得可以操作的值":["13.63","71.63"],"对得到的值应用上述规则":["13.63","71.63"],"转换为":["13.64","71.64"],"给结果加":["13.65","71.65"],"在位操作中":["13.65","71.65"],"特殊值":["13.65","71.65"],"有符号右移实际上是左移的逆运算":["13.70","71.70"],"结果就差太多了":["13.71","71.71"],"无符号右移操作符将负数的二进制表示当成正数的二进制表示来处理":["13.71","71.71"],"因为负数是其绝对值的二补数":["13.71","71.71"],"nan":["13.73","71.73"],"逻辑与操作符是一种短路操作符":["13.74","71.74"],"意思就是如果第一个操作数决定了结果":["13.74","71.74"],"那么永远不会对第二个操作数求值":["13.74","71.74"],"如果是非":["13.78","71.78"],"的有限值除以":["13.78","71.78"],"则根据第一个操作数的符号返回":["13.78","71.78"],"除数是无限值":["13.79","71.79"],"则返回被除数":["13.79","71.79"],"如果有不是数值的操作数":["13.79","71.79"],"再将两个字符串拼接在一起":["13.82","71.82"],"如果有任一操作数是对象":["13.82","13.83","71.82","71.83"],"数值或布尔值":["13.82","71.82"],"则调用它们的":["13.82","71.82"],"方法以获取字符串":["13.82","71.82"],"然后再应用前面的关于字符串的规则":["13.82","71.82"],"对于":["13.82","19.2","71.82"],"将其转换为数值":["13.83","71.83"],"然后再根据前面的规则执行数学运算":["13.83","71.83"],"如果转换结果是":["13.83","71.83"],"则减法计算的结果是":["13.83","71.83"],"方法取得表示它的数值":["13.83","71.83"],"如果该值是":["13.83","71.83"],"则调用":["13.84","71.84"],"只有两个操作数在不转换的前提下不相等才返回":["13.87","71.87"],"右移后赋值":["13.89","71.89"],"无符号右移后赋值":["13.89","71.89"],"20240313101558411":["14.0"],"声明式编程":["14.1"],"total2":["14.1"],"memo":["14.1"],"current":["14.1","49.3"],"模型":["14.2"],"设计也受到了它的启发":["14.2"],"因此在文档中经常会使用":["14.2"],"vm":["14.2"],"专门写个编译时可以将模板编译成虚拟":["14.4"],"在构建的时候进行编译性能更高":["14.4"],"复用性等":["14.5","17.0"],"降低更新范围":["14.5","17.0"],"多页应用跳转需要整页资源刷新":["15.1"],"server":["15.1"],"服务端渲染":["15.1"],"ssr":["15.1","31.2"],"如何分清在哪渲染":["15.1"],"服务器压力小":["15.2"],"应用不利于搜索引擎的抓取":["15.2"],"首次渲染速度相对较慢":["15.2"],"第一次返回空的":["15.2"],"csr":["15.3"],"的方式":["15.3"],"首屏采用服务端渲染的方式":["15.3"],"diff":["16.1","66.0"],"算法比对差异进行更新":["16.1"],"减少了对真实":["16.1"],"会在后续的":["16.2"],"patch":["16.2","68.1"],"过程中进一步转化为真实":["16.2"],"将更改的部分应到真实":["16.3"],"dom":["16.3","49.1","50.1","57.0","69.1"],"从而转化为最小量的":["16.3"],"测试性":["17.0"],"的产生而且看浪费内存":["18.0"],"如果粒度过低也无法精准检测变化":["18.0"],"所以采用":["18.0"],"vue3":["19.1","30.0","31.2","32.2","37.0","40.1","42.3"],"则采用":["19.1"],"需要对数组进行单独处理":["19.2"],"es6":["19.2","70.1"],"中新产生的":["19.2"],"proxy":["19.3"],"收集":["19.3"],"effect":["19.3"],"触发":["19.3","57.0"],"更新":["19.3","21.1","57.0"],"reverse":["20.1"],"notify":["21.1"],"当属性发生修改时会找对应的":["21.2"],"列表依次执行":["21.2"],"upfront":["22.0"],"the":["22.0","49.3"],"option":["22.0"],"如果不是响应式的也不需要将其定义成响应式属性":["22.0"],"将属性定义成响应式的":["22.0"],"definereactive":["22.0"],"的显示或者隐藏":["23.1"],"计算属性中不支持异步逻辑":["24.1"],"computed属性是可以在模板中使用的":["24.1"],"函数":["24.2"],"让用户方便使用也解决了清理问题":["24.2"],"主要解决原始值的响应式问题":["25.1"],"cb":["26.0"],"重新生成代码":["27.0"],"codegen":["27.0"],"内部还会给所有的响应式数据增加":["28.0"],"dep":["28.0"],"属性":["28.0"],"让属性记录自己当前的":["28.0"],"用户后续的修改可以触发":["28.0"],"重新渲染":["28.0"],"但是功能不复杂的时候":["29.0"],"我们可以考虑使用":["29.0"],"会导致循环后再对每一项进行判断":["30.0"],"浪费性能":["30.0","66.0"],"中":["30.0","84.7"],"实例销毁之前调用":["31.1"],"实例仍然完全可用":["31.1"],"实例销毁后调用":["31.1"],"调用后":["31.1"],"实例指示的所有东西都会解绑定":["31.1"],"所有的事件监听器会被移出":["31.1"],"rendertriggered":["31.2"],"响应式依赖被触发时调用":["31.2"],"serverprefetch":["31.2"],"only":["31.2"],"组件实例在服务器上被渲染之前调用":["31.2"],"不考虑跨级比较的情况":["32.1"],"内部采用深度递归的方式":["32.1"],"头尾":["32.2"],"尾头":["32.2"],"比对查找进行复用":["32.2"],"中采用最长递增子序列来实现":["32.2"],"谈谈你对它的理解":["33.0"],"的策略":["33.1"],"如果数据项的顺序被改变":["33.1"],"将不会移动":["33.1"],"尽量不要采用索引作为":["33.2"],"作为参数传入":["34.1"],"这样插件中就不再需要依赖":["34.1"],"else":["34.3","49.3"],"直接调用方法":["34.3"],"创建":["35.1"],"实例":["35.1"],"并挂在到一个元素上":["35.1"],"mount":["35.1"],"方法将其进行渲染":["35.2"],"但是需要引入编译时":["35.2"],"child2":["36.0"],"中因为所有的组件都不用":["37.0"],"format":["38.0"],"元素":["39.1"],"组件及其所有的子节点将被视为静态内容并跳过":["39.1"],"valuea":["39.2"],"valueb":["39.2"],"class":["39.2"],"box":["39.2"],"采用":["40.1","66.0"],"compisitionapi":["40.1"],"局部混入用于复用逻辑":["40.2"],"组件的扩展除了mixin之外":["40.3"],"还有一个属性叫做":["40.3"],"extends":["40.3"],"组件标签内部的内容会分发到对应的":["41.1"],"表格组件":["41.2"],"树组件":["41.2"],"scopedslots":["41.3"],"u":["41.3"],"key":["41.3"],"fn":["41.3"],"复选框会被解析成":["42.2"],"checked":["42.2"],"change":["42.2"],"中可以通过以下方法进行绑定":["42.3"],"html":["42.3"],"my":["42.3","73.12"],"on":["43.0"],"update":["43.0","49.3"],"event":["43.0","78.2"],"elmenu":["44.2"],"子组件会通过":["45.0"],"键值修饰符":["46.0"],"对":["46.0","60.4","69.6"],"keycode":["46.0"],"solitting":["47.1"],"功能一起配合使用":["47.1"],"加载失败时使用的组件":["47.2"],"error":["47.2","84.11"],"errorcomponent":["47.2"],"展示加载时组件的延时时间":["47.2"],"默认值是":["47.2"],"毫秒":["47.2"],"delay":["47.2","49.3"],"强制更新":["47.3"],"count":["48.1","75.20","75.21"],"进行渲染":["49.1"],"mata":["49.2"],"keepalive":["49.2"],"不需要缓存的视图组件":["49.2"],"将组件实例直接复用":["49.3"],"componentinstance":["49.3"],"make":["49.3"],"freshest":["49.3"],"remove":["49.3"],"lru算法":["49.3"],"setting":["49.3"],"until":["49.3"],"vnodetocache":["49.3"],"钩子":["49.4","57.0"],"的逻辑进行复用":["50.1"],"及其子":["50.2"],"全部更新后调用":["50.2"],"unbind":["50.2"],"target":["50.3"],"let":["50.3"],"method":["50.3"],"expression":["50.3"],"contextmethod":["50.3"],"document":["50.3"],"addeventlistener":["50.3"],"策略模式":["51.0"],"策略模式值对象有某个行为":["51.0"],"但是在不同的场景中":["51.0"],"该场景有不同的实现方案":["51.0"],"keep":["52.0"],"alive":["52.0"],"缓存组件":["52.0"],"webpack":["53.0"],"plugin":["53.0"],"插件":["53.0"],"静态资源采用":["53.0"],"cdn":["53.0"],"进行通信":["54.0"],"搭建":["54.0"],"bff":["54.0"],"backend":["54.0"],"效果":["55.0"],"维护取消请求":["55.0"],"addroutes":["56.1"],"动态添加路由":["56.1"],"按钮权限":["56.1"],"按钮权限一般采用自定义指令实现":["56.1"],"调用":["57.0"],"historyapi":["58.0"],"美观":["58.0"],"刷新会出现":["58.0"],"所以会出现":["59.0"],"以相应的规则保证状态以一种可预测的方式发生变化":["60.2"],"模块需要增加":["60.4"],"namespaced":["60.4"],"vuex4":["60.5"],"核心就是通过创建一个响应式对象进行数据共享":["60.5"],"subscribe":["61.0"],"监控状态变化":["61.0"],"将数据存储到":["62.0"],"localstorage":["62.0","84.5"],"或者":["62.0"],"在严格模式下会发生异常":["63.0"],"dispatch":["63.0"],"时会将":["63.0"],"包装成":["63.0"],"的状态":["64.0"],"实现组件之间的逻辑共享":["65.0"],"但是会有数据来源不明确":["65.0"],"命名冲突等问题":["65.0"],"提供公共逻辑非常方便":["65.0"],"来进行劫持":["66.0"],"对所有索引进行劫持会造成性能浪费":["66.0"],"需要对数组单独进行处理":["66.0"],"算法也进行了重写":["66.0"],"模块编译优化":["66.0"],"parchflags":["66.0"],"如果":["67.1"],"中返回":["67.1"],"统一处理异常接口":["67.3"],"promise":["67.3"],"reject":["67.3"],"需要完整diff":["68.1"],"hydrate":["68.1"],"events":["68.1"],"挂载过事件的":["68.1"],"stable":["68.1"],"fragment":["68.1","68.3"],"稳定序列":["68.1"],"子节点顺序不会发生变化":["68.1"],"keyed":["68.1"],"子节点有key的fragment":["68.1"],"unkeyed":["68.1","68.5"],"子节点没有key的fragment":["68.1"],"need":["68.1"],"这时候切换":["68.2"],"的状态将无法从":["68.2"],"标签切换到":["68.2"],"可以试想一下":["68.5"],"如果不增加这个":["68.5"],"文档对象模型":["69.1"],"提供与网页内容交互的方法和接口":["69.1"],"操作符":["69.3"],"全局对象":["69.3"],"中使用扩展的":["69.4"],"xml":["69.4"],"load":["69.5"],"save":["69.5"],"的新模块中":["69.5"],"还有验证文档的方法":["69.5"],"validation":["69.5"],"cookie":["69.6"],"的支持":["69.6"],"对其他自定义对象":["69.6"],"如":["69.6"],"属性这个值有可能导致脚本被忽略":["70.1"],"在非":["70.1"],"ie":["70.1"],"浏览器中有效的其他值还有":["70.1"],"如果这个值是":["70.1"],"module":["70.1"],"则代码会被当成":["70.1"],"模块":["70.1"],"而且只有这时候代码中才能出现":["70.1"],"alwaysshow":["72.0"],"title":["72.0"],"msg":["73.1"],"emit":["73.13"],"click":["73.13","87.3"],"reset":["74.5"],"清空":["74.5"],"你需要指明":["75.14"],"post":["75.14"],"选项":["75.14"],"可以停止监听":["75.25"],"operations":["75.29"],"的值链接到动态的组件状态":["76.3"],"scoped":["76.7"],"也可以将其内的":["76.7"],"ipttext":["77.2"],"所有":["77.6"],"quickly":["77.11","77.12"],"toggletab":["77.14","77.15"],"onctrlclick":["78.4"],"添加按键修饰符让没有任何系统修饰符被按下的时候才触发":["78.4"],"exact":["78.5"],"onclick2":["78.5"],"add":["84.1"],"use":["84.2"],"somestate":["84.3","84.4","84.6"],"usestore":["84.4"],"将被持久化存储在":["84.5"],"中的":["84.5"],"persist":["84.6"],"只有":["84.7"],"该":["84.8"],"将使用":["84.8"],"将会在恢复数据":["84.9","84.10"],"之前":["84.9"],"之后":["84.10"],"plugins":["85.2"],"指定要缓存的文件夹":["85.2"],"process":["85.2"],"href":["85.3"],"symbolid":["85.3"],"globally":["85.4"],"app":["85.5"],"组合":["87.0"],"不便于维护和复用":["87.1"],"年龄":["87.3"],"age":["87.3"],"changename":["87.3"],"修改姓名":["87.3"],"张三":["87.4"],"来说":["87.4"],"注意点":["87.5"],"定义的响应式数据是":["87.5"],"内部其实也是调用了":["87.6"],"reactive":["87.6"],"assign":["87.7"],"去整体替换":["87.7"],"使用原则":["87.7"],"若需要一个基本类型的响应式数据":["87.7"],"必须使用":["87.7"],"若需要一个响应式对象":["87.7"],"changeage":["87.8"],"修改年龄":["87.8"]},{"0":["13.90","49.3","71.90"],"1":["5.13","13.20","71.20"],"2":["11.8","13.20","38.0","71.20"],"3":["7.11","13.20","71.20","87.7"],"4":["4.24","13.20","44.0","71.20"],"5":["13.84","71.84"],"6":["13.31","71.31"],"7":["13.24","71.24"],"9":["13.80","68.1","71.80"],"10":["5.57","68.1"],"11":["5.19","68.1"],"12":["11.50"],"16":["11.50"],"20":["4.8","11.50"],"24":["11.50"],"26":["13.66","71.66"],"29":["13.14","71.14"],"36":["13.15","71.15"],"75":["0.18"],"100":["11.65"],"200":["4.24","11.16"],"215":["4.24"],"375":["0.22"],"760":["5.51"],"908":["13.34","71.34"],"1000":["11.45"],"3000":["47.2"],"31250000":["13.31","13.34","71.31","71.34"],"就是这个盒子的高度":["0.2"],"border":["0.3"],"margin":["0.3"],"padding":["0.3"],"0000":["0.4"],"后者覆盖前者":["0.4"],"top":["0.6"],"transform":["0.6"],"translate":["0.6"],"class":["0.7","4.8"],"asp":["0.7"],"position":["0.8"],"的值":["0.8","11.82"],"absolute":["0.8"],"fixed":["0.8"],"生效":["0.11"],"而":["0.11","11.69","63.0","84.7"],"四个都可以生效":["0.11"],"重置样式库":["0.13"],"都会造成维护问题":["0.14"],"样式改变":["0.15"],"换皮肤":["0.15"],"会继承父元素的":["0.16"],"设置的元素的后代元素不会继承不透明属性":["0.16"],"样式布局上也有作用":["0.17"],"img":["0.21","11.6","11.9","11.12","11.52","11.60","11.62","11.105","11.114","87.1"],"正好是":["0.22"],"iphone6":["0.22"],"的尺寸":["0.22"],"我们要把":["0.22"],"的尺寸作为基准点":["0.22"],"把某元素转化成块元素":["2.1"],"独占一行":["2.1"],"后加载":["2.2"],"表示标签内字符重要":["2.3"],"更多地用在字体图标":["2.3"],"更多地用在术语":["2.3"],"生物":["2.3"],"医药":["2.3"],"上":["2.3"],"属性来描述这张图是什么内容或者关键词":["2.4"],"具有更新的体积":["2.5"],"兼容性不是特别好":["2.5"],"去处理":["2.6"],"共享":["4.1"],"的概念":["4.1"],"l23":["4.2"],"typeof直接返回":["4.2"],"tostring返回":["4.2"],"首字母大写":["4.2"],"null是object":["4.2"],"需tostring来判断":["4.2"],"typeofi值接返回":["4.2"],"typeof能判断":["4.2"],"因此首字母小写":["4.2"],"比较特殊字符串和biginti相加":["4.3"],"biglnt转换为字符串":["4.3"],"i":["4.3","11.43"],"nan规则2":["4.3"],"undefined转换数字相加nan":["4.3"],"1规则2":["4.3"],"null转换为0":["4.3"],"2规则2":["4.3"],"true转换为1":["4.3"],"二者相加为2":["4.3"],"错误不能把biglnt和number类型直接混合相加":["4.3"],"规则3":["4.3"],"字符串拼接":["4.3"],"的转换规则":["4.3"],"如果部署了":["4.3"],"方法优先调用再返回":["4.3"],"调用":["4.3"],"如果转换为基础类型则返回":["4.3"],"如果都没有返回基础类型会报错":["4.3"],"array":["4.5"],"isarray":["4.5"],"for":["4.5","54.0"],"prop":["4.5"],"in":["4.5","13.21","71.21"],"hasownproperty":["4.5"],"return":["4.5","4.16","5.52","14.1","38.0"],"else":["4.5","5.52"],"defineproperty":["4.6","25.1"],"innumerable":["4.6"],"enumerable":["4.6"],"false":["4.6","5.19","11.60","13.14","67.1","71.14"],"value":["4.6"],"不可枚举的属性":["4.6"],"loop":["4.6"],"设置":["4.6"],"成循环引用的属性":["4.6"],"push":["4.6","34.3"],"image":["4.6","4.16","11.83","21.1","32.2","33.2"],"20240116111129673":["4.6"],"七":["4.8"],"es6的extends关键字实现逻辑":["4.8"],"使用关键词很容易直接实现javascript的继承":["4.8"],"但是如果想深入了解extends语法糖是怎么实现的":["4.8"],"就得深入研究extends的底层逻辑":["4.8"],"person":["4.8"],"原型方法":["4.8"],"即person":["4.8"],"下面可以简写为getname":["4.8"],"gamer":["4.8"],"extends":["4.8"],"age":["4.8","13.14","71.14"],"子类中存在构造函数":["4.8"],"则需要再使用":["4.8"],"之前首先调用super":["4.8"],"super":["4.8"],"const":["4.8"],"asuna":["4.8"],"成功访问到父类的方法":["4.8"],"单个数组":["4.9"],"方法功能":["4.9"],"函数调用改变":["4.9"],"返回结果":["4.9"],"直接执行的":["4.9"],"直接执行":["4.9"],"返回待执行的函数":["4.9"],"底层实现":["4.9"],"通过eval":["4.9"],"间接调用":["4.9"],"就具备了实现能在外部访问某个函数内部变量的功能":["4.11"],"和当前函数的作用域":["4.13"],"因此可以输出全局的变量":["4.13"],"replacer":["4.14"],"第三个参数用来控制结果字符串里面的间距":["4.14"],"repeat":["4.16"],"必须指定返回值":["4.16"],"否则返回":["4.16"],"undefined":["4.16","13.13","13.18","13.73","49.3","71.13","71.18","71.73"],"20240117112411958":["4.16"],"find":["4.18"],"findindex":["4.18"],"keys":["4.18"],"values":["4.18"],"str":["4.19"],"stringify":["4.19"],"replace":["4.19"],"g":["4.19"],"parse":["4.19"],"slice":["4.23"],"排序算法":["4.23"],"时间复杂度":["4.23"],"空间复杂度":["4.23"],"稳定性":["4.23"],"n":["4.23"],"平方":["4.23"],"稳定":["4.23"],"logn":["4.23"],"不稳定":["4.23"],"每隔":["4.24"],"个元素挑出一个元素放到一个新数组中":["4.24"],"然后对它排序":["4.24"],"找到中间位置的数依次作为中位数":["4.24"],"谁先加载完谁先行":["5.1"],"的原始值":["5.3"],"转为数值时为":["5.3"],"nan":["5.3","13.65","71.65"],"还比较类型":["5.4"],"参数":["5.6"],"变量提升":["5.6"],"输出":["5.9","84.11"],"111b":["5.9"],"构造函数原型中找":["5.11"],"对象上一层原型中找":["5.11"],"object":["5.14"],"f":["5.17","13.30","71.30"],"输出结果":["5.18"],"返回的是一个新的数组":["5.27"],"该方法会改变原数组":["5.28"],"console":["5.31","5.32","5.33","11.43","13.44","71.44"],"log":["5.31","5.32","5.33","5.63","11.43","13.44","71.44"],"helloworld":["5.34"],"最多的字符是a":["5.35"],"次数是16":["5.35"],"alert":["5.39"],"内存泄漏会出现在低版本的":["5.40"],"ie":["5.40","69.6"],"中":["5.40","7.2","13.21","41.1","71.21","84.5"],"其他浏览器不会出现这个问题":["5.40"],"原型链的最顶端是":["5.41"],"null":["5.41","13.82","71.82"],"有多个参数需要挨个写":["5.49"],"this":["5.50","7.4","22.0","44.2","49.4"],"行":["5.51"],"不能超过":["5.53"],"5m":["5.53"],"根据不同的浏览器存储的大小是不同的":["5.53"],"px":["5.54"],"声明的变量有自身的作用域":["5.55"],"arguments":["5.64","13.14","71.14"],"匹配到第一个就返回":["5.66"],"如果当前组件没有依赖关系":["7.2"],"那么放在那个生命周期中请求都是可以的":["7.2"],"拿不到":["7.3"],"方法":["7.3","13.83","71.83"],"nexttick":["7.4"],"mounted":["7.6","7.8"],"初始化的时候从上一次的历史开始播放":["7.9"],"子组件可以直接修改父组件的数据":["7.11"],"依赖注入":["7.11"],"父组件":["7.11"],"md":["9.0"],"vitepress":["10.0"],"等待几十秒后":["11.2"],"finish":["11.2"],"完成安装":["11.2"],"settings":["11.3"],"在appearance":["11.3"],"behavior":["11.3"],"appearance的":["11.3"],"theme":["11.3"],"中可选择主题":["11.3"],"项目结构相对复杂":["11.4"],"先简单了解即可":["11.4"],"随之后序学习的深入再逐步为大家介绍":["11.4"],"回到ide":["11.7"],"在右上角的设备列表中选择刚刚创建的模拟器":["11.7"],"默认已经选中":["11.7"],"点击运行按钮":["11.7"],"查看模拟器":["11.7"],"按照要求完成注册":["11.8"],"登录即可":["11.8"],"登录成功后":["11.8"],"再次点击运行按钮":["11.8"],"即可将应用运行到真机":["11.8"],"鸿蒙应用开发语言":["11.8"],"之后创建typescript文件":["11.13"],"点击new":["11.13"],"file":["11.13"],"注意":["11.13","11.82"],"文件的后缀为":["11.13"],"之后就可以编写typescript代码并运行了":["11.13"],"number":["11.17","11.112","13.77","13.78","13.79","71.77","71.78","71.79"],"你好":["11.22","84.4"],"hello":["11.22","11.30","11.43"],"true":["11.28","11.65"],"num":["11.32"],"张三":["11.34"],"李四":["11.34"],"等等":["11.34"],"years":["11.36"],"old":["11.36"],"introduce":["11.37"],"调用父类构造器对继承自父类的属性进行初始化":["11.39"],"在子类中可以使用":["11.39"],"关键字访问继承自父类的属性和方法":["11.39"],"关键字访问父类定义的方法":["11.39"],"修饰的属性或方法是公有的":["11.40"],"可以在任何地方被访问到":["11.40"],"默认所有的属性和方法都是":["11.40"],"的":["11.40","69.5","69.6","84.8","87.5"],"am":["11.43"],"a":["11.43"],"这样一来":["11.45"],"之后创建的订单就可以使用":["11.45"],"这个支付方式了":["11.45"],"let":["11.45"],"new":["11.45"],"等概念都可以使用枚举类型定义":["11.48"],"向左移动":["11.49"],"向右移动":["11.49"],"red":["11.50"],"0xff0000":["11.50"],"green":["11.50","11.98"],"0x00ff00":["11.50"],"blue":["11.50","13.33","71.33"],"0x0000ff":["11.50"],"fontsize":["11.50"],"small":["11.50"],"medium":["11.50"],"large":["11.50"],"extralarge":["11.50"],"导出":["11.52"],"moduleb":["11.55"],"说明":["11.58"],"用于声明该变量为状态变量":["11.58"],"justifycontent":["11.65"],"flexalign":["11.65"],"center":["11.65"],"除去每个组件的专有事件":["11.67"],"还有各组件都支持的通用事件":["11.67"],"通用事件也可通过":["11.67"],"我们前边所编写的每个页面就相当于是组件树的根节点":["11.69"],"装饰器的作用就是标识该组件为组件树的根节点":["11.69"],"也就是一个页面的入口组件":["11.69"],"light":["11.70","11.107"],"playandpausepage":["11.73"],"fruitpage":["11.76"],"也就是所有元素的key都发生了变化":["11.77"],"因此ui界面更新时需要为每个元素都重新创建组件对象":["11.77"],"即便原有的元素没有发生变化也无法复用之前的组件":["11.77"],"这样一来就导致了性能浪费":["11.77"],"此时我们就可以考虑提供第三个参数":["11.77"],"如下":["11.77"],"常用组件":["11.77"],"png":["11.80","21.1"],"须使用":["11.80"],"icon":["11.80","72.0","85.4"],"的返回值也是resource类型":["11.80"],"因此其也可以直接作为":["11.80"],"如":["11.80"],"pixelmap指的是图片的":["11.80"],"像素位图":["11.80"],"其通常是一个二维数组":["11.80"],"数组中的每个元素对应着图片中的一个像素":["11.80"],"其包含了该像素的颜色等信息":["11.80"],"像素位图主要用于图片编辑的场景":["11.80"],"type":["11.82"],"无需指定具体版本":["11.82"],"系统会自动根据所处环境选择相应版本":["11.82"],"例如上述的":["11.82"],"可通过":["11.82"],"引用":["11.82"],"的值可通过":["11.82"],"attribute":["11.83","11.84","11.89","11.90","11.91","11.123"],"solution":["11.83","11.84","11.87","11.89","11.90","11.91","11.92","11.93","11.96","11.107"],"imageobjectfit":["11.83"],"component":["11.87","11.90","11.96","11.103","11.121","11.123","11.128"],"parameter":["11.87","11.96","11.103","11.110","11.121"],"textparameterpage":["11.87"],"fontsizepage":["11.89"],"pages":["11.90","11.96","11.103","11.121","11.123","11.128"],"text":["11.90","11.91"],"fontweightpage":["11.90"],"textalignpage":["11.92"],"textoverflowpage":["11.93"],"src":["11.96"],"main":["11.96"],"ets":["11.96","11.128"],"buttonparameter":["11.96"],"buttonattributepage":["11.99"],"event":["11.100","11.107"],"buttoneventpage":["11.100"],"toggleparameter":["11.103"],"toggleattributepage":["11.106"],"textinputparameter":["11.110"],"纯数字输入模式":["11.112"],"textinputattribute":["11.115"],"为最新内容":["11.117"],"input":["11.118"],"textinputevent":["11.118"],"progressparameter":["11.121"],"progress":["11.123"],"progressstyle":["11.123"],"progresscolor":["11.124"],"dialog":["11.128"],"toastpage":["11.128"],"alertdialogpage":["11.130"],"actionsheetpage":["11.133"],"timepickerdialog":["11.136"],"时间滑动选择器弹窗":["11.136"],"customdialogpage":["11.139"],"是一个完全有效的函数名":["13.2","71.2"],"不能作为标识符":["13.3","71.3"],"这是多行注释":["13.4","71.4"],"函数体":["13.5","71.5"],"if":["13.7","71.7"],"throw":["13.7","71.7"],"delete":["13.7","71.7"],"及更晚的版本中使用":["13.12","71.12"],"变量会保存一个特殊值":["13.13","71.13"],"found":["13.14","71.14"],"不能定义名为":["13.14","71.14"],"eval":["13.14","71.14"],"和":["13.14","13.21","13.26","13.65","31.1","71.14","71.21","71.26","71.65"],"的变量":["13.14","71.14"],"否则会导致语法错误":["13.14","13.35","71.14","71.35"],"syntaxerror":["13.16","71.16"],"标识符已经声明过了":["13.16","71.16"],"dead":["13.17","71.17"],"zone":["13.17","71.17"],"在此阶段引用任何后面才声明的变量都会抛出":["13.17","71.17"],"但是可以用在":["13.21","71.21"],"of":["13.21","71.21"],"因为每次迭代只是创建一个新的变量":["13.21","71.21"],"symbol":["13.24","71.24"],"表示值为符号":["13.24","71.24"],"始终返回":["13.26","71.26"],"但要注意":["13.26","71.26"],"这个操作符会为了比较而转换它的操作数":["13.26","71.26"],"及其他大小混写形式":["13.27","71.27"],"是有效的标识符":["13.27","71.27"],"但不是布尔值":["13.27","71.27"],"不存在":["13.28","71.28"],"十六进制数字中的字母大小写均可":["13.30","71.30"],"125e7":["13.31","13.34","71.31","71.34"],"等于":["13.31","71.31"],"会将小数点后至少包含":["13.31","71.31"],"个零的浮点值转换为科学计数法":["13.31","71.31"],"positive":["13.32","71.32"],"也可以获取正":["13.32","71.32"],"负":["13.32","71.32"],"这两个属性包含的值分别就是":["13.32","71.32"],"不可以转换为数值":["13.33","71.33"],"可以转换为数值1":["13.33","71.33"],"00":["13.34","71.34"],"0908":["13.34","71.34"],"x03a3":["13.36","71.36"],"表示希腊字符":["13.36","71.36"],"bar":["13.45","71.45"],"的实例":["13.47","71.47"],"所有内置符号属性都是不可写":["13.47","71.47"],"不可枚举":["13.47","71.47"],"不可配置的":["13.47","71.47"],"数值或布尔值表示":["13.60","71.60"],"通常与":["13.60","71.60"],"的返回值相同":["13.60","71.60"],"则调用":["13.63","13.82","71.63","71.82"],"tostring":["13.63","13.83","71.63","71.83"],"并再次应用其他规则":["13.63","71.63"],"变量类型从对象变成数值":["13.63","71.63"],"infinity":["13.65","47.2","71.65"],"会被当成":["13.65","71.65"],"处理":["13.65","71.65"],"所以右移之后结果变":["13.71","71.71"],"得非常之大":["13.71","71.71"],"对逻辑与操作符来说":["13.74","71.74"],"如果第一个操作数是":["13.74","71.74"],"那么无论第二个操作数是什么值":["13.74","71.74"],"结果也不可能等于":["13.74","71.74"],"同样与逻辑与类似":["13.75","71.75"],"逻辑或操作符也具有短路的特性":["13.75","71.75"],"只不过对逻辑或而言":["13.75","71.75"],"第一个操作数求值为":["13.75","71.75"],"第二个操作数就不会再被求值了":["13.75","71.75"],"如果有不是数值的操作数":["13.77","13.78","71.77","71.78"],"则先在后台用":["13.77","13.78","13.79","71.77","71.78","71.79"],"将其转换为数值":["13.77","71.77"],"然后再应用上述规则":["13.77","13.78","13.79","71.77","71.78","71.79"],"函数将其转换为数值":["13.78","13.79","71.78","71.79"],"string":["13.82","71.82"],"函数":["13.82","71.82","87.6"],"分别获取":["13.82","71.82"],"如果对象没有":["13.83","71.83"],"然后再将得到的字符串转换为数值":["13.83","71.83"],"如果有任一操作数是布尔值":["13.84","71.84"],"则将其转换为数值再执行比较":["13.84","71.84"],"num的值为0":["13.90","71.90"],"viewmodel的缩写":["14.2"],"这个变量表示":["14.2"],"实例":["14.2"],"com":["14.3"],"不需要运行的时候进行编译":["14.4"],"只重新渲染变化的组件":["14.5","17.0"],"是在前端动态生成的":["15.1"],"在服务端处理好并返回的是":["15.1"],"html":["15.2"],"需要再次请求首屏数据":["15.2"],"白屏时间长":["15.2"],"后续交互采用客户端渲染的方式":["15.3"],"nuxtjs":["15.3"],"的操作":["16.1"],"虚拟":["16.1"],"不依赖真实平台环境从而也可以实现跨平台":["16.1"],"高效更新视图":["16.3"],"产生过多也会造成性能浪费":["17.1"],"算法":["18.0"],"组件级watcher":["18.0"],"proxy":["19.1"],"map":["19.2"],"这些数据结构不支持":["19.2"],"reactive":["19.3","60.5"],"数组中如果是对象数据类型也会进行递归劫持":["20.1"],"trigger":["21.2"],"通知视图更新":["22.0"],"dep":["22.0"],"notify":["22.0"],"当我们选择新增属性时":["22.0"],"可以考虑使用对象合并的方式实现":["22.0"],"info":["22.0"],"newproperty1":["22.0"],"newproperty2":["22.0"],"he":["22.0"],"实现的":["25.1"],"内部会调用":["26.0"],"newval":["26.0"],"oldval":["26.0"],"vue3中的模板转换":["27.0"],"做了更多的优化操作":["27.0"],"vue2":["27.0"],"仅仅是标记了静态节点而已":["27.0"],"更新的时候采用虚拟":["28.0"],"dom":["28.0"],"的方式进行":["28.0"],"diff":["28.0"],"算法更新":["28.0"],"实例生命周期":["28.0"],"优先级高于":["30.0"],"所有的子实例也会被销毁":["31.1"],"该钩子在服务器端渲染期间不被调用":["31.1"],"keep":["31.1"],"alive":["31.1"],"activated":["31.1"],"deactivated":["31.1"],"中新增了组合式":["31.2"],"api":["31.2"],"生命周期钩子":["31.2"],"但是不存在":["31.2"],"onbeforecreate":["31.2"],"oncreated":["31.2"],"钩子":["31.2"],"双指针的方式进行比较":["32.1"],"优化":["32.2"],"20240314160716656":["32.2"],"20240314160803893":["32.2"],"元素来匹配数据项的顺序":["33.1"],"而是就地更新每个元素":["33.1"],"并且确保他们在每个索引位置正确渲染":["33.1"],"20240314161812712":["33.2"],"了":["34.1","37.0"],"上实现":["34.2"],"缓存插件":["34.3"],"point":["35.1"],"jw":["36.0"],"所以在性能上没有可优势":["37.0"],"parsefloat":["38.0"],"tofixed":["38.0"],"这可以用于优化更新性能":["39.1"],"item":["39.2"],"key":["39.2"],"提取公共逻辑非常方便":["40.1"],"但是不怎么常用":["40.3"],"s":["41.3"],"普通插槽渲染在父级":["41.3"],"作用域插槽在组件内部渲染":["41.3"],"的语法糖":["42.1"],"b":["42.3"],"c":["42.3"],"vue3":["43.0"],"语法被移除":["43.0"],"属性":["45.0"],"将自己也注册到组件中":["45.0"],"出来":["46.0"],"sync":["46.0"],"修饰符":["46.0"],"如果提供了超时时间并且组件加载也超时了":["47.2"],"则使用加载失败时使用的组件":["47.2"],"timeout":["47.2"],"渲染加载完毕后的组件":["47.3"],"无需重新生成节点":["49.1"],"缓存组件":["49.3"],"keytocache":["49.3"],"ts":["49.3","60.4"],"expect":["49.3"],"error":["49.3","67.3"],"can":["49.3"],"data":["49.3"],"be":["49.3"],"keepalive":["49.3"],"在firstcomponent的vnode中增加keep":["49.3"],"alive属性":["49.3"],"指令与元素解绑时调用":["50.2"],"unbind":["50.3"],"removeeventlistener":["50.3"],"mergeoptions":["51.0"],"外观模式":["51.0"],"提供了统一的接口":["51.0"],"用来访问子系统中的一群接口":["51.0"],"once":["52.0"],"分页":["52.0"],"虚拟滚动":["52.0"],"时间分片等策略":["52.0"],"提速":["53.0"],"终极的手段":["53.0"],"ssr":["53.0"],"对首屏做服务端渲染":["53.0"],"frontend":["54.0"],"层解决跨域问题":["54.0"],"在页面切换时通过导航守卫可以取消上一个页面中正在发送的请求":["55.0"],"当用户登录后端会返回对应的按钮权限":["56.1"],"在按钮上使用此指令":["56.1"],"指令内部会判断用户是否有此按钮权限":["56.1"],"如果没有则会移除按钮":["56.1"],"守卫中传给":["57.0"],"next":["57.0"],"的回调函数":["57.0"],"创建好的组件实例会作为回调函数的参数传入":["57.0"],"cli":["58.0"],"webpack":["58.0"],"fallback":["58.0"],"问题":["59.0"],"支持并不友好":["60.4"],"sessionstorage":["62.0","84.6"],"promise":["63.0"],"则没进行包装":["63.0"],"简单的组件仍然可以采用":["65.0"],"进行编写":["65.0"],"在复杂的逻辑中有着明显的优势":["65.0"],"优化动态节点":["66.0"],"blocktree":["66.0"],"进行靶向更新等":["66.0"],"相比":["66.0"],"来说":["66.0"],"新增了很多新的特性":["66.0"],"则会阻断传播":["67.1"],"收集到错误后":["67.3"],"提交到前端监控系统中":["67.3"],"这样我们可以分析前端代码的异常信息":["67.3"],"进行非props比较":["68.1"],"ref比较":["68.1"],"dynamic":["68.1"],"slots":["68.1","73.13"],"动态插槽":["68.1"],"dev":["68.1"],"root":["68.1"],"hoisted":["68.1"],"表示静态节点":["68.1"],"内容变化":["68.1"],"不比较儿子":["68.1"],"bail":["68.1"],"表示diff算法应该结束":["68.1"],"标签":["68.2"],"解决方案":["68.2"],"就是将不稳定的结构也作为":["68.2"],"来进行处理":["68.2"],"父节点除了会收集动态节点之外":["68.4"],"也会收集子":["68.4"],"更新时因":["68.4"],"值不同会进行删除重新创建":["68.4"],"前后元素不一致是无法做到靶向更新的":["68.5"],"因为":["68.5"],"dynamicchildren":["68.5"],"中还有可能有其他层级的元素":["68.5"],"同时这里还生成了一个":["68.5"],"因为前后元素个数不一致":["68.5"],"所以称之为":["68.5"],"不稳定序列":["68.5"],"浏览器对象模型":["69.1"],"bom":["69.1"],"提供和浏览器交互的方法和接口":["69.1"],"domlevel4":["69.5"],"新增的内容包括替代":["69.5"],"mutation":["69.5"],"events":["69.5"],"observes":["69.5"],"xmlhttprequest":["69.6"],"activexobject":["69.6"],"export":["70.1"],"关键字":["70.1"],"使用了":["70.1"],"属性的":["70.1"],"元素不应该再在":["70.1"],"标签中包含其他":["70.1"],"代码":["70.1"],"如果两者都提供的话":["70.1"],"则浏览器只会下载并执行脚本文件":["70.1"],"从而忽略行内代码":["70.1"],"ontrack":["75.14"],"ontrigger":["75.14"],"调试侦听器的依赖":["75.14"],"参考调试侦听器":["75.14"],"转化成全局作用域":["76.7"],"模板语法都会被保留并按原样渲染":["77.6"],"最常见的用例就是显示原始双大括号标签及内容":["77.6"],"onclick2":["78.4"],"在这里进行自定义配置":["84.4"],"警告":["84.6","84.9","84.10"],"存储数据必须是同步的":["84.6"],"被持久化":["84.7"],"不会被持久化":["84.7"],"处理序列化":["84.8"],"反序列化":["84.8"],"并进行压缩":["84.8"],"请谨慎使用":["84.9","84.10"],"意外可能会出现":["84.9","84.10"],"cwd":["85.2"],"assets":["85.2"],"指定symbolid格式":["85.2"],"symbolid":["85.2"],"name":["85.2"],"changeage":["87.3"],"修改年龄":["87.3"],"showtel":["87.3"],"查看联系方式":["87.3"],"不是响应式的":["87.4"],"是响应式的":["87.4"],"深层次":["87.5"],"层级不深":["87.7"],"都可以":["87.7"],"且层级较深":["87.7"],"推荐使用":["87.7"],"changegender":["87.8"],"修改性别":["87.8"]}]'},e={"0.0":{t:"# CSS\r",p:"\r",l:"basic/css.html",a:"css"},"0.1":{t:"介绍一下 CSS 的盒子模型\r",p:`CSS 的盒子模型有哪些:标准盒子模型、IE 盒子模型
CSS 盒子模型的区别
	标准盒子模型:	margin、border、padding、content
	IE 盒子模型: margin、cont ...`,l:"basic/css.html#介绍一下-css-的盒子模型",a:"介绍一下-css-的盒子模型"},"0.2":{t:"line-height 和 height 的区别?\r",p:`line-height: 是每一行文字的高, 如果文字换行,则整个盒子的高度会增大(行数*行高)
height: 是一个死值, 就是这个盒子的高度。

`,l:"basic/css.html#line-height-和-height-的区别",a:"line-height-和-height-的区别"},"0.3":{t:"CSS 选字符有哪些？哪些属性可以继承？\r",p:`CSS 选择符:
通配(*)
id 选择器(#)
类选择器(.)
标签选择器(div p h1)
相邻选择器(+)
后代(子元素)选择器(ul li)
子元素选择器(&gt;)
属性选择器(a[hre ...`,l:"basic/css.html#css-选字符有哪些-哪些属性可以继承",a:"css-选字符有哪些-哪些属性可以继承"},"0.4":{t:"CSS 优先算法如何计算？\r",p:`优先级比较:!important &gt; 内联样式 &gt; id &gt; class &gt; 标签 &gt; 通配

CSS 权重计算:
第一: 内联样式 style 	权重值:1000
第二 ...`,l:"basic/css.html#css-优先算法如何计算",a:"css-优先算法如何计算"},"0.5":{t:"用 CSS 画一个三角形?\r",p:`用边框画(border)
&lt;html&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;

 ...`,l:"basic/css.html#用-css-画一个三角形",a:"用-css-画一个三角形"},"0.6":{t:"一个盒子不给宽度和高度如何实现水平垂直居中?\r",p:`&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;
&lt;/di ...`,l:"basic/css.html#一个盒子不给宽度和高度如何实现水平垂直居中",a:"一个盒子不给宽度和高度如何实现水平垂直居中"},"0.7":{t:"display 有哪些值？说说他们的作用？\r",p:`


值
描述




none
此元素不会被显示


block
此元素将显示为块元素, 此元素前后会带有换行符


inline
默认, 此元素会被显示为内联元素, 元素前后没有换行符


inl ...`,l:"basic/css.html#display-有哪些值-说说他们的作用",a:"display-有哪些值-说说他们的作用"},"0.8":{t:"对 BFC(块级格式化上下文:Block Formatting Context)的理解？\r",p:`BFC 就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。

了解 BFC： 块级格式化上下文
BFC 的原则：一个元素具有 BFC，那么内部元素再怎么弄，都不会影响到外面的元素
如 ...`,l:"basic/css.html#对-bfc-块级格式化上下文-block-formatting-context-的理解",a:"对-bfc-块级格式化上下文-block-formatting-context-的理解"},"0.9":{t:"清除浮动有哪些方式?\r",p:`方式一：触发 BFC
overflow: hidden

方式二：创建一个盒子，添加样式
div {
  clear: both;
}

方式三：创建一个虚拟标签 after（最常用）
div:aft ...`,l:"basic/css.html#清除浮动有哪些方式",a:"清除浮动有哪些方式"},"0.10":{t:"在网页中应该使用奇数还是偶数的字体大小？为什么呢？\r",p:`偶数。让文字在浏览器上表现的更好看

说明：UI 给前端设计图一般都是偶数，这样不管是布局也好，转换 px 也好，方便一点

`,l:"basic/css.html#在网页中应该使用奇数还是偶数的字体大小-为什么呢",a:"在网页中应该使用奇数还是偶数的字体大小-为什么呢"},"0.11":{t:"position 有几种定位？分别是根据什么定位的？\r",p:`
static：默认值，没有定位
fixed：固定定位，相对于浏览器窗口进行定位
relative：相对定位，相对于自身定位，不脱离文档流
absolute：绝对定位，相对于第一个有 relative ...`,l:"basic/css.html#position-有几种定位-分别是根据什么定位的",a:"position-有几种定位-分别是根据什么定位的"},"0.12":{t:"写一个左中右布局占满屏幕，其中左右两块固定 200px，中间自适应宽，要求先加载中间块，请写出结构及样式。\r",p:`双飞翼布局
&lt;html&gt;
  &lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;div class=&q ...`,l:"basic/css.html#写一个左中右布局占满屏幕-其中左右两块固定-200px-中间自适应宽-要求先加载中间块-请写出结构及样式。",a:"写一个左中右布局占满屏幕-其中左右两块固定-200px-中间自适应宽-要求先加载中间块-请写出结构及样式。"},"0.13":{t:"什么是 CSS reset？\r",p:`reset.css 是一个 css 文件，用来重置 css 样式。
Normalize.css 为了增强跨浏览器渲染的一致性，我们使用了 normalize.css，这是由 Nicolas Galla ...`,l:"basic/css.html#什么是-css-reset",a:"什么是-css-reset"},"0.14":{t:"css sprite 是什么？有什么优缺点？\r",p:`

是什么
把多个小图标合并成一张大图片，又称精灵图


优缺点
优点：减少了 http 请求的次数，提升了性能
缺点：维护比较差（例如图片位置进行调整或者内容宽高修改，都会造成维护问题）


`,l:"basic/css.html#css-sprite-是什么-有什么优缺点",a:"css-sprite-是什么-有什么优缺点"},"0.15":{t:"display:none 和 visibility:hidden 的区别？\r",p:`


区别
display:none
visibility:hidden




占用位置区别
是不占位置的
虽然隐藏了，但是占用位置


重绘和回流的问题
重绘并回流
只重绘不回流




产生回流 ...`,l:"basic/css.html#display-none-和-visibility-hidden-的区别",a:"display-none-和-visibility-hidden-的区别"},"0.16":{t:"opacity 和 rgba 的区别？\r",p:`共同性：实现透明效果



区别
opacity
rgba




取值范围
取值范围 0-1 之间，0 表示完全透明，1 表示不透明
R 表示红色，G 表示绿色，B 表示蓝色，取值可以在正整数或者百 ...`,l:"basic/css.html#opacity-和-rgba-的区别",a:"opacity-和-rgba-的区别"},"0.17":{t:"::before 和 :after 中双冒号和单冒号有什么区别?解释一下这两个伪元素的作用?\r",p:`

区别
一个冒号(:)是伪类, 两个冒号(::)是伪元素	====&gt;是为了做区分


是什么?作用
before 在元素之前、 after 在元素之后
作用: 清除浮动、样式布局上也有作用

 ...`,l:"basic/css.html#before-和-after-中双冒号和单冒号有什么区别-解释一下这两个伪元素的作用",a:"before-和-after-中双冒号和单冒号有什么区别-解释一下这两个伪元素的作用"},"0.18":{t:"怎么让 chrome 支持小于 12px 的文字\r",p:`Chorme 浏览器默认字体大小是 16px, 每个浏览器默认字体大小不一定一样
解决办法:
{
  --webkit-transform: scale(0.75)
}

`,l:"basic/css.html#怎么让-chrome-支持小于-12px-的文字",a:"怎么让-chrome-支持小于-12px-的文字"},"0.19":{t:"rem 和 em 的 区别\r",p:`相对于 font-size
em 是针对于父元素的 font-size
rem 是针对于根(html)元素的 font-size
`,l:"basic/css.html#rem-和-em-的-区别",a:"rem-和-em-的-区别"},"0.20":{t:"webkit 表单输入框 placeholder 的颜色值能改变吗\r",p:`input::-webkit-input-placeholder{
  color: red
}

`,l:"basic/css.html#webkit-表单输入框-placeholder-的颜色值能改变吗",a:"webkit-表单输入框-placeholder-的颜色值能改变吗"},"0.21":{t:"响应式\r",p:`

是什么?
一个 URL 可以响应多端


语法结构
@media only screen and (max-width: 1000px){
  
}

only: 可以排除不支持媒体查询的浏览器
 ...`,l:"basic/css.html#响应式",a:"响应式"},"0.22":{t:"布局方案\r",p:`

什么情况下采用响应式布局?
数据不是特别多, 用户量不是特别大, 纯展示类的项目适合响应式布局
例如: 公司的官网, 专题页面
特别追求性能的项目,不太适合响应式, 因为如果添加了很多的响应式,  ...`,l:"basic/css.html#布局方案",a:"布局方案"},"2.0":{t:"# HTML\r",p:"\r",l:"basic/html.html",a:"html"},"2.1":{t:"行内元素有哪些?块级元素有哪些?空(void)元素有哪些?\r",p:`行内元素:span img input......
块级元素:div footer header section p h1-h6...
空元素:br hr...

元素之间的转换问题
通过 displ ...`,l:"basic/html.html#行内元素有哪些-块级元素有哪些-空-void-元素有哪些",a:"行内元素有哪些-块级元素有哪些-空-void-元素有哪些"},"2.2":{t:"页面导入样式时, 使用 link 和@import 有什么区别?\r",p:`
区别一: link 现有, 后有@import, 所以在兼容性上 link 比@import 好
区别二: link 和@import 加载顺序有区别。浏览器先加载标签 link, 后加载@impo ...`,l:"basic/html.html#页面导入样式时-使用-link-和-import-有什么区别",a:"页面导入样式时-使用-link-和-import-有什么区别"},"2.3":{t:"title 和 h1 的区别?b 和 strong 的区别?i 和 em 的区别?\r",p:`title 和 h1 的区别:
定义:
title:title 概括了网站信息, 可以告诉搜索引擎或者用户关于这个网站的内容主题是什么
h1:文章主题内容, 告诉蜘蛛我们的网站内容最主要是什么
区别: ...`,l:"basic/html.html#title-和-h1-的区别-b-和-strong-的区别-i-和-em-的区别",a:"title-和-h1-的区别-b-和-strong-的区别-i-和-em-的区别"},"2.4":{t:"img 标签的 title 和 alt 有什么区别?\r",p:`
区别一
title: 鼠标移入到图片显示的值
alt: 图片无法加载时显示的值
区别二
在 SEO 的层面上, 蜘蛛抓取不到图片的内容, 所以前端在写 img 标签的时候,为了增加 SEO 效果要加 ...`,l:"basic/html.html#img-标签的-title-和-alt-有什么区别",a:"img-标签的-title-和-alt-有什么区别"},"2.5":{t:"png、jpg、gif 这些图片格式解释一下, 分别什么时候用?\r",p:`
png: 无损压缩, 尺寸体积要比 jpg/jpeg 的大。适合做小图标
jpg: 采用压缩算法, 有一点失真, 比 png 体积小。适合做 banner 等中大图片
gif: 一般是做动图的。
w ...`,l:"basic/html.html#png、jpg、gif-这些图片格式解释一下-分别什么时候用",a:"png、jpg、gif-这些图片格式解释一下-分别什么时候用"},"2.6":{t:"什么是语义化标签\r",p:`header、footer、section 等

易读性和维护性更好
SEO 成分会更好, 蜘蛛抓取更好
IE8 不兼容 HTML5 标签的.解决:可以通过 html5shiv.js 去处理


`,l:"basic/html.html#什么是语义化标签",a:"什么是语义化标签"},"3.0":{t:"# iOS 兼容问题\r",p:"\r",l:"basic/iOS 兼容问题.html",a:"ios-兼容问题"},"3.1":{t:"如何关闭 iOS 键盘首字母自动大小写\r",p:` &lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt;

`,l:"basic/iOS 兼容问题.html#如何关闭-ios-键盘首字母自动大小写",a:"如何关闭-ios-键盘首字母自动大小写"},"3.2":{t:"iOS 系统中元素被触摸时产生的半透明遮罩怎么去掉\r",p:`a, button, input, textarea {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

`,l:"basic/iOS 兼容问题.html#ios-系统中元素被触摸时产生的半透明遮罩怎么去掉",a:"ios-系统中元素被触摸时产生的半透明遮罩怎么去掉"},"3.3":{t:"禁止 iOS 长按时不触发系统的菜单,禁止 iOS&android 长按时下载图片\r",p:"\r",l:"basic/iOS 兼容问题.html#禁止-ios-长按时不触发系统的菜单-禁止-ios-android-长按时下载图片",a:"禁止-ios-长按时不触发系统的菜单-禁止-ios-android-长按时下载图片"},"3.4":{t:"禁止 iOS 长按触发系统菜单\r",p:`html, body {
  touch-callout: none;
  -webkit-touch-callout: none;
}

`,l:"basic/iOS 兼容问题.html#禁止-ios-长按触发系统菜单",a:"禁止-ios-长按触发系统菜单"},"3.5":{t:"禁止下载图片\r",p:`img {
  user-select: none;
  -webkit-user-select: none;
}

`,l:"basic/iOS 兼容问题.html#禁止下载图片",a:"禁止下载图片"},"3.6":{t:"禁止 iOS 和 android 用户选中文字\r",p:`text, textarea {
  user-select: none;
  -webkit-user-select: none;
}

`,l:"basic/iOS 兼容问题.html#禁止-ios-和-android-用户选中文字",a:"禁止-ios-和-android-用户选中文字"},"4.0":{t:"数据类型\r",p:"\r",l:"basic/JavaScript 核心原理精讲.html",a:"数据类型"},"4.1":{t:"数据类型分类\r",p:"基础数据类型：Undefined、Null、Boolean、String、Number、Symbol、BigInt引用数据类型： Object(Array、RegExp、Date、Math、Funct ...",l:"basic/JavaScript 核心原理精讲.html#数据类型分类",a:"数据类型分类"},"4.2":{t:"数据类型检测\r",p:`

typeof


instanceof
typeof 和 instanceof 的差异

instanceof 可以准确地判断复杂引用数据的类型，但是不能正确判断基础数据类型
而 typeof 也 ...`,l:"basic/JavaScript 核心原理精讲.html#数据类型检测",a:"数据类型检测"},"4.3":{t:"数据类型转换\r",p:`

强制类型转换
Number()、parseInt()、parseFloat()、toString()、String()、Boolean()


隐式类型转换

逻辑运算符&amp;&amp;、|| ...`,l:"basic/JavaScript 核心原理精讲.html#数据类型转换",a:"数据类型转换"},"4.4":{t:"浅拷贝和深拷贝\r",p:"\r",l:"basic/JavaScript 核心原理精讲.html#浅拷贝和深拷贝",a:"浅拷贝和深拷贝"},"4.5":{t:"浅拷贝\r",p:"浅拷贝： 自己创建一个新的对象，来接受你要重新复制或引用的对象值。如果对象属性是基本的数据类型，复制的就是基本类型的值给新对象，但如果属性是引用数据类型，复制的就是内存中的地址，如果其中一个对象改变了 ...",l:"basic/JavaScript 核心原理精讲.html#浅拷贝",a:"浅拷贝"},"4.6":{t:"深拷贝\r",p:`浅拷贝只是创建了一个新的对象，复制了原有对象的基本类型的值。
对于复杂引用数据类型，其在堆内存中完全开辟了一块内存地址，并将原有的对象完全复制过来存放。
深拷贝原理
将一个对象从内存中完整地拷贝出来一 ...`,l:"basic/JavaScript 核心原理精讲.html#深拷贝",a:"深拷贝"},"4.7":{t:"继承\r",p:`继承是面向对象的，使用这种方式我们可以更好地复用以前的开发代码，缩短开发的周期、提升开发效率
继承可以使得子类别具有父类的各种方法和属性
`,l:"basic/JavaScript 核心原理精讲.html#继承",a:"继承"},"4.8":{t:"常见的实现继承的方法\r",p:`一、原型链继承
原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例
1. 每一个构造函数都有一个原型对象
2. 原型对象又包含一个指向构造函数的指针
3. 而实例则包含一个原型对象的指 ...`,l:"basic/JavaScript 核心原理精讲.html#常见的实现继承的方法",a:"常见的实现继承的方法"},"4.9":{t:"如何实现new、apply、call、bind的底层逻辑\r",p:`JavaScript中的apply、call和bind方法是前端代码开发中相当重要的概念，并且与this的指向密切相关
new原理介绍
new 关键词的主要作用，就是指向一个构造函数，返回一个实例对象 ...`,l:"basic/JavaScript 核心原理精讲.html#如何实现new、apply、call、bind的底层逻辑",a:"如何实现new、apply、call、bind的底层逻辑"},"4.10":{t:"闭包\r",p:`JavaScript 的作用域： 指变量能够被访问到的范围
`,l:"basic/JavaScript 核心原理精讲.html#闭包",a:"闭包"},"4.11":{t:"闭包的定义\r",p:`红宝书： 闭包是指有权访问另外一个函数作用域中的变量的函数
MDN： 一个函数和对其周围状态的引用捆绑在一起(或者说函数被引用包围)，这样的组合就是闭包。也就是说，闭包让你可以在一个内层函数访问到起外 ...`,l:"basic/JavaScript 核心原理精讲.html#闭包的定义",a:"闭包的定义"},"4.12":{t:"闭包产生的原因\r",p:`作用域链的基本概念： 当访问一个变量时，代码解释器会首先在当前的作用域查找，如果没找到，就去腹肌作用域查找，直到找到该变量或者不存在父级作用域中。
闭包产生的本质就是当前环境中存在指向父级作用域的引用 ...`,l:"basic/JavaScript 核心原理精讲.html#闭包产生的原因",a:"闭包产生的原因"},"4.13":{t:"闭包的表现形式\r",p:`
返回一个函数
在定时器、时间监听、Ajax 请求、Web Workers 或者任何异步中，只要使用了回调函数，实际上就是在使用闭包
作为函数参数传递的形式
IIFE(立即执行函数)，创建了闭包，保存 ...`,l:"basic/JavaScript 核心原理精讲.html#闭包的表现形式",a:"闭包的表现形式"},"4.14":{t:"JSON.stringify\r",p:`JSON.stringify是日常开发中经常用到的 JSON 对象中的方法
JSON.parse
JSON.parse 方法用来解析 JSON 字符串，构造有字符串描述的 JavaScript 值或对 ...`,l:"basic/JavaScript 核心原理精讲.html#json-stringify",a:"json-stringify"},"4.15":{t:"数组\r",p:"\r",l:"basic/JavaScript 核心原理精讲.html#数组",a:"数组"},"4.16":{t:"Array 的构造器\r",p:`Array 构造器用于创建一个新的数组，通常推荐使用对象字面量的方式创建一个数组
new Array
new Array(arg1,arg2...)参数长度为0 或长度大于等于 2 时，传入的参数将按 ...`,l:"basic/JavaScript 核心原理精讲.html#array-的构造器",a:"array-的构造器"},"4.17":{t:"Array 的判断\r",p:`Array.isArray
用来判断一个变量是否为数组类型
`,l:"basic/JavaScript 核心原理精讲.html#array-的判断",a:"array-的判断"},"4.18":{t:"Array 的方法\r",p:"改变自身的方法：pop、push、reverse、shift、sort、splice、unshift、以及两个 ES6 新增的方法 copyWithin和 fill不改变自身的方法：concat、jo ...",l:"basic/JavaScript 核心原理精讲.html#array-的方法",a:"array-的方法"},"4.19":{t:"数组扁平化\r",p:`数组的扁平化其实就是讲一个嵌套多层的数组 array(嵌套可以是任何层数)转化为只有一层的数组
扁平化实现方法


普通的递归实现
通过循环递归的方式，一项一项地去遍历，如果每一项还是数组，那么就继续 ...`,l:"basic/JavaScript 核心原理精讲.html#数组扁平化",a:"数组扁平化"},"4.20":{t:" ",p:"",l:"basic/JavaScript 核心原理精讲.html#",a:""},"4.21":{t:"数组排序\r",p:`时间复杂度： 说的更多地是通过 O(nlogn)以及 O(n)等来衡量，其实大多数时候我们对此并未建立形象的认知
空间复杂度： 对一个算法在运行过程中临时占用存储空间大小的度量
`,l:"basic/JavaScript 核心原理精讲.html#数组排序",a:"数组排序"},"4.22":{t:" ",p:"",l:"basic/JavaScript 核心原理精讲.html#",a:""},"4.23":{t:"排序分类\r",p:`比较类排序： 通过比较来决定元素之间的相对次序，其时间复杂度不能突破 O(nlogn)，因此也成为非线性时间比较类排序。
非比较类排序： 不通过比较来决定元素之间的相对次序，它可以突破基于比较排序的时 ...`,l:"basic/JavaScript 核心原理精讲.html#排序分类",a:"排序分类"},"4.24":{t:"sort排序\r",p:`通过 sort 方法也可以实现数组的排序，默认排序顺序是先将元素转换为字符串，然后再进行排序
语法是arr.sort([compareFunction])
compareFunction

如果 co ...`,l:"basic/JavaScript 核心原理精讲.html#sort排序",a:"sort排序"},"5.0":{t:"# JS\r",p:"\r",l:"basic/js.html",a:"js"},"5.1":{t:"延迟加载 JS 有哪些方式？\r",p:`延迟加载: async defer
例如&lt;script async type=&quot;text/javascript&quot; src=&quot;*.js&quot;/&gt;
defe ...`,l:"basic/js.html#延迟加载-js-有哪些方式",a:"延迟加载-js-有哪些方式"},"5.2":{t:"JS 数据类型有哪些？\r",p:`基本类型: string、number、boolean、undefined、null、 symbol、bigint
引用类型: object
字符串和其他类型相加, 变成链接的形式
NaN 是一个数值 ...`,l:"basic/js.html#js-数据类型有哪些",a:"js-数据类型有哪些"},"5.3":{t:"null 和 undefined 的区别\r",p:`
作者在设计 js 时先设计的 null(原因: 最初设计 js 的时候借鉴了 java 语言）
null 会被隐式转化成 0, 很不容易发现错误
现有 null 后有 undefined, 出来 u ...`,l:"basic/js.html#null-和-undefined-的区别",a:"null-和-undefined-的区别"},"5.4":{t:"== 和 === 有什么不同\r",p:`== : 比较的是值
string == number || boolean || number...都会隐式转换
通过 valueOf 转换(valueOf() 方法通常由 JavaScript 在 ...`,l:"basic/js.html#和-有什么不同",a:"和-有什么不同"},"5.5":{t:"JS 微任务和宏任务\r",p:`

js 是单线程的语言


js 代码执行流程: 同步执行完 =&gt; 事件循环
同步执行完了, 才会执行事件循环的内容
进入事件循环: 请求、定时器、事件......


事件循环包含【宏任务、 ...`,l:"basic/js.html#js-微任务和宏任务",a:"js-微任务和宏任务"},"5.6":{t:"JS 作用域\r",p:`
除了函数外, JS 没有块级作用域。
作用域链: 内部可以访问外部的变量, 但是外部不能访问内部的变量
注意: 如果内部有, 优先查找内部; 如果内部没有就查找外部的
注意声明变量是用 var 还是 ...`,l:"basic/js.html#js-作用域",a:"js-作用域"},"5.7":{t:"面试的时候怎么看？\r",p:`
本层作用域有没有此变量【注意变量提升】
注意: JS 除了函数外没有块级作用域
普通声明函数是不看写函数的顺序的

`,l:"basic/js.html#面试的时候怎么看",a:"面试的时候怎么看"},"5.8":{t:"考题 1\r",p:`function c() {
  var b = 1
  function a() {
    console.log(b) // undefined
    var b = 2
    consol ...`,l:"basic/js.html#考题-1",a:"考题-1"},"5.9":{t:"考题二\r",p:`var name = 'a'
;(function () {
  if (typeof name == 'undefined') {
    var name = 'b'
    console.lo ...`,l:"basic/js.html#考题二",a:"考题二"},"5.10":{t:"考题三\r",p:`function fun(a) {
  var a = 10
  function a() {}
  console.log(a)
}
fun(100)

输出:  10

`,l:"basic/js.html#考题三",a:"考题三"},"5.11":{t:"JS 对象\r",p:`JS 对象注意点:


对象是通过 new 操作符构建出来的, 所以对象之间不相等(除了引用外)


对象注意: 引用类型


对象的 key 都是字符串类型


对象如何找属性|方法
查找规则: 现 ...`,l:"basic/js.html#js-对象",a:"js-对象"},"5.12":{t:"考题一\r",p:`console.log([1, 2, 3] === [1, 2, 3]) // false

`,l:"basic/js.html#考题一",a:"考题一"},"5.13":{t:"考题二\r",p:`var obj1 = {
  a: 'hello'
}
var obj2 = obj1
obj2.a = 'world'
console.log(obj1) // {a:'world'}
;(func ...`,l:"basic/js.html#考题二",a:"考题二"},"5.14":{t:"考题三\r",p:`var a = {}
var b = {
  key: 'a'
}
var c = {
  key: 'c'
}
a[b] = '123'
a[c] = '456'
console.log(a[b]) ...`,l:"basic/js.html#考题三",a:"考题三"},"5.15":{t:"JS 作用域+this 指向+原型考题\r",p:"\r",l:"basic/js.html#js-作用域-this-指向-原型考题",a:"js-作用域-this-指向-原型考题"},"5.16":{t:"考题一\r",p:`function Foo() {
  getName = function () {
    console.log(1)
  }
  return this
}
Foo.getName = func ...`,l:"basic/js.html#考题一",a:"考题一"},"5.17":{t:"考题二\r",p:`var o = {
  a: 10,
  b: {
    fn: function () {
      console.log(this.a)
      console.log(this)
   ...`,l:"basic/js.html#考题二",a:"考题二"},"5.18":{t:"考题三\r",p:`window.name = 'ByteDance'
function A() {
  this.name = 123
}
A.prototype.getA = function () {
  cons ...`,l:"basic/js.html#考题三",a:"考题三"},"5.19":{t:"考题四\r",p:`var length = 10
function fn() {
  return this.length + 1
}
var obj = {
  length: 5,
  test1: functio ...`,l:"basic/js.html#考题四",a:"考题四"},"5.20":{t:"JS 判断变量是不是数组, 你能写出哪些方法\r",p:"\r",l:"basic/js.html#js-判断变量是不是数组-你能写出哪些方法",a:"js-判断变量是不是数组-你能写出哪些方法"},"5.21":{t:"方式一: isArray 判断\r",p:`var arr = [1,2,3]
console.log(Array.isArray(arr))

`,l:"basic/js.html#方式一-isarray-判断",a:"方式一-isarray-判断"},"5.22":{t:"方式二: instanceof\r",p:`var arr = [1, 2, 3]
console.log(arr instanceof Array)

`,l:"basic/js.html#方式二-instanceof",a:"方式二-instanceof"},"5.23":{t:"方式三: 原型 prototype\r",p:`var arr = [1, 2, 3]
console.log(Object.prototype.toString.call(arr).indexOf('Array') &gt; -1)

`,l:"basic/js.html#方式三-原型-prototype",a:"方式三-原型-prototype"},"5.24":{t:"方式四: isPrototypeOf 判断\r",p:`var arr = [1, 2, 3]
console.log(Array.prototype.isPrototypeOf(arr))

`,l:"basic/js.html#方式四-isprototypeof-判断",a:"方式四-isprototypeof-判断"},"5.25":{t:"方式五: constructor\r",p:`var arr = [1, 2, 3]
console.log(arr.constructor.toString().indexOf('Array') &gt; -1)

`,l:"basic/js.html#方式五-constructor",a:"方式五-constructor"},"5.26":{t:"slice 是干嘛的?splice 是否会改变原数组?\r",p:"\r",l:"basic/js.html#slice-是干嘛的-splice-是否会改变原数组",a:"slice-是干嘛的-splice-是否会改变原数组"},"5.27":{t:"slice\r",p:`slice 是来截取的
slice(start?: number, end?: number): T[];

参数可以写 slice(3), slice(1,3), slice(-3)...返回的是一 ...`,l:"basic/js.html#slice",a:"slice"},"5.28":{t:"splice\r",p:`splice(start: number, deleteCount?: number): T[];
splice(start: number, deleteCount: number, ...item ...`,l:"basic/js.html#splice",a:"splice"},"5.29":{t:"JS 数组去重\r",p:"\r",l:"basic/js.html#js-数组去重",a:"js-数组去重"},"5.30":{t:"方式一: new Set\r",p:`var arr = [1, 2, 3, 4, 5, 1, 3]
function unique(arr) {
  return [...new Set(arr)]
}
console.log(uniq ...`,l:"basic/js.html#方式一-new-set",a:"方式一-new-set"},"5.31":{t:"方式二: indexOf\r",p:`var arr = [1, 2, 3, 4, 5, 1, 3]
function unique(arr) {
  var newArr = []
  for (var i = 0; i &lt; ar ...`,l:"basic/js.html#方式二-indexof",a:"方式二-indexof"},"5.32":{t:"方式三: sort\r",p:`var arr = [1, 2, 3, 4, 5, 1, 3]
function unique(arr) {
  arr = arr.sort()
  var newArr = []
  for (v ...`,l:"basic/js.html#方式三-sort",a:"方式三-sort"},"5.33":{t:"找出多维数组最大值\r",p:`var arr = [
  [4, 5, 1, 3],
  [13, 27, 18, 26],
  [32, 35, 37, 39],
  [1000, 1001, 857, 1]
]
functio ...`,l:"basic/js.html#找出多维数组最大值",a:"找出多维数组最大值"},"5.34":{t:"给字符串新增方法实现功能\r",p:`String.prototype.addPrefix = function (str) {
  return str + this
}
console.log('world'.addPrefix('h ...`,l:"basic/js.html#给字符串新增方法实现功能",a:"给字符串新增方法实现功能"},"5.35":{t:"找出字符串出现最多次数的字符以及次数\r",p:`var s = 'aaaaaaabbbbbbcccccbbbbaaaaaabbbbbcccaaa'
function getMost(str) {
  var obj = {}
  for (var  ...`,l:"basic/js.html#找出字符串出现最多次数的字符以及次数",a:"找出字符串出现最多次数的字符以及次数"},"5.36":{t:"new 操作符具体做了什么?\r",p:`
创建了一个空的对象
将空对象的原型指向于构造函数的原型
将空对象作为构造函数的上下文(改变 this 指向)
对构造函数有返回值的处理判断

`,l:"basic/js.html#new-操作符具体做了什么",a:"new-操作符具体做了什么"},"5.37":{t:"闭包\r",p:"\r",l:"basic/js.html#闭包",a:"闭包"},"5.38":{t:"1. 闭包是什么\r",p:`闭包是一个函数加上到创建函数的作用域的连接, 闭包&quot;关闭&quot;了函数的自由变量
`,l:"basic/js.html#_1-闭包是什么",a:"_1-闭包是什么"},"5.39":{t:"2. 闭包可以解决什么问题(闭包的优点)\r",p:`

内部函数可以访问到外部函数的局部变量


闭包可以解决的问题
var lis = document.getElementsByTagName('li')
for (var i = 0; i &lt ...`,l:"basic/js.html#_2-闭包可以解决什么问题-闭包的优点",a:"_2-闭包可以解决什么问题-闭包的优点"},"5.40":{t:"3. 闭包的缺点\r",p:`
变量会驻留在内存中, 造成内存损耗问题。


解决: 把闭包的函数设置为 null

var lis = document.getElementsByTagName('li')
for (var i ...`,l:"basic/js.html#_3-闭包的缺点",a:"_3-闭包的缺点"},"5.41":{t:"原型链\r",p:`
原型可以解决什么问题

对象共享属性和共享方法


谁有原型
函数拥有 prototype
对象拥有__proto__


对象查找属性或者方法的顺序
查找规则: 现在对象本身找 -&gt; 构造函 ...`,l:"basic/js.html#原型链",a:"原型链"},"5.42":{t:"JS 继承有哪些方式\r",p:"\r",l:"basic/js.html#js-继承有哪些方式",a:"js-继承有哪些方式"},"5.43":{t:"方式一: ES6\r",p:`class Parent {
  constructor() {
    this.age = 18
  }
}
class Child extends Parent {
  constructor( ...`,l:"basic/js.html#方式一-es6",a:"方式一-es6"},"5.44":{t:"方式二: 原型链继承\r",p:`function Parent() {
  this.age = 20
}
function Child() {
  this.name = '张三'
}
Child.prototype = new  ...`,l:"basic/js.html#方式二-原型链继承",a:"方式二-原型链继承"},"5.45":{t:"方式三: 借用构造函数\r",p:`function Parent() {
  this.age = 20
}
function Child() {
  Parent.call(this)
  this.name = '张三'
}
le ...`,l:"basic/js.html#方式三-借用构造函数",a:"方式三-借用构造函数"},"5.46":{t:"方式四: 组合式继承\r",p:`function Parent() {
  this.age = 20
}
function Child() {
  Parent.call(this)
  this.name = '张三'
}

C ...`,l:"basic/js.html#方式四-组合式继承",a:"方式四-组合式继承"},"5.47":{t:"说一下 call、apply、bind 的区别?\r",p:"\r",l:"basic/js.html#说一下-call、apply、bind-的区别",a:"说一下-call、apply、bind-的区别"},"5.48":{t:"共同点:\r",p:`功能一致, 可以改变 this 指向
语法: 函数.call()、函数.apply()、函数.bind()
`,l:"basic/js.html#共同点",a:"共同点"},"5.49":{t:"区别:\r",p:`
返回不同: call 和 apply 可以立即执行; bind 不会立即执行, 因为 bind 返回的是一个函数, 所以需要加()执行
参数不同: apply 第二个参数是数组; call 和 bi ...`,l:"basic/js.html#区别",a:"区别"},"5.50":{t:"场景:\r",p:`用 apply 的情况
var arr = [1, 2, 6, 54, 33, 246]
console.log(Math.max(null, arr))

用 bind 的情况
// btn 和 h ...`,l:"basic/js.html#场景",a:"场景"},"5.51":{t:"sort 背后的原理是什么?\r",p:`V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort, 数量小于 10 的数组使用 InsertionSort,比 10 大的数组则使用 QuickSort
 ...`,l:"basic/js.html#sort-背后的原理是什么",a:"sort-背后的原理是什么"},"5.52":{t:"深拷贝和浅拷贝\r",p:`共同点:复制


浅拷贝: 只复制引用, 而未复制真正的值
var arr1 = [1, 2, 3]
var arr2 = arr1

var obj1 = {
  a: 1,
  b: 2
}
va ...`,l:"basic/js.html#深拷贝和浅拷贝",a:"深拷贝和浅拷贝"},"5.53":{t:"localStorage、sessionStorage、cookie 的区别\r",p:`共同点: 在客户端存放数据
区别:


数据存放有效期
sessionStorage: 仅在当前浏览器窗口关闭之前有效[浏览器关了就没了]
localStorage: 始终有效, 窗口或者浏览器关闭了 ...`,l:"basic/js.html#localstorage、sessionstorage、cookie-的区别",a:"localstorage、sessionstorage、cookie-的区别"},"5.54":{t:"自适应\r",p:`淘宝无限适配移动端 + 布局单位使用 rem
window.addEventListener('resize', setRemUnit)
function setRemUnit () {
    le ...`,l:"basic/js.html#自适应",a:"自适应"},"5.55":{t:"var、let、const 的区别\r",p:`var、let、const共同点: 都是可以声明变量的
区别一:
​	var 具有变量提升的机制
​	let 和 const 没有变量提升的机制
区别二:
​	var 可以多次声明同一个变量
​	le ...`,l:"basic/js.html#var、let、const-的区别",a:"var、let、const-的区别"},"5.56":{t:"作用域考题\r",p:"\r",l:"basic/js.html#作用域考题",a:"作用域考题"},"5.57":{t:"考题一: let 和 const 没有变量提升性\r",p:`console.log(str) // undefined
var str = '你好'

console.log(num) // 报错
let num = 10

`,l:"basic/js.html#考题一-let-和-const-没有变量提升性",a:"考题一-let-和-const-没有变量提升性"},"5.58":{t:"考题二:var 没有自身作用域\r",p:`function demo () {
    var n = 2
    if (true) {
        var n = 1
    }
    console.log(n);  // 1 
 ...`,l:"basic/js.html#考题二-var-没有自身作用域",a:"考题二-var-没有自身作用域"},"5.59":{t:"考题三\r",p:`const obj = { a: 1 }
obj = 1111;  // 报错
obj.a = 1111 // 不报错

`,l:"basic/js.html#考题三",a:"考题三"},"5.60":{t:"将下列对象进行合并\r",p:`const a = {
    a: 1,
    b: 4
}
const b = {
    b: 2,
    c: 3
}

`,l:"basic/js.html#将下列对象进行合并",a:"将下列对象进行合并"},"5.61":{t:"方式一: Object.assign()\r",p:`let obj1 = Object.assign(a, b)
console.log(obj1);

`,l:"basic/js.html#方式一-object-assign",a:"方式一-object-assign"},"5.62":{t:"方式二:解构\r",p:`let obj1 = { ...a, ...b }
console.log(obj1);

`,l:"basic/js.html#方式二-解构",a:"方式二-解构"},"5.63":{t:"方式三: 自定义\r",p:`function extend (target, source) {
    for (var key in source) {
        target[key] = source[key]
  ...`,l:"basic/js.html#方式三-自定义",a:"方式三-自定义"},"5.64":{t:"箭头函数和普通函数有什么区别?\r",p:`

this 指向的问题
箭头函数中的 this 是在箭头函数定义时就确定的, 而且是不能修改的(call、apply、bind)
**** 箭头函数的 this 指向定义时候外层第一个普通函数的 t ...`,l:"basic/js.html#箭头函数和普通函数有什么区别",a:"箭头函数和普通函数有什么区别"},"5.65":{t:"Promise 的几种状态\r",p:`有三种状态
pending(进行中)
fulfilled(已成功)
rejected(已失败)
`,l:"basic/js.html#promise-的几种状态",a:"promise-的几种状态"},"5.66":{t:"find 和 filter 的区别\r",p:`区别一:返回的内容不同
​	filter: 返回的是数组
​	find: 返回的是具体的内容
区别二:
​	filter: 返回整体(每一个匹配到的都返回)
​	find: 匹配到第一个就返回
`,l:"basic/js.html#find-和-filter-的区别",a:"find-和-filter-的区别"},"5.67":{t:"some 和 every 的区别\r",p:`some: 如果有一项匹配,则返回 true
every: 全部匹配才会返回 true
`,l:"basic/js.html#some-和-every-的区别",a:"some-和-every-的区别"},"6.0":{t:"Tstststst",p:"",l:"basic/ts.html",a:"tstststst"},"7.0":{t:"# 一、Vue2 篇\r",p:"\r",l:"basic/vue.html",a:"一、vue2-篇"},"7.1":{t:"1. 关于生命周期\r",p:"\r",l:"basic/vue.html#_1-关于生命周期",a:"_1-关于生命周期"},"7.2":{t:"1.1 生命周期有哪些？发送请求在 created 还是 mounted ？\r",p:`Vue2.x 系统自带有8个
beforeCreated
created
beforeMount
mounted
beforeUpdate
updated
beforeDestroy
destorye ...`,l:"basic/vue.html#_1-1-生命周期有哪些-发送请求在-created-还是-mounted",a:"_1-1-生命周期有哪些-发送请求在-created-还是-mounted"},"7.3":{t:"1.2 为什么发送请求不在 beforeCreate 里？beforeCreate 和 created 有什么区别？\r",p:`为什么发送请求不在 beforeCreate 里
因为:如果请求是在 methods 中封装好的,在 beforeCreate 调用的时候, beforeCreate 阶段是拿不到 methods 里 ...`,l:"basic/vue.html#_1-2-为什么发送请求不在-beforecreate-里-beforecreate-和-created-有什么区别",a:"_1-2-为什么发送请求不在-beforecreate-里-beforecreate-和-created-有什么区别"},"7.4":{t:"1.3 在created 中如何获取 dom\r",p:`1. 只要写异步代码，获取 dom 是在异步中获取的，就可以了
   例如 setTimeout(),请求,Promise.xxx()等等...
2. 使用 Vue 系统内置的 this.$nextT ...`,l:"basic/vue.html#_1-3-在created-中如何获取-dom",a:"_1-3-在created-中如何获取-dom"},"7.5":{t:"1.4一旦进入组件会执行哪些生命周期？\r",p:`beforeCreated
created
beforeMount
mounted

`,l:"basic/vue.html#_1-4一旦进入组件会执行哪些生命周期",a:"_1-4一旦进入组件会执行哪些生命周期"},"7.6":{t:"1.5 第二次或者第 N 次进入组件会执行哪些生命周期？\r",p:`如果当前组件加入了 keep-alive,只会执行一个生命周期
activated

如果没有加入 keep-alive
beforeCreated
created
beforeMount
mount ...`,l:"basic/vue.html#_1-5-第二次或者第-n-次进入组件会执行哪些生命周期",a:"_1-5-第二次或者第-n-次进入组件会执行哪些生命周期"},"7.7":{t:"1.6 父组件引入子组件，那么生命周期执行的顺序是？\r",p:`父：beforeCreated、created、beforeMount
子：beforeCreated、created、beforeMount、mounted
父：mounted

`,l:"basic/vue.html#_1-6-父组件引入子组件-那么生命周期执行的顺序是",a:"_1-6-父组件引入子组件-那么生命周期执行的顺序是"},"7.8":{t:"1.7 加入 keep-alive 会执行哪些生命周期\r",p:`如果使用了 keep-alive 组件,当前的组件会额外新增 2 个生命周期(系统 8+ 2)
activated
deactivated

如果当前组价加入了 keep-alive,第一次进入这个组 ...`,l:"basic/vue.html#_1-7-加入-keep-alive-会执行哪些生命周期",a:"_1-7-加入-keep-alive-会执行哪些生命周期"},"7.9":{t:"1.8 你在什么情况下用过哪些生命周期？说一说生命周期的使用场景\r",p:`created		===&gt; 单组件请求
mounted		===&gt; 同步可以获取 dom,如果子组件请求后父组件请求
activated	===&gt; 判断 id 是否相等,如果不相同发 ...`,l:"basic/vue.html#_1-8-你在什么情况下用过哪些生命周期-说一说生命周期的使用场景",a:"_1-8-你在什么情况下用过哪些生命周期-说一说生命周期的使用场景"},"7.10":{t:"2.关于组件\r",p:"\r",l:"basic/vue.html#_2-关于组件",a:"_2-关于组件"},"7.11":{t:"2.1 组件传值(通信)的方式\r",p:`父传后代(后代拿到了父的数据)
1. 父组件引入子组件,绑定数据 
			&lt;List :str1=&quot;str1&quot;&gt;&lt;/List&gt;
		子组件通过 props  ...`,l:"basic/vue.html#_2-1-组件传值-通信-的方式",a:"_2-1-组件传值-通信-的方式"},"7.12":{t:"6.2 vue 单向绑定\r",p:`双向绑定: v-model
单向绑定: v-bind

`,l:"basic/vue.html#_6-2-vue-单向绑定",a:"_6-2-vue-单向绑定"},"7.13":{t:"6.3 v-if 和 v-for 的优先级\r",p:`vue2 中, v-for 的优先级大于 v-if
Vue3 中, v-if 的优先级大于 v-for

`,l:"basic/vue.html#_6-3-v-if-和-v-for-的优先级",a:"_6-3-v-if-和-v-for-的优先级"},"7.14":{t:"7. 关于原理\r",p:"\r",l:"basic/vue.html#_7-关于原理",a:"_7-关于原理"},"7.15":{t:"7.1 $nextTick 原理\r",p:`微任务:Promise.then  setImmediate MutationObserver
宏任务:setTimeout
$nextTick(callback){
	return new Prom ...`,l:"basic/vue.html#_7-1-nexttick-原理",a:"_7-1-nexttick-原理"},"7.16":{t:"7.2",p:"",l:"basic/vue.html#_7-2",a:"_7-2"},"8.0":{t:"# webpack\r",p:"\r",l:"basic/webpack.html",a:"webpack"},"8.1":{t:"webpack 插件",p:"",l:"basic/webpack.html#webpack-插件",a:"webpack-插件"},"9.0":{t:"<!--\r",p:`
@Date: 2023-12-22 10:35:10
@LastEditTime: 2023-12-22 10:36:43
@Description:
@FilePath: /blog/api-ex ...`,l:"examples/api-examples.html",a:""},"10.0":{t:"# Markdown Extension Examples\r",p:`This page demonstrates some of the built-in markdown extensions provided by VitePress.
`,l:"examples/markdown-examples.html",a:"markdown-extension-examples"},"10.1":{t:"Syntax Highlighting\r",p:"VitePress provides Syntax Highlighting powered by Shikiji, with additional features like line-highli ...",l:"examples/markdown-examples.html#syntax-highlighting",a:"syntax-highlighting"},"10.2":{t:"Custom Containers\r",p:`Input
::: info
This is an info box.
:::

::: tip
This is a tip.
:::

::: warning
This is a warning.
 ...`,l:"examples/markdown-examples.html#custom-containers",a:"custom-containers"},"10.3":{t:"More\r",p:`Check out the documentation for the full list of markdown extensions.
`,l:"examples/markdown-examples.html#more",a:"more"},"11.0":{t:"!image.png\r",p:`1. 鸿蒙应用开发快速体验
`,l:"harmonyOS/入门.html",a:"image-png"},"11.1":{t:"1.1. 准备开发环境\r",p:"\r",l:"harmonyOS/入门.html#_1-1-准备开发环境",a:"_1-1-准备开发环境"},"11.2":{t:"1.1.1. 安装IDE\r",p:"鸿蒙应用开发需要使用配套的IDE——HUAWEI DevEco Studio。 DevEco Studio基于IntelliJ IDEA Community（IDEA社区版）构建，为鸿蒙应用提供了一站 ...",l:"harmonyOS/入门.html#_1-1-1-安装ide",a:"_1-1-1-安装ide"},"11.3":{t:"1.1.2. 配置IDE\r",p:`安装完成后，可按以下步骤完成初始化配置

双击桌面快捷方式，启动DevEco Studio

!img

阅读各项条款，点击Agree表示同意

!img

初次启动会出现如下设置向导，首先需要为no ...`,l:"harmonyOS/入门.html#_1-1-2-配置ide",a:"_1-1-2-配置ide"},"11.4":{t:"1.2. 创建项目\r",p:`下面我们创建第一个鸿蒙应用项目

点击Create Project

!img

选择项目模版，此处选择第一个Empty Ability即可。

!img

配置项目

可能需要调整的配置项如下，其余 ...`,l:"harmonyOS/入门.html#_1-2-创建项目",a:"_1-2-创建项目"},"11.5":{t:"1.3. 运行项目\r",p:`DevEco Studio提供了多种方式用于运行项目，包括预览、模拟器和真机运行。下面逐一演示
`,l:"harmonyOS/入门.html#_1-3-运行项目",a:"_1-3-运行项目"},"11.6":{t:"1.3.1. Preview 预览\r",p:`Previewer预览用于查看应用的UI界面效果，方便随时调整界面UI布局。只需打开需要预览的页面文件，例如下图中的Index.ets，然后点击IDE右侧的Perviewer即可看到预览效果。
!im ...`,l:"harmonyOS/入门.html#_1-3-1-preview-预览",a:"_1-3-1-preview-预览"},"11.7":{t:"1.3.2. 模拟器运行\r",p:`Previewer预览器主要用于查看界面UI效果，如需对项目进行更加深入的测试，可以使用模拟器运行项目。初次使用需要先安装模拟器，安装步骤如下

点击Tools菜单下的Device Manager，打 ...`,l:"harmonyOS/入门.html#_1-3-2-模拟器运行",a:"_1-3-2-模拟器运行"},"11.8":{t:"1.3.3. 真机运行\r",p:`使用模拟器运行应用时，会占用电脑较多的资源，并且有些功能无法进行测试。当模拟器不满足要求时，可选择真机运行。真机运行的步骤如下

准备一台装有Harmony OS系统的手机，系统版本最好为4.0.0及 ...`,l:"harmonyOS/入门.html#_1-3-3-真机运行",a:"_1-3-3-真机运行"},"11.9":{t:"2.1. 概述\r",p:"HarmonyOS 应用的主要开发语言是 ArkTS，它由 TypeScript（简称TS）扩展而来，在继承TypeScript语法的基础上进行了一系列优化，使开发者能够以更简洁、更自然的方式开发应用 ...",l:"harmonyOS/入门.html#_2-1-概述",a:"_2-1-概述"},"11.10":{t:"2.2. TypeScript 快速入门\r",p:"\r",l:"harmonyOS/入门.html#_2-2-typescript-快速入门",a:"_2-2-typescript-快速入门"},"11.11":{t:"2.2.1. 运行环境说明\r",p:"\r",l:"harmonyOS/入门.html#_2-2-1-运行环境说明",a:"_2-2-1-运行环境说明"},"11.12":{t:"2.2.1.1. 线上Playground\r",p:`TypeScript提供了一个线上的 Playground 供练习使用，地址为https://www.typescriptlang.org/zh/play。
!img
`,l:"harmonyOS/入门.html#_2-2-1-1-线上playground",a:"_2-2-1-1-线上playground"},"11.13":{t:"2.2.1.2. 本地运行环境\r",p:`除去线上的运行环境，我们也可以在本地搭建一个 TS 的运行环境。

安装 VSCode 编辑器

VSCode是一款轻量级、开源且功能丰富的集成开发环境（IDE），支持多种编程语言，具有强大的插件系统 ...`,l:"harmonyOS/入门.html#_2-2-1-2-本地运行环境",a:"_2-2-1-2-本地运行环境"},"11.14":{t:"2.2.2. 声明\r",p:"\r",l:"harmonyOS/入门.html#_2-2-2-声明",a:"_2-2-2-声明"},"11.15":{t:"2.2.2.1. 变量声明\r",p:`!img
`,l:"harmonyOS/入门.html#_2-2-2-1-变量声明",a:"_2-2-2-1-变量声明"},"11.16":{t:"2.2.2.2. 常量声明\r",p:`let用于声明变量，而const用于声明常量，两者的区别是变量在赋值后可以修改，而常量在赋值后便不能再修改。
const b:number = 200;

`,l:"harmonyOS/入门.html#_2-2-2-2-常量声明",a:"_2-2-2-2-常量声明"},"11.17":{t:"2.2.2.3. 类型推断\r",p:`如果一个变量或常量的声明包含了初始值，TS 便可以根据初始值进行类型推断，此时我们就可以不显式指定其类型，例如
let c = 60;
console.log(typeof c); //number
 ...`,l:"harmonyOS/入门.html#_2-2-2-3-类型推断",a:"_2-2-2-3-类型推断"},"11.18":{t:"2.2.3. 常用数据类型\r",p:"\r",l:"harmonyOS/入门.html#_2-2-3-常用数据类型",a:"_2-2-3-常用数据类型"},"11.19":{t:"2.2.3.1. number\r",p:"number`表示数字，包括整数和浮点数，例如： `100`、`-33` 、`2.5`、`-3.9\nlet a :number = 100\nlet b :number = -33\nlet c :num ...",l:"harmonyOS/入门.html#_2-2-3-1-number",a:"_2-2-3-1-number"},"11.20":{t:"2.2.3.2. string\r",p:"string`表示字符串，例如： `你好`、`hello\nlet a:string = '你好'\nlet b:string = 'hello'\n\n",l:"harmonyOS/入门.html#_2-2-3-2-string",a:"_2-2-3-2-string"},"11.21":{t:"2.2.3.3. boolean\r",p:"boolean`表示布尔值，可选值为：`true`、`false\nlet isOpen:boolean = true\nlet isDone:boolean = false\n\n",l:"harmonyOS/入门.html#_2-2-3-3-boolean",a:"_2-2-3-3-boolean"},"11.22":{t:"2.2.3.4. 数组\r",p:`数组类型定义由两部分组成，元素类型[]，例如number[]表示数字数组，string[]表示字符串数组，数组类型的变量可由数组字面量——[item1,item2,item3]进行初始化。
let a ...`,l:"harmonyOS/入门.html#_2-2-3-4-数组",a:"_2-2-3-4-数组"},"11.23":{t:"2.2.3.5. 对象\r",p:"在TS中，对象（object）是一种一系列由属性名称和属性值组成的数据结构，例如姓名:'张三', 年龄:10, 性别:'男'。对象类型的声明需要包含所有属性的名称及类型，例如{name: string ...",l:"harmonyOS/入门.html#_2-2-3-5-对象",a:"_2-2-3-5-对象"},"11.24":{t:"2.2.4. 函数\r",p:"\r",l:"harmonyOS/入门.html#_2-2-4-函数",a:"_2-2-4-函数"},"11.25":{t:"2.2.4.1. 函数声明语法\r",p:`声明函数的基础语法如下
!img
`,l:"harmonyOS/入门.html#_2-2-4-1-函数声明语法",a:"_2-2-4-1-函数声明语法"},"11.26":{t:"2.2.4.2. 参数详解\r",p:"\r",l:"harmonyOS/入门.html#_2-2-4-2-参数详解",a:"_2-2-4-2-参数详解"},"11.27":{t:"2.2.4.2.1. 特殊语法\r",p:`
可选参数

可选参数通过参数名后的?进行标识，如以下案例中的gender?参数。
function getPersonInfo(name: string, age: number, gender?: ...`,l:"harmonyOS/入门.html#_2-2-4-2-1-特殊语法",a:"_2-2-4-2-1-特殊语法"},"11.28":{t:"2.2.4.2.2. 特殊类型\r",p:`
联合类型

一个函数可能用于处理不同类型的值，这种情况可以使用联合类型，例如以下案例中的message: number | string
function printNumberOrString(m ...`,l:"harmonyOS/入门.html#_2-2-4-2-2-特殊类型",a:"_2-2-4-2-2-特殊类型"},"11.29":{t:"2.2.4.3. 返回值详解\r",p:"\r",l:"harmonyOS/入门.html#_2-2-4-3-返回值详解",a:"_2-2-4-3-返回值详解"},"11.30":{t:"2.2.4.3.1. 特殊类型\r",p:`若函数没有返回值，则可以使用void作为返回值类型，其含义为空。
function test(): void {
    console.log('hello');
}

`,l:"harmonyOS/入门.html#_2-2-4-3-1-特殊类型",a:"_2-2-4-3-1-特殊类型"},"11.31":{t:"2.2.4.3.2. 类型推断\r",p:`函数的返回值类型可根据函数内容推断出来，因此可以省略不写。
function test() {
    console.log('hello');
}

function sum(a: number, ...`,l:"harmonyOS/入门.html#_2-2-4-3-2-类型推断",a:"_2-2-4-3-2-类型推断"},"11.32":{t:"2.2.4.4. 函数声明特殊语法\r",p:`
匿名函数

匿名函数的语法结构简洁，特别适用于简单且仅需一次性使用的场景。
let numbers: number[] = [1, 2, 3, 4, 5] numbers.forEach(funct ...`,l:"harmonyOS/入门.html#_2-2-4-4-函数声明特殊语法",a:"_2-2-4-4-函数声明特殊语法"},"11.33":{t:"2.2.5. 类（class）\r",p:"\r",l:"harmonyOS/入门.html#_2-2-5-类-class",a:"_2-2-5-类-class"},"11.34":{t:"2.2.5.1. 概述\r",p:`类（class）是面向对象编程语言中的一个重要概念。
面向对象编程（Object-Oriented Programming，简称OOP）是一种编程范式，其核心理念在于将程序中的数据与操作数据的方法有机 ...`,l:"harmonyOS/入门.html#_2-2-5-1-概述",a:"_2-2-5-1-概述"},"11.35":{t:"2.2.5.2. 语法说明\r",p:"\r",l:"harmonyOS/入门.html#_2-2-5-2-语法说明",a:"_2-2-5-2-语法说明"},"11.36":{t:"2.2.5.2.1. 类的定义\r",p:`定义类的语法如下图所示
!img
代码如下：
class Person {    id: number;    name: string;    age: number = 18;     const ...`,l:"harmonyOS/入门.html#_2-2-5-2-1-类的定义",a:"_2-2-5-2-1-类的定义"},"11.37":{t:"2.2.5.2.2. 对象创建\r",p:`
语法

创建对象的关键字为new，具体语法如下
let person = new Person(1,'zhangsan');


对象属性的访问

console.log(person.name); ...`,l:"harmonyOS/入门.html#_2-2-5-2-2-对象创建",a:"_2-2-5-2-2-对象创建"},"11.38":{t:"2.2.5.2.3. 静态成员\r",p:`Typescript 中的类中可以包含静态成员（静态属性和静态方法），静态成员隶属于类本身，而不属于某个对象实例。静态成员通用用于定义一些常量，或者工具方法。

声明静态成员

定义静态成员需要使用s ...`,l:"harmonyOS/入门.html#_2-2-5-2-3-静态成员",a:"_2-2-5-2-3-静态成员"},"11.39":{t:"2.2.5.3. 继承\r",p:"继承是面向对象编程中的重要机制，允许一个类（子类或派生类）继承另一个类（父类或基类）的属性和方法。子类可以直接使用父类的特性，并根据需要添加新的特性或覆盖现有的特性。这种机制赋予面向对象程序良好的扩展 ...",l:"harmonyOS/入门.html#_2-2-5-3-继承",a:"_2-2-5-3-继承"},"11.40":{t:"2.2.5.4. 访问修饰符\r",p:`访问修饰符（Access Modifiers）用于控制类成员（属性、方法等）的可访问性。TypeScript提供了三种访问修饰符，分别是private、protected和public。
class  ...`,l:"harmonyOS/入门.html#_2-2-5-4-访问修饰符",a:"_2-2-5-4-访问修饰符"},"11.41":{t:"2.2.6. 接口（interface）\r",p:"\r",l:"harmonyOS/入门.html#_2-2-6-接口-interface",a:"_2-2-6-接口-interface"},"11.42":{t:"2.2.6.1. 概述\r",p:`接口（interface）是面向对象编程中的另一个重要概念。接口通常会作为一种契约或规范让类（class）去遵守，确保类实现某些特定的行为或功能。
`,l:"harmonyOS/入门.html#_2-2-6-1-概述",a:"_2-2-6-1-概述"},"11.43":{t:"2.2.6.2. 语法说明\r",p:`
接口定义

接口使用interface关键字定义，通常情况下，接口中只会包含属性和方法的声明，而不包含具体的实现细节，具体的细节由其实现类完成。
interface Person {    id:  ...`,l:"harmonyOS/入门.html#_2-2-6-2-语法说明",a:"_2-2-6-2-语法说明"},"11.44":{t:"2.2.6.3. 多态\r",p:`多态是面相对象编程中的一个重要概念，它可以使同一类型的对象具有不同的行为。下面我们通过一个具体的案例来体会多态这一概念
首先，再创建一个Person接口的实现类Teacher，如下
class Tea ...`,l:"harmonyOS/入门.html#_2-2-6-3-多态",a:"_2-2-6-3-多态"},"11.45":{t:"2.2.6.4. 接口的作用\r",p:`在传统的面向对象编程的场景中，接口主要用于设计和组织代码，使代码更加容易扩展和维护。下面举例说明。
假如现在需要实现一个订单支付系统，按照面向对象编程的习惯，首先需要定义一个订单类（Order），如下 ...`,l:"harmonyOS/入门.html#_2-2-6-4-接口的作用",a:"_2-2-6-4-接口的作用"},"11.46":{t:"2.2.6.5. TS 中的接口的特殊性\r",p:`TypeScript 中的接口是一个非常灵活的概念，除了用作类的规范之外，也常用于直接描述对象的类型，例如，现有一个变量的定义如下
let person: {name:string, age:numb ...`,l:"harmonyOS/入门.html#_2-2-6-5-ts-中的接口的特殊性",a:"_2-2-6-5-ts-中的接口的特殊性"},"11.47":{t:"2.2.7. 枚举\r",p:"\r",l:"harmonyOS/入门.html#_2-2-7-枚举",a:"_2-2-7-枚举"},"11.48":{t:"2.2.7.1. 概述\r",p:`枚举（Enumeration）是编程语言中常见的一种数据类型，其主要功能是定义一组有限的选项，例如，方向（上、下、左、右）或季节（春、夏、秋、冬）等概念都可以使用枚举类型定义。
`,l:"harmonyOS/入门.html#_2-2-7-1-概述",a:"_2-2-7-1-概述"},"11.49":{t:"2.2.7.2. 语法说明\r",p:`
枚举定义

枚举的定义需使用enum关键字，如下
enum Season {    SPRING,    SUMMER,    AUTUMN,    WINTER }


枚举使用

枚举的使用记住 ...`,l:"harmonyOS/入门.html#_2-2-7-2-语法说明",a:"_2-2-7-2-语法说明"},"11.50":{t:"2.2.7.3. 赋值\r",p:`在TypeScript 中，枚举实际上是一个对象，而每个枚举值都是该对象的一个属性，并且每个属性都有具体的值，属性值只支持两种类型——数字或字符串。
默认情况下，每个属性的值都是数字，并且从 0 开始 ...`,l:"harmonyOS/入门.html#_2-2-7-3-赋值",a:"_2-2-7-3-赋值"},"11.51":{t:"2.2.8. 模块化\r",p:"\r",l:"harmonyOS/入门.html#_2-2-8-模块化",a:"_2-2-8-模块化"},"11.52":{t:"2.2.8.1. 概述\r",p:"模块化是指将复杂的程序拆解为多个独立的文件单元，每个文件被称为一个模块。在 TypeScript 中，默认情况下，每个模块都拥有自己的作用域，这意味着在一个模块中声明的任何内容（如变量、函数、类等）在 ...",l:"harmonyOS/入门.html#_2-2-8-1-概述",a:"_2-2-8-1-概述"},"11.53":{t:"2.2.8.2. 语法说明\r",p:`
导出

导出须使用export关键字，语法如下
export function hello() {    console.log('hello module A'); } export const  ...`,l:"harmonyOS/入门.html#_2-2-8-2-语法说明",a:"_2-2-8-2-语法说明"},"11.54":{t:"2.2.8.3. 避免命名冲突\r",p:`若多个模块中具有命名相同的变量、函数等内容，将这些内容导入到同一模块下就会出现命名冲突。例如，在上述案例的基础上，又增加了一个 moduleC，内容如下
export function hello() ...`,l:"harmonyOS/入门.html#_2-2-8-3-避免命名冲突",a:"_2-2-8-3-避免命名冲突"},"11.55":{t:"2.2.8.4. 默认导入导出\r",p:`除了上述导入导出的语法之外，还有一种语法，叫做默认导入导出，这种语法相对简洁一些。

默认导出

默认导出允许一个模块指定一个（最多一个）默认的导出项，语法如下
export default func ...`,l:"harmonyOS/入门.html#_2-2-8-4-默认导入导出",a:"_2-2-8-4-默认导入导出"},"11.56":{t:"2.3. ArkTS 快速入门\r",p:`ArkTS 在继承了Typescript语法的基础上，主要扩展了声明式UI开发相关的能力。
`,l:"harmonyOS/入门.html#_2-3-arkts-快速入门",a:"_2-3-arkts-快速入门"},"11.57":{t:"2.3.1. 声明式UI\r",p:`声明式UI是一种编写用户界面的范式。下面通过一个具体案例来学习这种开发范式，假如现在要实现如下界面
!img
`,l:"harmonyOS/入门.html#_2-3-1-声明式ui",a:"_2-3-1-声明式ui"},"11.58":{t:"2.3.1.1. 定义界面状态\r",p:`按照声明式UI的开发范式，首先需要分析和定义页面的各种状态，并声明相应的状态变量用于表示不同的状态。
当前案例中，界面共有两个状态，分别是开灯和关灯状态，所以我们可以使用一个boolean类型的变量来 ...`,l:"harmonyOS/入门.html#_2-3-1-1-定义界面状态",a:"_2-3-1-1-定义界面状态"},"11.59":{t:"2.3.1.2. 描述界面显示效果\r",p:`在分析完界面状态后，我们需要准确的描述界面在不同状态下的显示效果。
在当前案例中，具体逻辑如下图所示
!img
`,l:"harmonyOS/入门.html#_2-3-1-2-描述界面显示效果",a:"_2-3-1-2-描述界面显示效果"},"11.60":{t:"2.3.1.3. 改变状态\r",p:`在明确了界面在不同状态下的显示效果后，我们只需修改状态变量的值，就能触发界面的更新。
在当前案例中，若我们将isOn的值改为true，那么界面上就会显示开灯的图片，否则就会显示关灯的图片。
为了实现点 ...`,l:"harmonyOS/入门.html#_2-3-1-3-改变状态",a:"_2-3-1-3-改变状态"},"11.61":{t:"2.3.1.4. 总结\r",p:`以上就是声明式UI开发范式的大致流程，下面为大家总结一下声明式UI的核心思想

声明式描述

开发者只需描述在界面在不同状态下要呈现的最终效果，而无需关注界面变化的具体过程。
!img

状态数据驱动 ...`,l:"harmonyOS/入门.html#_2-3-1-4-总结",a:"_2-3-1-4-总结"},"11.62":{t:"2.3.2. 组件化\r",p:"在鸿蒙开发中，组件是构成界面的最小单元，我们所看到的界面，都是由众多组件组合而成的，所以编写界面其实就是组合组件的过程，ArkTS提供了很多的内置组件，例如：Text、Button、Image等等；并 ...",l:"harmonyOS/入门.html#_2-3-2-组件化",a:"_2-3-2-组件化"},"11.63":{t:"2.3.3. 入门案例\r",p:"\r",l:"harmonyOS/入门.html#_2-3-3-入门案例",a:"_2-3-3-入门案例"},"11.64":{t:"2.3.3.1. 案例效果\r",p:`案例的最终效果如下图所示
!img
`,l:"harmonyOS/入门.html#_2-3-3-1-案例效果",a:"_2-3-3-1-案例效果"},"11.65":{t:"2.3.3.2. 完整代码\r",p:`案例的完整代码见Demos/entry/src/main/ets/pages/helloworld/light/solution/Light.ets
@Entry
@Component
struct  ...`,l:"harmonyOS/入门.html#_2-3-3-2-完整代码",a:"_2-3-3-2-完整代码"},"11.66":{t:"2.3.4. 语法说明\r",p:"\r",l:"harmonyOS/入门.html#_2-3-4-语法说明",a:"_2-3-4-语法说明"},"11.67":{t:"2.3.4.1. 声明组件\r",p:"下面通过一个相对简单的案例来系统的学习 ArkTS 声明组件的语法，案例的最终效果如下，完整代码见Demos/entry/src/main/ets/pages/helloworld/delete/De ...",l:"harmonyOS/入门.html#_2-3-4-1-声明组件",a:"_2-3-4-1-声明组件"},"11.68":{t:"2.3.4.2. 自定义组件\r",p:`除去系统预置的组件外，ArkTS 还支持自定义组件。使用自定义组件，可使代码的结构更加清晰，并且能提高代码的复用性。
`,l:"harmonyOS/入门.html#_2-3-4-2-自定义组件",a:"_2-3-4-2-自定义组件"},"11.69":{t:"2.3.4.2.1. 语法说明\r",p:`自定义组件的语法如下图所示
!img
各部分语法说明如下：

struct关键字

struct是ArkTS新增的用于自定义组件或者自定义弹窗的关键字。其声明的数据结构和TS中的类十分相似，可包含属性 ...`,l:"harmonyOS/入门.html#_2-3-4-2-1-语法说明",a:"_2-3-4-2-1-语法说明"},"11.70":{t:"2.3.4.2.2. 案例实操\r",p:`现在需要对前文的开/关灯的案例做出如下改造，由于两个按钮的结构十分相似，所以可考虑自定义一个按钮组件，然后进行复用。
!img
案例的完整代码见：Demos/entry/src/main/ets/pa ...`,l:"harmonyOS/入门.html#_2-3-4-2-2-案例实操",a:"_2-3-4-2-2-案例实操"},"11.71":{t:"2.3.4.3. 渲染控制\r",p:"\r",l:"harmonyOS/入门.html#_2-3-4-3-渲染控制",a:"_2-3-4-3-渲染控制"},"11.72":{t:"2.3.4.3.1. 条件渲染\r",p:"\r",l:"harmonyOS/入门.html#_2-3-4-3-1-条件渲染",a:"_2-3-4-3-1-条件渲染"},"11.73":{t:"2.3.4.3.1.1. 概述\r",p:`条件渲染可根据应用的不同状态渲染不同的UI界面，例如前文的开/关灯案例，以及以下的播放/暂停案例，均可使用条件渲染实现。
!img
案例的完整代码见：Demos/entry/src/main/ets/ ...`,l:"harmonyOS/入门.html#_2-3-4-3-1-1-概述",a:"_2-3-4-3-1-1-概述"},"11.74":{t:"2.3.4.3.1.2. 语法说明\r",p:`条件渲染的语法如下
if (...){
  //UI描述 
}else if (...){
  //UI描述
}else{
  //UI描述
}

`,l:"harmonyOS/入门.html#_2-3-4-3-1-2-语法说明",a:"_2-3-4-3-1-2-语法说明"},"11.75":{t:"2.3.4.3.2. 循环渲染\r",p:"\r",l:"harmonyOS/入门.html#_2-3-4-3-2-循环渲染",a:"_2-3-4-3-2-循环渲染"},"11.76":{t:"2.3.4.3.2.1. 概述\r",p:`循环渲染可使用ForEach语句基于一个数组来快速渲染一个组件列表，例如以下案例中的选项列表就可通过循环渲染实现。
!img
案例的完整代码见：Demos/entry/src/main/ets/pag ...`,l:"harmonyOS/入门.html#_2-3-4-3-2-1-概述",a:"_2-3-4-3-2-1-概述"},"11.77":{t:"2.3.4.3.2.2. 语法说明\r",p:`ForEach循环渲染的语法如下
ForEach(
  arr: any[], 
  itemGenerator: (item: any, index?: number) =&gt; void,
   ...`,l:"harmonyOS/入门.html#_2-3-4-3-2-2-语法说明",a:"_2-3-4-3-2-2-语法说明"},"11.78":{t:"3.1. 图片\r",p:"\r",l:"harmonyOS/入门.html#_3-1-图片",a:"_3-1-图片"},"11.79":{t:"3.1.1. 概述\r",p:`Image为图片组件，用于在应用中显示图片。
`,l:"harmonyOS/入门.html#_3-1-1-概述",a:"_3-1-1-概述"},"11.80":{t:"3.1.2. 参数\r",p:"Image组件的参数类型为string | Resource | media.PixelMap，相关案例见Demos/entry/src/main/ets/pages/component/image/ ...",l:"harmonyOS/入门.html#_3-1-2-参数",a:"_3-1-2-参数"},"11.81":{t:"3.1.3. 常用属性\r",p:"\r",l:"harmonyOS/入门.html#_3-1-3-常用属性",a:"_3-1-3-常用属性"},"11.82":{t:"3.1.3.1. 图片尺寸\r",p:`图片尺寸可通过width()方法和height()方法进行设置。例如
Image($r('app.media.img'))
	.width(100)
	.height(100)

两个方法可接收的参数 ...`,l:"harmonyOS/入门.html#_3-1-3-1-图片尺寸",a:"_3-1-3-1-图片尺寸"},"11.83":{t:"3.1.3.2. 图片缩放\r",p:`当图片的原始大小与Image组件不同时，可通过objectFit()方法来设置图片的显示效果。该方法的参数类型为ImageFit枚举类型，可选的枚举值如下



名称
描述




ImageFit. ...`,l:"harmonyOS/入门.html#_3-1-3-2-图片缩放",a:"_3-1-3-2-图片缩放"},"11.84":{t:"3.1.3.3. 图片插值\r",p:`当原图分辨率较低并且需要放大显示时，图片会模糊并出现锯齿。如下图所示
!img
这时可以使用interpolation()方法对图片进行插值，使图片显示得更清晰。该方法的参数为ImageInterpo ...`,l:"harmonyOS/入门.html#_3-1-3-3-图片插值",a:"_3-1-3-3-图片插值"},"11.85":{t:"3.2. 文本\r",p:"\r",l:"harmonyOS/入门.html#_3-2-文本",a:"_3-2-文本"},"11.86":{t:"3.2.1. 概述\r",p:`Text为文本组件，用于显示文字内容。
`,l:"harmonyOS/入门.html#_3-2-1-概述",a:"_3-2-1-概述"},"11.87":{t:"3.2.2. 参数\r",p:`Text组件的参数类型为string | Resource，下面分别对两个参数类型进行介绍：

string类型

Text('我是一段文本')


Resource 类型

Resource类型的参 ...`,l:"harmonyOS/入门.html#_3-2-2-参数",a:"_3-2-2-参数"},"11.88":{t:"3.2.3. 常用属性\r",p:"\r",l:"harmonyOS/入门.html#_3-2-3-常用属性",a:"_3-2-3-常用属性"},"11.89":{t:"3.2.3.1. 字体大小\r",p:`字体大小可通过fontSize()方法进行设置，该方法的参数类型为string | number| Resource，下面逐一介绍

string类型

string类型的参数可用于指定字体大小的具体 ...`,l:"harmonyOS/入门.html#_3-2-3-1-字体大小",a:"_3-2-3-1-字体大小"},"11.90":{t:"3.2.3.2. 字体粗细\r",p:`字体粗细可通过fontWeight()方法进行设置，该方法参数类型为number | FontWeight | string，下面逐一介绍

number类型

number类型的取值范围是[100, ...`,l:"harmonyOS/入门.html#_3-2-3-2-字体粗细",a:"_3-2-3-2-字体粗细"},"11.91":{t:"3.2.3.3. 字体颜色\r",p:`字体颜色可通过fontColor()方法进行设置，该方法参数类型为Color | string | number | Resource，下面逐一介绍

Color类型

Color\`为枚举类型，其中包 ...`,l:"harmonyOS/入门.html#_3-2-3-3-字体颜色",a:"_3-2-3-3-字体颜色"},"11.92":{t:"3.2.3.4. 文本对齐\r",p:`文本对齐方向可通过textAlign()方法进行设置，该方法的参数为枚举类型TextAlign，可选的枚举值如下



名称
描述




TextAlign.Start
首部对齐


TextAli ...`,l:"harmonyOS/入门.html#_3-2-3-4-文本对齐",a:"_3-2-3-4-文本对齐"},"11.93":{t:"3.2.3.5. 最大行数和超长处理\r",p:"可使用maxLines()方法控制文本的最大行数，当内容超出最大行数时，可使用textOverflow()方法处理超出部分，该方法的参数类型为{ overflow: TextOverflow }，其中 ...",l:"harmonyOS/入门.html#_3-2-3-5-最大行数和超长处理",a:"_3-2-3-5-最大行数和超长处理"},"11.94":{t:"3.3. 按钮\r",p:"\r",l:"harmonyOS/入门.html#_3-3-按钮",a:"_3-3-按钮"},"11.95":{t:"3.3.1. 概述\r",p:`Button为按钮组件，通常用于响应用户的点击操作。
`,l:"harmonyOS/入门.html#_3-3-1-概述",a:"_3-3-1-概述"},"11.96":{t:"3.3.2. 参数\r",p:`Button组件有两种使用方式，分别是不包含子组件和包含子组件，两种方式下，Button 组件所需的参数有所不同，下面分别介绍

不包含子组件

不包含子组件时，Button组件所需的参数如下
But ...`,l:"harmonyOS/入门.html#_3-3-2-参数",a:"_3-3-2-参数"},"11.97":{t:"3.3.3. 常用属性\r",p:"\r",l:"harmonyOS/入门.html#_3-3-3-常用属性",a:"_3-3-3-常用属性"},"11.98":{t:"3.3.3.1. 背景颜色\r",p:`按钮的颜色可使用backgroundColor()方法进行设置，例如
Button('绿色按钮').backgroundColor(Color.Green)

`,l:"harmonyOS/入门.html#_3-3-3-1-背景颜色",a:"_3-3-3-1-背景颜色"},"11.99":{t:"3.3.3.2. 边框圆角\r",p:`按钮的边框圆角大小可使用borderRadius()方法进行设置，例如
Button('圆角按钮', { type: ButtonType.Normal }).borderRadius(10)

相关 ...`,l:"harmonyOS/入门.html#_3-3-3-2-边框圆角",a:"_3-3-3-2-边框圆角"},"11.100":{t:"3.3.4. 常用事件\r",p:`对于Button组件而言，最为常用的就是点击事件，可以通过onClick()方法为按钮绑定点击事件，该方法的参数为一个回调函数，当按钮被点击时，就会触发该回调函数，例如
Button('点击事件'). ...`,l:"harmonyOS/入门.html#_3-3-4-常用事件",a:"_3-3-4-常用事件"},"11.101":{t:"3.4. 切换按钮\r",p:"\r",l:"harmonyOS/入门.html#_3-4-切换按钮",a:"_3-4-切换按钮"},"11.102":{t:"3.4.1. 概述\r",p:`Toggle为切换按钮组件，一般用于两种状态之间的切换，例如下图中的蓝牙开关。
!img
`,l:"harmonyOS/入门.html#_3-4-1-概述",a:"_3-4-1-概述"},"11.103":{t:"3.4.2. 参数\r",p:`Toggle组件的参数定义如下
Toggle(options: { type: ToggleType, isOn?: boolean })


type

type属性用于设置Toggle组件的类型， ...`,l:"harmonyOS/入门.html#_3-4-2-参数",a:"_3-4-2-参数"},"11.104":{t:"3.4.3. 常用属性：\r",p:"\r",l:"harmonyOS/入门.html#_3-4-3-常用属性",a:"_3-4-3-常用属性"},"11.105":{t:"3.4.3.1. 选中状态背景色\r",p:`可使用selectedColor()方法设置Toggle组件在选中（或打开）状态下的背景色，例如
!img
`,l:"harmonyOS/入门.html#_3-4-3-1-选中状态背景色",a:"_3-4-3-1-选中状态背景色"},"11.106":{t:"3.4.3.2. Swtich滑块颜色\r",p:`可使用设置switchPointColor()方法设置Switch类型的Toggle组件中的圆形滑块颜色，例如
!img
相关案例见：Demos/entry/src/main/ets/pages/co ...`,l:"harmonyOS/入门.html#_3-4-3-2-swtich滑块颜色",a:"_3-4-3-2-swtich滑块颜色"},"11.107":{t:"3.4.4. 常用事件\r",p:"Toggle组件常用的事件为change事件，每当Toggle组件的状态发生变化，就会触发change事件。开发者可通过onChange()方法为Toggle组件绑定change事件，该方法参数为一个 ...",l:"harmonyOS/入门.html#_3-4-4-常用事件",a:"_3-4-4-常用事件"},"11.108":{t:"3.5. 文本输入\r",p:"\r",l:"harmonyOS/入门.html#_3-5-文本输入",a:"_3-5-文本输入"},"11.109":{t:"3.5.1. 概述\r",p:`TextInput为文本输入组件，用于接收用户输入的文本内容。
`,l:"harmonyOS/入门.html#_3-5-1-概述",a:"_3-5-1-概述"},"11.110":{t:"3.5.2. 参数\r",p:`TextInput组件的参数定义如下
TextInput(value?:{placeholder?: string|Resource , text?: string|Resource})


plac ...`,l:"harmonyOS/入门.html#_3-5-2-参数",a:"_3-5-2-参数"},"11.111":{t:"3.5.3. 常用属性\r",p:"\r",l:"harmonyOS/入门.html#_3-5-3-常用属性",a:"_3-5-3-常用属性"},"11.112":{t:"3.5.3.1. 输入框类型\r",p:`可通过type()方法设置输入框的类型，该方法的参数为InputType枚举类型，可选的枚举值有



名称
描述




InputType.Normal
基本输入模式


InputType.Pa ...`,l:"harmonyOS/入门.html#_3-5-3-1-输入框类型",a:"_3-5-3-1-输入框类型"},"11.113":{t:"3.5.3.2. 光标样式\r",p:`可通过caretColor()方法设置光标的颜色，效果如下
!img
`,l:"harmonyOS/入门.html#_3-5-3-2-光标样式",a:"_3-5-3-2-光标样式"},"11.114":{t:"3.5.3.3. placeholder样式\r",p:"可通过placeholderFont()和placeholderColor()方法设置 placeholder 的样式，其中placeholderFont()用于设置字体，包括字体大小、字体粗细等，p ...",l:"harmonyOS/入门.html#_3-5-3-3-placeholder样式",a:"_3-5-3-3-placeholder样式"},"11.115":{t:"3.5.3.4. 文本样式\r",p:`输入文本的样式可通过fontSize()、fontWeight()、fontColor()等通用属性方法进行设置。
相关案例见：Demos/entry/src/main/ets/pages/compo ...`,l:"harmonyOS/入门.html#_3-5-3-4-文本样式",a:"_3-5-3-4-文本样式"},"11.116":{t:"3.5.4. 常用事件\r",p:"\r",l:"harmonyOS/入门.html#_3-5-4-常用事件",a:"_3-5-4-常用事件"},"11.117":{t:"3.5.4.1. change事件\r",p:`每当输入的内容发生变化，就会触发 change 事件，开发者可使用onChange()方法为TextInput组件绑定 change 事件，该方法的参数定义如下
onChange(callback:  ...`,l:"harmonyOS/入门.html#_3-5-4-1-change事件",a:"_3-5-4-1-change事件"},"11.118":{t:"3.5.4.2. 焦点事件\r",p:"焦点事件包括获得焦点和失去焦点两个事件，当输入框获得焦点时，会触发 focus 事件，失去焦点时，会触发 blur 事件，开发者可使用onFocus()和onBlur()方法为 TextInput 组 ...",l:"harmonyOS/入门.html#_3-5-4-2-焦点事件",a:"_3-5-4-2-焦点事件"},"11.119":{t:"3.6. 进度条\r",p:"\r",l:"harmonyOS/入门.html#_3-6-进度条",a:"_3-6-进度条"},"11.120":{t:"3.6.1. 概述\r",p:`Progress为进度条组件，用于显示各种进度。
`,l:"harmonyOS/入门.html#_3-6-1-概述",a:"_3-6-1-概述"},"11.121":{t:"3.6.2. 参数\r",p:`Progress组件的参数定义如下
Progress(options: {value: number, total?: number, type?: ProgressType})


value

v ...`,l:"harmonyOS/入门.html#_3-6-2-参数",a:"_3-6-2-参数"},"11.122":{t:"3.6.3. 常用属性\r",p:"\r",l:"harmonyOS/入门.html#_3-6-3-常用属性",a:"_3-6-3-常用属性"},"11.123":{t:"3.6.3.1. 进度条样式\r",p:`可通过style()调整进度条的样式，例如进度条的宽度，该方法的参数类型定义如下
style({strokeWidth?: string|number|Resource,scaleCount?: nu ...`,l:"harmonyOS/入门.html#_3-6-3-1-进度条样式",a:"_3-6-3-1-进度条样式"},"11.124":{t:"3.6.3.2. 进度条颜色\r",p:`进度条的颜色可通过color()和backgroundColor()方法进行设置，其中color()用于设置前景色，backgroundColor()用于设置背景色，例如
!img
相关案例见：Dem ...`,l:"harmonyOS/入门.html#_3-6-3-2-进度条颜色",a:"_3-6-3-2-进度条颜色"},"11.125":{t:"3.7. 弹窗\r",p:`弹窗是移动应用中常见的一种用户界面元素，常用于显示一些重要的信息、提示用户进行操作或收集用户输入。ArkTS提供了多种内置的弹窗供开发者使用，除此之外还支持自定义弹窗，来满足各种不同的需求。
`,l:"harmonyOS/入门.html#_3-7-弹窗",a:"_3-7-弹窗"},"11.126":{t:"3.7.1. 消息提示\r",p:"\r",l:"harmonyOS/入门.html#_3-7-1-消息提示",a:"_3-7-1-消息提示"},"11.127":{t:"3.7.1.1. 概述\r",p:`Toast（消息提示），常用于显示一些简短的消息或提示，一般会在短暂停留后自动消失。具体效果如下
!img
`,l:"harmonyOS/入门.html#_3-7-1-1-概述",a:"_3-7-1-1-概述"},"11.128":{t:"3.7.1.2. 使用说明\r",p:`可使用@ohos.promptAction模块中的showToast()方法显示 Toast 提示，使用时需要先导入@ohos.promptAction模块，如下
import promptActio ...`,l:"harmonyOS/入门.html#_3-7-1-2-使用说明",a:"_3-7-1-2-使用说明"},"11.129":{t:"3.7.2. 警告对话框\r",p:"\r",l:"harmonyOS/入门.html#_3-7-2-警告对话框",a:"_3-7-2-警告对话框"},"11.130":{t:"3.7.2.1. 概述\r",p:`AlertDialog（警告对话框）用于向用户发出警告或确认操作的提示，确保用户在敏感操作前进行确认。具体效果如下
!img
相关案例见：Demos/entry/src/main/ets/pages/ ...`,l:"harmonyOS/入门.html#_3-7-2-1-概述",a:"_3-7-2-1-概述"},"11.131":{t:"3.7.2.2. 使用说明\r",p:`可使用全局方法AlertDialog.show()显示警告对话框，具体用法可参考相关案例或者官方文档。
`,l:"harmonyOS/入门.html#_3-7-2-2-使用说明",a:"_3-7-2-2-使用说明"},"11.132":{t:"3.7.3. 操作列表弹框\r",p:"\r",l:"harmonyOS/入门.html#_3-7-3-操作列表弹框",a:"_3-7-3-操作列表弹框"},"11.133":{t:"3.7.3.1. 概述\r",p:`ActionSheet（操作列表弹窗）用于提供一组选项给用户选择，用户从中选择后，可执行相应的操作。具体效果如下
!img
相关案例见：Demos/entry/src/main/ets/pages/c ...`,l:"harmonyOS/入门.html#_3-7-3-1-概述",a:"_3-7-3-1-概述"},"11.134":{t:"3.7.3.2. 使用说明\r",p:`可使用全局方法ActionSheet.show()显示操作列表弹窗，具体用法可参考相关案例或者官方文档。
`,l:"harmonyOS/入门.html#_3-7-3-2-使用说明",a:"_3-7-3-2-使用说明"},"11.135":{t:"3.7.4. 选择器弹窗\r",p:"\r",l:"harmonyOS/入门.html#_3-7-4-选择器弹窗",a:"_3-7-4-选择器弹窗"},"11.136":{t:"3.7.4.1. 概述\r",p:`选择器弹窗用于让用户从一个列表中选择一个具体的值。ArkTS内置了多种选择器弹窗，例如文本选择器、日期选择器、时间选择器等等，各选择器效果如下
&lt;details class=&quot;lake ...`,l:"harmonyOS/入门.html#_3-7-4-1-概述",a:"_3-7-4-1-概述"},"11.137":{t:"3.7.4.2. 使用说明\r",p:`具体用法可参考相关案例或者官方文档，各选择器的官方文档地址如下



类型
文档地址




TextPickerDialog（文本滑动选择器弹窗）
官方文档


DatePickerDialog（日 ...`,l:"harmonyOS/入门.html#_3-7-4-2-使用说明",a:"_3-7-4-2-使用说明"},"11.138":{t:"3.7.5. 自定义弹窗\r",p:"\r",l:"harmonyOS/入门.html#_3-7-5-自定义弹窗",a:"_3-7-5-自定义弹窗"},"11.139":{t:"3.7.5.1. 概述\r",p:`当现有组件不满足要求时，可考虑自定义弹窗，自定义弹窗允许开发者自定义弹窗内容和样式。例如
!img
相关案例见：Demos/entry/src/main/ets/pages/component/dia ...`,l:"harmonyOS/入门.html#_3-7-5-1-概述",a:"_3-7-5-1-概述"},"11.140":{t:"3.7.5.2. 使用说明\r",p:`显示自定义弹窗需要使用CustomDialogController，具体用法可参考相关案例或者官方文档。



\`\`\`json&lt;br/&gt;{&lt;br/&gt;  &quot;intege ...`,l:"harmonyOS/入门.html#_3-7-5-2-使用说明",a:"_3-7-5-2-使用说明"},"13.0":{t:"# 语言基础\r",p:"\r",l:"InterviewJS/js.html",a:"语言基础"},"13.1":{t:"语法\r",p:"\r",l:"InterviewJS/js.html#语法",a:"语法"},"13.2":{t:"区分大小写\r",p:"ECMAScript 中一切都是区分大小写的。无论是变量、函数名还是操作符，都区分大小写。换句话说。变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一 ...",l:"InterviewJS/js.html#区分大小写",a:"区分大小写"},"13.3":{t:"标识符\r",p:`所谓标识符，就是变量、函数、属性或者函数参数的名称。标识符可以由一个或多个下列字符组成：
第一个字符必须是一个字母、下划线(_)或美元符号($)；
剩下的其他字符可以是字母、下划线、美元符号或数字；
 ...`,l:"InterviewJS/js.html#标识符",a:"标识符"},"13.4":{t:"注释\r",p:`ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。
单行注释以两个斜杠字符(//)开头，如
// 单行注释

块注释以一个斜杠和一个星号(/*)开头，以它们的反向组合(*/)结尾。 ...`,l:"InterviewJS/js.html#注释",a:"注释"},"13.5":{t:"严格模式\r",p:"ECMAScript 5 新增了严格模式的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。 ...",l:"InterviewJS/js.html#严格模式",a:"严格模式"},"13.6":{t:"关键字和保留字\r",p:"\r",l:"InterviewJS/js.html#关键字和保留字",a:"关键字和保留字"},"13.7":{t:"关键字\r",p:`break 	do		in		typeof		case		else		instanceof
var		catch		export		new		void		class		extends
return		 ...`,l:"InterviewJS/js.html#关键字",a:"关键字"},"13.8":{t:"保留字\r",p:`ECMA-262 描述了一组保留的关键字，这些关键字有特殊用途，比如表示控制语句的开始和结束， 或者执行特定的操作。按照规定，保留的关键字不能用作标识符或属性名。
`,l:"InterviewJS/js.html#保留字",a:"保留字"},"13.9":{t:"始终保留\r",p:`enum

`,l:"InterviewJS/js.html#始终保留",a:"始终保留"},"13.10":{t:"严格模式下保留\r",p:`implements		interface		let		package		protected
private		public		static

`,l:"InterviewJS/js.html#严格模式下保留",a:"严格模式下保留"},"13.11":{t:"模块代码中保留\r",p:`await

`,l:"InterviewJS/js.html#模块代码中保留",a:"模块代码中保留"},"13.12":{t:"变量\r",p:"ECMAScript 中有 3 个关键字可以声明变量：var、const 和let。其中var在 ECMAScript 的所有版本中都可以使用，而const和let只能在 ECMAScript 6 及 ...",l:"InterviewJS/js.html#变量",a:"变量"},"13.13":{t:"var 关键字\r",p:`要定义变量，可以使用 var 操作符（注意var是一个关键字），后跟变量名（即标识符）
var message
var message = 'hi'
message = 'hi' // 合法，但不推荐 ...`,l:"InterviewJS/js.html#var-关键字",a:"var-关键字"},"13.14":{t:"var 声明作用域\r",p:`使用var操作符定义的变量会成为包含它的函数的局部变量。比如，使用var在一个函数内部定义了一个变量，就意味着该变量将在函数退出时被销毁
function test() {
  var message ...`,l:"InterviewJS/js.html#var-声明作用域",a:"var-声明作用域"},"13.15":{t:"var 声明提升\r",p:`使用var时，下面的代码不会报错。这是因为使用了这个关键字声明的变量会自动提升到函数的作用域顶部：
function foo() {
  console.log(age)
  var age = 26 ...`,l:"InterviewJS/js.html#var-声明提升",a:"var-声明提升"},"13.16":{t:"let 声明\r",p:`let和var的作用差不多，但是有着非常重要的区别。最明显的区别就是，let声明的范围是块作用域，而var声明的范围是函数作用域。
if (true) {
  var name = 'Matt'
   ...`,l:"InterviewJS/js.html#let-声明",a:"let-声明"},"13.17":{t:"1. 暂时性死区\r",p:`let与var的另一个重要区别，就是let声明的变量不会在作用域中被提升。
// name 会被提升
console.log(name) // undefined
var name = 'Matt'
 ...`,l:"InterviewJS/js.html#_1-暂时性死区",a:"_1-暂时性死区"},"13.18":{t:"2. 全局声明\r",p:`与var关键字不同，使用 let在全局作用域中声明的变量不会成为 window 对象的属性(var 声明的变量则会)
var name = 'Matt'
console.log(window.name ...`,l:"InterviewJS/js.html#_2-全局声明",a:"_2-全局声明"},"13.19":{t:"3. 条件声明\r",p:`因为 let是块级作用域，所以不可能检查前面是否声明过同名变量，同时也就不可能在没有声明的情况下去声明它，因此不能依赖条件声明模式
`,l:"InterviewJS/js.html#_3-条件声明",a:"_3-条件声明"},"13.20":{t:"for 循环中的 let\r",p:`在let出现之前，for循环定义的迭代变量会渗透到循环体外部。改用let之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部
for (var i = 0; i &lt; 5; ++ ...`,l:"InterviewJS/js.html#for-循环中的-let",a:"for-循环中的-let"},"13.21":{t:"const 声明\r",p:`const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误
const age = 26
age = 36 // Typ ...`,l:"InterviewJS/js.html#const-声明",a:"const-声明"},"13.22":{t:"声明风格及最佳实践\r",p:`
不使用 var
const 优先，let 次之

`,l:"InterviewJS/js.html#声明风格及最佳实践",a:"声明风格及最佳实践"},"13.23":{t:"数据类型\r",p:`ECMAScript 有两大数据类型
基本数据类型(原始数据类型)：Undefined、Null、Boolean、Number、String、Symbol
复杂数据类型：Object
`,l:"InterviewJS/js.html#数据类型",a:"数据类型"},"13.24":{t:"typeof 操作符\r",p:`因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof 操作符就是为此而生的。对一个值使用 typeof 会返回下列字符串之一：

&quot;unde ...`,l:"InterviewJS/js.html#typeof-操作符",a:"typeof-操作符"},"13.25":{t:"Undefined 类型\r",p:`Undefined 类型只有一个值，就是特殊值undefined。当 var或let声明了变量但没有初始化时，就相当于给变量赋予了undefined值
注意：包含 undefined值的变量跟未定义变 ...`,l:"InterviewJS/js.html#undefined-类型",a:"undefined-类型"},"13.26":{t:"Null 类型\r",p:`Null类型同样只有一个值，即特殊值null。逻辑上讲，null值表示一个空对象指针，这也是给 typeof传一个null会返回&quot;object&quot;的原因。
在定义一个将来要保存对象值 ...`,l:"InterviewJS/js.html#null-类型",a:"null-类型"},"13.27":{t:"Boolean 类型\r",p:`Boolean类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true和false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。
注意：布尔值字面量 ...`,l:"InterviewJS/js.html#boolean-类型",a:"boolean-类型"},"13.28":{t:"布尔值和不同类型之间的转换规则\r",p:`


数据类型
转换为 true 的值
转换为 false 的值




Boolean
true
false


String
非空字符串
&quot;&quot;(空字符串)


Number
非 ...`,l:"InterviewJS/js.html#布尔值和不同类型之间的转换规则",a:"布尔值和不同类型之间的转换规则"},"13.29":{t:"Number 类型\r",p:`Number类型使用 IEEE 754格式表示正式和浮点数(在某些语言中也叫双精度值)、不同的数值类型相应地也有不同的数值字面量格式。
`,l:"InterviewJS/js.html#number-类型",a:"number-类型"},"13.30":{t:"数值字面量格式\r",p:`十进制： 直接写出来即可
八进制： 对于八进制字面量，第一个数字必须是零(0)，然后是相应的八进制数字(0-7)。如果字面量中包含的数字超出了应有的范围，就回忽略前缀的 0，后面的数字被当做十进制
十 ...`,l:"InterviewJS/js.html#数值字面量格式",a:"数值字面量格式"},"13.31":{t:"浮点值\r",p:`要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。
let floatNumber1 = 1.1
let floatNumber2 = 0 ...`,l:"InterviewJS/js.html#浮点值",a:"浮点值"},"13.32":{t:"值的范围\r",p:"ECMAScript可以保存的最小数值保存在Number.MIN_VALUE中，这个值多数浏览器是5e-324，可以保存的最小数值保存在Number.MAX_VALUE中，这个值多数浏览器是1.797 ...",l:"InterviewJS/js.html#值的范围",a:"值的范围"},"13.33":{t:"NaN\r",p:"有一个特殊的值叫&quot;NaN&quot;，意思是&quot;不是数值&quot;(Not a Number)，用于表示本来要返回数值的操作失败了(而不是抛出错误)。在 ECMAScript 中， ...",l:"InterviewJS/js.html#nan",a:"nan"},"13.34":{t:"数值转换\r",p:`有 3 个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转化为数值。
Numb ...`,l:"InterviewJS/js.html#数值转换",a:"数值转换"},"13.35":{t:"String 类型\r",p:"String(字符串)数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号(&quot;)、单引号(')或反引号(`)标示。必须成对出现，否则会导致语法错误。\n",l:"InterviewJS/js.html#string-类型",a:"string-类型"},"13.36":{t:"字符字面量\r",p:`字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符



字面量
含义




\\n
换行


\\t
制表


\\b
退格


\\r
回车


\\f
换页


\\\\
反斜杠()

 ...`,l:"InterviewJS/js.html#字符字面量",a:"字符字面量"},"13.37":{t:"字符串的特点\r",p:`字符串是不可变的，意思就是一旦创建，他们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量。
`,l:"InterviewJS/js.html#字符串的特点",a:"字符串的特点"},"13.38":{t:"转换为字符串\r",p:`有两种方式将一个值转换为字符串。一个是toString()，一个是直接在后面加空串&quot;&quot;
数值调用toString()时，可以传入一个参数作为底数，默认情况下返回的是十进制
`,l:"InterviewJS/js.html#转换为字符串",a:"转换为字符串"},"13.39":{t:"模板字面量\r",p:`ECMAScript 6新增了模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以夸行定义字符串。
let str = \`first line
second line\`
 ...`,l:"InterviewJS/js.html#模板字面量",a:"模板字面量"},"13.40":{t:"字符串插值\r",p:"模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个 值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的 是字符串 ...",l:"InterviewJS/js.html#字符串插值",a:"字符串插值"},"13.41":{t:"模板字面量标签函数\r",p:`模板字面量也支持定义标签函数(tag function)，而通过标签函数可以自定义插值行为。标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。
标签函数本身是一个常规函数，通过前缀到模板 ...`,l:"InterviewJS/js.html#模板字面量标签函数",a:"模板字面量标签函数"},"13.42":{t:"原始字符串\r",p:`使用模板字面量也可以直接获取原始的模板字面量内容(如换行符或 Unicode 字符)，而不是被转 换后的字符表示。为此，可以使用默认的 String.raw 标签函数:
`,l:"InterviewJS/js.html#原始字符串",a:"原始字符串"},"13.43":{t:"Symbol 类型\r",p:`Symbol(符号)是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的风险。
`,l:"InterviewJS/js.html#symbol-类型",a:"symbol-类型"},"13.44":{t:"符号的基本使用\r",p:`符号需要使用Symbol()函数初始化，因为符号本身是基本类型，所以typeof操作符对符号返回symbol
let symbol = Symbol()

注意： Symbol()函数不能与 new  ...`,l:"InterviewJS/js.html#符号的基本使用",a:"符号的基本使用"},"13.45":{t:"使用全局符号注册表\r",p:`如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。
Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全 ...`,l:"InterviewJS/js.html#使用全局符号注册表",a:"使用全局符号注册表"},"13.46":{t:"使用符号作为属性\r",p:"凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和 Object.defineProperty()/Object.defineProperties()定义的属性。对象字 ...",l:"InterviewJS/js.html#使用符号作为属性",a:"使用符号作为属性"},"13.47":{t:"常用内置符号\r",p:"ECMAScript 6 也引入了一批常用内置符号(well-known symbol)，用于暴露语言内部行为，开发者 可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串 ...",l:"InterviewJS/js.html#常用内置符号",a:"常用内置符号"},"13.48":{t:"Symbol.asyncIterator\r",p:"\r",l:"InterviewJS/js.html#symbol-asynciterator",a:"symbol-asynciterator"},"13.49":{t:"Symbol.hasInstance\r",p:"\r",l:"InterviewJS/js.html#symbol-hasinstance",a:"symbol-hasinstance"},"13.50":{t:"Symbol.isConcatSpreadable\r",p:"\r",l:"InterviewJS/js.html#symbol-isconcatspreadable",a:"symbol-isconcatspreadable"},"13.51":{t:"Symbol.iterator\r",p:"\r",l:"InterviewJS/js.html#symbol-iterator",a:"symbol-iterator"},"13.52":{t:"Symbol.match\r",p:"\r",l:"InterviewJS/js.html#symbol-match",a:"symbol-match"},"13.53":{t:"Symbol.replace\r",p:"\r",l:"InterviewJS/js.html#symbol-replace",a:"symbol-replace"},"13.54":{t:"Symbol.search\r",p:"\r",l:"InterviewJS/js.html#symbol-search",a:"symbol-search"},"13.55":{t:"Symbol.species\r",p:"\r",l:"InterviewJS/js.html#symbol-species",a:"symbol-species"},"13.56":{t:"Symbol.split\r",p:"\r",l:"InterviewJS/js.html#symbol-split",a:"symbol-split"},"13.57":{t:"Symbol.toPrimitive\r",p:"\r",l:"InterviewJS/js.html#symbol-toprimitive",a:"symbol-toprimitive"},"13.58":{t:"Symbol.toStringTag\r",p:"\r",l:"InterviewJS/js.html#symbol-tostringtag",a:"symbol-tostringtag"},"13.59":{t:"Symbol.unscopables\r",p:`80 页
`,l:"InterviewJS/js.html#symbol-unscopables",a:"symbol-unscopables"},"13.60":{t:"Object 类型\r",p:`每个 Object 实例都有如下属性和方法：

constructor：用于创建当前对象的函数。
hasOwnProperty(propertyName)：用于判断当前对象实例(不是原型)上是否存在给 ...`,l:"InterviewJS/js.html#object-类型",a:"object-类型"},"13.61":{t:"操作符\r",p:"\r",l:"InterviewJS/js.html#操作符",a:"操作符"},"13.62":{t:"一元操作符\r",p:`只操作一个值的操作符叫一元操作符(unary operator)。一元操作符是 ECMAScript 中最简单的操作符。
`,l:"InterviewJS/js.html#一元操作符",a:"一元操作符"},"13.63":{t:"递增/递减操作符\r",p:`递增和递减操作符有两个版本：前缀版和后缀版。
两个版本的区别是后缀版的递增和递减在语句被求值后才发生。
这 2 对操作符可以用作于任何值，意思就是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。 ...`,l:"InterviewJS/js.html#递增-递减操作符",a:"递增-递减操作符"},"13.64":{t:"一元加和减\r",p:`一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号(+)表示，放在变量前头，对数值没有任何影响。
一元减由一个减号(-)表示，放在变 ...`,l:"InterviewJS/js.html#一元加和减",a:"一元加和减"},"13.65":{t:"位操作符\r",p:`正值以真正的二进制格式存储，即 31 位中的每一位都代表 2 的幂。第一位(称为第 0 位)表示 20，第二位表示 21，依此类推。
负值以一种称为二补数(或补码)的二进制编码存储。一个数值的二补数通 ...`,l:"InterviewJS/js.html#位操作符",a:"位操作符"},"13.66":{t:"按位非\r",p:`按位非操作符用波浪符(~)表示，它的作用是返回数值的一补数。
let num1 = 25 // 二进制00000000000000000000000000011001
let num2 = ~num1 ...`,l:"InterviewJS/js.html#按位非",a:"按位非"},"13.67":{t:"按位与\r",p:`按位与操作符用和号(&amp;)表示，有两个操作数。本质上，按位与就是将两个数的每一个位对齐， 然后基于真值表中的规则，对每一位执行相应的与操作。



第一个数值的位
第二个数值的位
结果




 ...`,l:"InterviewJS/js.html#按位与",a:"按位与"},"13.68":{t:"按位或\r",p:`按位或操作符用管道符(|)表示，同样有两个操作数。按位或遵循如下真值表:



第一个数值的位
第二个数值的位
结果




1
1
1


1
0



0
1
1


0
0
0



按位异或
 ...`,l:"InterviewJS/js.html#按位或",a:"按位或"},"13.69":{t:"左移\r",p:`左移操作符用两个小于号(&lt;&lt;)表示，会按照指定的位数将数值的所有位向左移动。
`,l:"InterviewJS/js.html#左移",a:"左移"},"13.70":{t:"有符号右移\r",p:`有符号右移由两个大于号(&gt;&gt;)表示，会将数值的所有 32 位都向右移，同时保留符号(正或负)。 有符号右移实际上是左移的逆运算。
`,l:"InterviewJS/js.html#有符号右移",a:"有符号右移"},"13.71":{t:"无符号右移\r",p:`无符号右移用 3 个大于号表示(&gt;&gt;&gt;)，会将数值的所有 32 位都向右移。对于正数，无符号右移与 有符号右移结果相同。
对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会 ...`,l:"InterviewJS/js.html#无符号右移",a:"无符号右移"},"13.72":{t:"布尔操作符\r",p:"\r",l:"InterviewJS/js.html#布尔操作符",a:"布尔操作符"},"13.73":{t:"逻辑非\r",p:`逻辑非操作符由一个叹号(!)表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布 尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。
逻辑非操作 ...`,l:"InterviewJS/js.html#逻辑非",a:"逻辑非"},"13.74":{t:"逻辑与\r",p:`逻辑与操作符由两个和号(&amp;&amp;)表示，应用到两个值。
逻辑与操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
 ...`,l:"InterviewJS/js.html#逻辑与",a:"逻辑与"},"13.75":{t:"逻辑或\r",p:`逻辑或操作符由两个管道符(||)表示
逻辑或操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
true


false
tr ...`,l:"InterviewJS/js.html#逻辑或",a:"逻辑或"},"13.76":{t:"乘性操作符\r",p:`ECMAScript 定义了 3 个乘性操作符:乘法、除法和取模
`,l:"InterviewJS/js.html#乘性操作符",a:"乘性操作符"},"13.77":{t:"乘法操作符\r",p:`乘法操作符由一个星号(*)表示，可以用于计算两个数值的乘积。
特殊值处理
1. 如果操作数都是数值，则执行常规的乘法运算，即两个正值相乘是正值，两个负值相乘也是正值，正负符号不同的值相乘得到负值。如果 ...`,l:"InterviewJS/js.html#乘法操作符",a:"乘法操作符"},"13.78":{t:"除法运算符\r",p:`除法操作符由一个斜杠(/)表示，可以用于计算第一个操作数除以第二个操作数的商
特殊值处理
1. 如果操作数都是数值，则执行常规的除法运算，即两个正值相除是正值，两个负值相除也是正值，符号不同的值相除得 ...`,l:"InterviewJS/js.html#除法运算符",a:"除法运算符"},"13.79":{t:"取模运算符\r",p:`取模(余数)操作符由一个百分比符号(%)表示
特殊值处理

如果操作数是数值，则执行常规除法运算，返回余数。
如果被除数是无限值，除数是有限值，则返回 NaN。
如果被除数是有限值，除数是 0，则返回 ...`,l:"InterviewJS/js.html#取模运算符",a:"取模运算符"},"13.80":{t:"指数操作符\r",p:`ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**
不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作
let square ...`,l:"InterviewJS/js.html#指数操作符",a:"指数操作符"},"13.81":{t:"加性操作符\r",p:`加性操作符，即加法和减法操作符
`,l:"InterviewJS/js.html#加性操作符",a:"加性操作符"},"13.82":{t:"加法操作符\r",p:`加法操作符(+)用于求两个数的和
两个操作数都是数值执行规则

如果有任一操作数是 NaN，则返回 NaN;
如果是 Infinity 加 Infinity，则返回 Infinity;
如果是-Inf ...`,l:"InterviewJS/js.html#加法操作符",a:"加法操作符"},"13.83":{t:"减法操作符\r",p:`减法操作符(-)也是使用很频繁的一种操作符。
计算规则

如果两个操作数都是数值，则执行数学减法运算并返回结果。
如果有任一操作数是 NaN，则返回 NaN。
如果是 Infinity 减 Infin ...`,l:"InterviewJS/js.html#减法操作符",a:"减法操作符"},"13.84":{t:"关系操作符\r",p:`关系操作符执行比较两个值的操作，包括小于(&lt;)、大于(&gt;)、小于等于(&lt;=)和大于等于(&gt;=)
执行规则

如果操作数都是数值，则执行数值比较。
如果操作数都是字符串，则逐个比 ...`,l:"InterviewJS/js.html#关系操作符",a:"关系操作符"},"13.85":{t:"相等操作符\r",p:`第一组是等于和不等于，它们在比较之前执行转换。第二组是全等和不全等，它们在比较之前不执行转换
`,l:"InterviewJS/js.html#相等操作符",a:"相等操作符"},"13.86":{t:"等于和不等于\r",p:"ECMAScript 中的等于操作符用两个等于号(==)表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号(!=)表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进 ...",l:"InterviewJS/js.html#等于和不等于",a:"等于和不等于"},"13.87":{t:"全等和不全等\r",p:`全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号(===)表示，只有两个操作数在不转换的前提下相等才返回 true
不全等操作符用一个叹号和两 ...`,l:"InterviewJS/js.html#全等和不全等",a:"全等和不全等"},"13.88":{t:"条件操作符\r",p:` variable = boolean_expression ? true_value : false_value;

上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expressi ...`,l:"InterviewJS/js.html#条件操作符",a:"条件操作符"},"13.89":{t:"赋值操作符\r",p:`简单赋值用等于号(=)表示，将右手边的值赋给左手边的变量
复合赋值操作符

乘后赋值(*=)
除后赋值(/=)
取模后赋值(%=)
加后赋值(+=)
减后赋值(-=)
左移后赋值(&lt;&lt;=) ...`,l:"InterviewJS/js.html#赋值操作符",a:"赋值操作符"},"13.90":{t:"逗号操作符\r",p:`逗号操作符可以用来在一条语句中执行多个操作，如下所示:
let num1 = 1,
  num2 = 2,
  num3 = 3

也可以使用逗号操作符来辅助 赋值。在赋值时使用逗号操作符分隔值，最终 ...`,l:"InterviewJS/js.html#逗号操作符",a:"逗号操作符"},"13.91":{t:"语句(后续整理)\r",p:`P98
`,l:"InterviewJS/js.html#语句-后续整理",a:"语句-后续整理"},"14.0":{t:"# 1. 谈谈你对 Vue 的理解？\r",p:`官方：Vue是一套用于构架用户界面的渐进式框架，Vue 的核心库只关注视图层
!image-20240313101558411
`,l:"InterviewVue/01.谈谈你对Vue的理解.html",a:"_1-谈谈你对-vue-的理解"},"14.1":{t:"1.1 声明式框架\r",p:`Vue 的核心特点，用起来简单。那我们就有必要知道命令式和声明式的区别

早在 JQ的时代，编写的代码都是命令式的，命令式框架重要特点就是关注过程
声明式框架更加关注结果。命令式的代码封装到了 Vue ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-1-声明式框架",a:"_1-1-声明式框架"},"14.2":{t:"1.2 MVVM 模式\r",p:`说起 mvvm，就要知道另一个东西叫 MVC。为什么要有这些模式呢？
目的：职责划分、分层管理
!image-20240313103948553

对于前端而言就是如何将数据同步到页面上，也就是借鉴后 ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-2-mvvm-模式",a:"_1-2-mvvm-模式"},"14.3":{t:"1.3 采用虚拟 DOM\r",p:`传统更新页面，拼接一个完整的字符串innerHTML 全部重新渲染，添加虚拟 DOM 后，可以比较新旧虚拟节点，找到变化再进行更新。虚拟 DOM 就是一个对象，用来描述真实 DOM 的
github. ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-3-采用虚拟-dom",a:"_1-3-采用虚拟-dom"},"14.4":{t:"1.4 区分编译(打包)时和运行(浏览器)时\r",p:`
Vue 的渲染核心就是调用渲染(render)方法将虚拟 DOM 渲染成真实 DOM(缺点就是虚拟 DOM 编写麻烦)
专门写个编译时可以将模板编译成虚拟 DOM(在构建的时候进行编译性能更高，不需 ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-4-区分编译-打包-时和运行-浏览器-时",a:"_1-4-区分编译-打包-时和运行-浏览器-时"},"14.5":{t:"1.5 组件化\r",p:`实现高内聚、低耦合、单向数据流

组件化开发能大幅提高应用开发效率、测试性、复用性等；
降低更新范围，只重新渲染变化的组件

`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-5-组件化",a:"_1-5-组件化"},"15.0":{t:"# 2. 谈谈你对 SPA 的理解\r",p:"\r",l:"InterviewVue/02.谈谈你对spa的理解.html",a:"_2-谈谈你对-spa-的理解"},"15.1":{t:"1.1 理解基本概念\r",p:`
SPA(Single Page Application)单页应用，默认情况下我们编写 Vue、React 都只有一个 html 页面，并且提供一个挂载点，最终打包后会在此页面中引入对应的资源。(页面 ...`,l:"InterviewVue/02.谈谈你对spa的理解.html#_1-1-理解基本概念",a:"_1-1-理解基本概念"},"15.2":{t:"1.2 优缺点\r",p:`



单页面应用 SPA
多页面应用 MPA




组成
一个主页面和页面组件
多个完整的页面


刷新方式
局部刷新
整页刷新


SEO 搜索引擎优化
无法实现
容易实现


页面切换
速度快 ...`,l:"InterviewVue/02.谈谈你对spa的理解.html#_1-2-优缺点",a:"_1-2-优缺点"},"15.3":{t:"1.3 解决方案\r",p:`
静态页面预渲染(Static Site Generation)SSG，在构建时生成完整的 html 页面。(就是在打包的时候，先将页面放到浏览器中运行一下，将 HTML 保存起来)，仅适合静态页面网 ...`,l:"InterviewVue/02.谈谈你对spa的理解.html#_1-3-解决方案",a:"_1-3-解决方案"},"16.0":{t:"# 3.Vue为什么需要虚拟DOM.md\r",p:"\r",l:"InterviewVue/03.Vue为什么需要虚拟DOM.html",a:"_3-vue为什么需要虚拟dom-md"},"16.1":{t:"1.1 基本概念\r",p:`
基本所有框架都引入了虚拟 DOM 来对真实的 DOM 进行抽象，也就是现在大家所熟知的 VNode 和 VDOM


Virtual DOM 就是用 js 对象来描述真实 DOM，是对真实 DOM  ...`,l:"InterviewVue/03.Vue为什么需要虚拟DOM.html#_1-1-基本概念",a:"_1-1-基本概念"},"16.2":{t:"1.2补充：VDOM 是如何生成的\r",p:`
在 vue 中我们常常回味组件编写模板- template
这个模板会被编译器编译为渲染函数 - Render
在接下来的挂载过程中会调用 render 函数，返回的对象就是虚拟 DOM
会在后续的 ...`,l:"InterviewVue/03.Vue为什么需要虚拟DOM.html#_1-2补充-vdom-是如何生成的",a:"_1-2补充-vdom-是如何生成的"},"16.3":{t:"1.3 再次补充：VDOM 如何做 diff\r",p:`
挂载过程结束后，会记录第一次生成的 VDOM - oldVNode
当响应式数据发生变化时，将会引起组件刷新 render，此时就会生成新的 VDOM - newVNode
使用 oldVNode  ...`,l:"InterviewVue/03.Vue为什么需要虚拟DOM.html#_1-3-再次补充-vdom-如何做-diff",a:"_1-3-再次补充-vdom-如何做-diff"},"17.0":{t:"# 4. 谈谈对 Vue 组件化的理解\r",p:`
WebComponent组件化的核心组成：模板、属性、事件、插槽、生命周期

组件化好处：高聚合、可重用、可组合

组件化开发能大幅提高应用的开发效率、测试性、复用性等
降低更新范围，只重新渲染变化 ...`,l:"InterviewVue/04.谈谈对Vue组件化的理解.html",a:"_4-谈谈对-vue-组件化的理解"},"17.1":{t:"补充：\r",p:`
vue 中的每一个组件都有一个渲染函数 watcher、effect
数据是响应式的，数据变化后执行 watcher 或者 effect
组件要合理的划分，如果不拆分组件，那更新的时候整个页面都要重 ...`,l:"InterviewVue/04.谈谈对Vue组件化的理解.html#补充",a:"补充"},"18.0":{t:"# 5.既然 Vue 通过数据劫持可以精确探测数据变化，为什么还要虚拟 DOM 进行 diff 检测差异？\r",p:"Vue 内部设计原因导致。vue 设计的是每个组件一个 watcher(渲染 watcher)，没有采用一个属性对应一个 watcher，这样会导致大量 watcher 的产生而且看浪费内存，如果粒度 ...",l:"InterviewVue/05.为什么需要虚拟DOM进行diff检测差异.html",a:"_5-既然-vue-通过数据劫持可以精确探测数据变化-为什么还要虚拟-dom-进行-diff-检测差异"},"19.0":{t:"# 6.请说一下你对响应式的理解.md\r",p:"\r",l:"InterviewVue/06.请说一下你对响应式的理解.html",a:"_6-请说一下你对响应式的理解-md"},"19.1":{t:"1.1 如何实现响应式数据\r",p:"数组和对象类型当值变化时如何劫持到。对象内部通过 defineReactive 方法，使用Object.defineProperty将属性进行劫持(只会劫持已经存在的属性)，数组则是通过重写数组的方法 ...",l:"InterviewVue/06.请说一下你对响应式的理解.html#_1-1-如何实现响应式数据",a:"_1-1-如何实现响应式数据"},"19.2":{t:"1.2 Vue2 处理缺陷\r",p:`
在 Vue2 的时候使用 defineProperty来进行数据的劫持，需要对属性进行重写添加 getter 及 setter 性能差
当新增属性和删除属性时无法边控变化。需要通过$set、$del ...`,l:"InterviewVue/06.请说一下你对响应式的理解.html#_1-2-vue2-处理缺陷",a:"_1-2-vue2-处理缺陷"},"19.3":{t:"1.3 Vue2 与 Vue3 实现对比\r",p:`Vue2
let obj = { name: 'jw', age: 18 }
function observer (data) {
    if (typeof data !== 'object' | ...`,l:"InterviewVue/06.请说一下你对响应式的理解.html#_1-3-vue2-与-vue3-实现对比",a:"_1-3-vue2-与-vue3-实现对比"},"20.0":{t:"# 7. Vue 中如何检测数组变化\r",p:"\r",l:"InterviewVue/07.Vue中如何检测数组变化.html",a:"_7-vue-中如何检测数组变化"},"20.1":{t:"1.1 实现数组劫持\r",p:`
数组考虑性能的原因没有用defineProperty对数组的每一项进行拦截，而是选择重写数组(push、shift、pop、splice、unshift、sort、reverse)方法
数组中如果是 ...`,l:"InterviewVue/07.Vue中如何检测数组变化.html#_1-1-实现数组劫持",a:"_1-1-实现数组劫持"},"20.2":{t:"1.2 数组的缺点\r",p:`
数组的索引和长度变化是无法监控的

`,l:"InterviewVue/07.Vue中如何检测数组变化.html#_1-2-数组的缺点",a:"_1-2-数组的缺点"},"21.0":{t:"# 8.Vue 中如何进行依赖收集\r",p:"\r",l:"InterviewVue/08.Vue 中如何进行依赖收集.html",a:"_8-vue-中如何进行依赖收集"},"21.1":{t:"1.1 依赖收集流程\r",p:`
每个属性都拥有自己的 dep 属性，存放它所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去更新
默认在初始化时会调用 render 函数，此时会触发属性依赖收集 dep.d ...`,l:"InterviewVue/08.Vue 中如何进行依赖收集.html#_1-1-依赖收集流程",a:"_1-1-依赖收集流程"},"21.2":{t:"1.2 Vue3依赖收集\r",p:`
Vue3 中会通过 Map 结构将属性和 effect 映射起来
默认在初始化时会调用 render 函数，此时会触发依赖收集 track
当属性发生修改时会找对应的 effect 列表依次执行tr ...`,l:"InterviewVue/08.Vue 中如何进行依赖收集.html#_1-2-vue3依赖收集",a:"_1-2-vue3依赖收集"},"22.0":{t:"# 9. Vue.set方法是如何实现的\r",p:`Vue不允许在已经创建的实例上动态添加新的响应式属性
export function set (target, key, val) {
    // 1. 是开发环境 target 没定义或者是基础类 ...`,l:"InterviewVue/09.Vue.set方法是如何实现的.html",a:"_9-vue-set方法是如何实现的"},"23.0":{t:"# 10.v-if和 v-show的怎么理解\r",p:"\r",l:"InterviewVue/10.v-if和 v-show的优先级.html",a:"_10-v-if和-v-show的怎么理解"},"23.1":{t:"1.1 基本概念\r",p:`
v-if 如果条件不成立不会渲染当前指令所在节点的 DOM 元素
v-show 只是切换当前 dom 的显示或者隐藏

`,l:"InterviewVue/10.v-if和 v-show的优先级.html#_1-1-基本概念",a:"_1-1-基本概念"},"23.2":{t:"1.2 效果展示\r",p:`Vue Template Explorer (vuejs.org)
Vue Template Explorer (vuejs.org)
`,l:"InterviewVue/10.v-if和 v-show的优先级.html#_1-2-效果展示",a:"_1-2-效果展示"},"23.3":{t:"1.3 如何选择\r",p:`
v-if可以阻断内部代码是否执行，如果条件不成立不会执行内部逻辑
如果页面逻辑在第一次加载的时候已经被确认后续不会频繁更改则采用 v-if

`,l:"InterviewVue/10.v-if和 v-show的优先级.html#_1-3-如何选择",a:"_1-3-如何选择"},"24.0":{t:"# 11. Watch&computed\r",p:`Vue2中有三种 watcher(渲染 watcher、计算属性 watcher、用户 watcher)
Vue3 中有三种 effect(渲染 effect、计算属性 effect、用户 effec ...`,l:"InterviewVue/11.watch&computed.html",a:"_11-watch-computed"},"24.1":{t:"1.1 computed\r",p:`
计算属性仅当用户取值时才会执行对应的方法
computed属性是具备缓存的，依赖的值不发生变化，对其取值时计算属性方法不会重新执行。
计算属性可以简化模板中的复杂表达式
计算属性中不支持异步逻辑
c ...`,l:"InterviewVue/11.watch&computed.html#_1-1-computed",a:"_1-1-computed"},"24.2":{t:"1.2 watch\r",p:`watch 则是监控值的变化，当值发生变化时调用对应的回调函数。经常用于监控某个值的变化，进行一些操作。(异步要注意静态问题)

Vue3提供了 onCleanUp 函数，让用户方便使用也解决了清理问 ...`,l:"InterviewVue/11.watch&computed.html#_1-2-watch",a:"_1-2-watch"},"24.3":{t:"1.3 源码剖析",p:"",l:"InterviewVue/11.watch&computed.html#_1-3-源码剖析",a:"_1-3-源码剖析"},"25.0":{t:"# 解释 ref 和 reactive 区别？\r",p:"\r",l:"InterviewVue/12.解释 ref和reactive区别.html",a:"解释-ref-和-reactive-区别"},"25.1":{t:"1.1 基本概念\r",p:`ref 和 reactive 是 Vue3 数据响应式中非常重要的两个概念

reactive 用于处理对象类型的数据响应。底层采用的是 new Proxy()
ref 通常用于处理单值的响应式，re ...`,l:"InterviewVue/12.解释 ref和reactive区别.html#_1-1-基本概念",a:"_1-1-基本概念"},"25.2":{t:"1.2 源码实现",p:"",l:"InterviewVue/12.解释 ref和reactive区别.html#_1-2-源码实现",a:"_1-2-源码实现"},"26.0":{t:"# 13.watch 和 watchEffect 的区别\r",p:`
watchEffect 立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数
watch 侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。

const effect ...`,l:"InterviewVue/13.watch和watchEffect的区别.html",a:"_13-watch-和-watcheffect-的区别"},"27.0":{t:"#  如何将 template 转化成 render 函数\r",p:`Vue 中含有模板编译的功能，它的主要作用是将用户编写的 template 编译为 js 中可执行的 render 函数

将 template 模板转换成 ast 语法树- parseHTML
将静 ...`,l:"InterviewVue/14.如何将template转化成render函数.html",a:"如何将-template-转化成-render-函数"},"28.0":{t:"# 15. new Vue()这个过程中究竟做了什么\r",p:`
在 new Vue 的时候，内部会进行初始化操作
内部会初始化组件绑定的事件，初始化组件的父子关系$parent $children $root
初始化响应式数据 data、computed、wat ...`,l:"InterviewVue/15.new Vue()这个过程中究竟做了什么.html",a:"_15-new-vue-这个过程中究竟做了什么"},"29.0":{t:"# 16. Vue.observable 你有了解过吗.md\r",p:`Vue2.6 新增的一个 API，用于讲一个数据变成响应式的
在父子组件通信时，可以使用 eventBus 或者使用状态管理工具，但是功能不复杂的时候，我们可以考虑使用Vue.observable
`,l:"InterviewVue/16.Vue.observable你有了解过吗.html",a:"_16-vue-observable-你有了解过吗-md"},"30.0":{t:"# 17. v-if 和 v-for 哪个优先级更高\r",p:`v-for 和 v-if 避免在同一个标签中使用，如果遇到需要同事使用时可以考虑写成计算属性的方式。
&lt;!--应当避免这种写法 --&gt;
&lt;li v-for=&quot;i in ar ...`,l:"InterviewVue/17.v-if和v-for哪个优先级更高.html",a:"_17-v-if-和-v-for-哪个优先级更高"},"31.0":{t:"# 18. 生命周期有哪些\r",p:"\r",l:"InterviewVue/18.生命周期有哪些.html",a:"_18-生命周期有哪些"},"31.1":{t:"1.1 Vue2 中的生命周期\r",p:`主要的生命周期：创建前后、挂载前后、更新前后、销毁前后

beforeCreate 初始化父子关系及事件，数据观测(data Observer)之前被调用，用此方法一般编写插件的时候会用到
creat ...`,l:"InterviewVue/18.生命周期有哪些.html#_1-1-vue2-中的生命周期",a:"_1-1-vue2-中的生命周期"},"31.2":{t:"1.2 V2 和 V3 中的生命周期对比\r",p:`


生命周期 V2
生命周期 V3
描述




beforeCreate
beforeCreate
组件实例被创建之初


created
created
组件实例已经完全创建


beforeM ...`,l:"InterviewVue/18.生命周期有哪些.html#_1-2-v2-和-v3-中的生命周期对比",a:"_1-2-v2-和-v3-中的生命周期对比"},"32.0":{t:"# 19. Vue 中 diff 算法原理\r",p:"\r",l:"InterviewVue/19.Vue中diff算法原理.html",a:"_19-vue-中-diff-算法原理"},"32.1":{t:"1.1 Diff 概念\r",p:`vue 基于虚拟 DOM 做更新。diff 的核心就比较两个虚拟节点的差异。Vue 的 diff 算法是平级比较，不考虑跨级比较的情况。内部采用深度递归的方式 + 双指针的方式进行比较。
`,l:"InterviewVue/19.Vue中diff算法原理.html#_1-1-diff-概念",a:"_1-1-diff-概念"},"32.2":{t:"1.2 Diff 比较流程\r",p:`
先比较是否是相同节点 key tag
相同节点比较属性，并复用老节点(将老的虚拟 DOM 复用给新的虚拟节点 DOM)
比较儿子节点，考虑老节点和新节点儿子的情况

老的没儿子，现在有儿子。直接插入 ...`,l:"InterviewVue/19.Vue中diff算法原理.html#_1-2-diff-比较流程",a:"_1-2-diff-比较流程"},"33.0":{t:"# 20. 请说明 Vue 中 key 的作用和原理，谈谈你对它的理解\r",p:"\r",l:"InterviewVue/20.请说明Vue中key的作用和原理.html",a:"_20-请说明-vue-中-key-的作用和原理-谈谈你对它的理解"},"33.1":{t:"1.1 key 的概念\r",p:`
key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNode。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能地尝试就地 ...`,l:"InterviewVue/20.请说明Vue中key的作用和原理.html#_1-1-key-的概念",a:"_1-1-key-的概念"},"33.2":{t:"1.2 key 的作用\r",p:`
Vue 在 patch 过程中通过 key 可以判断两个虚拟节点是否是相同节点。(可以复用老节点)
无 key 会导致更新的时候出问题
尽量不要采用索引作为 key

!image-20240314 ...`,l:"InterviewVue/20.请说明Vue中key的作用和原理.html#_1-2-key-的作用",a:"_1-2-key-的作用"},"34.0":{t:"# 21.Vue.use 是干什么的\r",p:"\r",l:"InterviewVue/21.Vue.use是干什么的.html",a:"_21-vue-use-是干什么的"},"34.1":{t:"1.1 use 概念\r",p:"安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入，这样插件中就 ...",l:"InterviewVue/21.Vue.use是干什么的.html#_1-1-use-概念",a:"_1-1-use-概念"},"34.2":{t:"1.2 插件的功能\r",p:`
添加全局指令、全局过滤器、全局组件
通过全局混入来添加一些组件选项
添加 vue 实例方法，通过把它们添加到 vue.prototype 上实现

`,l:"InterviewVue/21.Vue.use是干什么的.html#_1-2-插件的功能",a:"_1-2-插件的功能"},"34.3":{t:"1.3 实现原理\r",p:`Vue.use = function (plugin: Function | Object) {
  // 插件缓存
  const installedPlugins =
    this._inst ...`,l:"InterviewVue/21.Vue.use是干什么的.html#_1-3-实现原理",a:"_1-3-实现原理"},"35.0":{t:"# 22. Vue.extend 方法的作用\r",p:"\r",l:"InterviewVue/22.Vue.extend方法的作用.html",a:"_22-vue-extend-方法的作用"},"35.1":{t:"1.1 Vue.extend 概念\r",p:`使用基础 Vue 构造器，创建一个&quot;子类&quot;。参数是一个包含组件选项的对象。
data 选项是特例，需要注意 - 在 Vue.extend()中它必须是函数
var profile  ...`,l:"InterviewVue/22.Vue.extend方法的作用.html#_1-1-vue-extend-概念",a:"_1-1-vue-extend-概念"},"35.2":{t:"1.2 分析\r",p:`
所有的组件创建时都会调用 Vue.extend()方法进行创建。
有了此方法我们可以用于手动挂载组件。
后端存储的字符串模板我们可以通过 Vue.extend 方法将其进行渲染，但是需要引入编译时。 ...`,l:"InterviewVue/22.Vue.extend方法的作用.html#_1-2-分析",a:"_1-2-分析"},"36.0":{t:"# 23.Vue 组件 data 为什么必须是一个函数\r",p:`
根实例对象 data 可以是对象也可以是函数&quot;单例&quot;，不会产生数据污染的情况
组件实例对象 data 必须是函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污 ...`,l:"InterviewVue/23.Vue组件data为什么必须是一个函数.html",a:"_23-vue-组件-data-为什么必须是一个函数"},"37.0":{t:"# 24. 函数组件的优势\r",p:"函数式组件的特性：无状态、无生命周期、无 this，但是性能高。正常组件是一个类继承了 Vue，函数式组件就是普通的函数，没有 new 的过程。最终就是将返回的虚拟 DOM 变成真实 DOM 替换对应 ...",l:"InterviewVue/24.函数组件的优势.html",a:"_24-函数组件的优势"},"38.0":{t:"# 25. Vue 的过滤器了解吗？过滤器的使用场景\r",p:`过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解成纯函数。
{{ message | filterA(&quot;arg1&quot;,&quot;ar ...`,l:"InterviewVue/25.Vue的过滤器了解吗？过滤器的使用场景.html",a:"_25-vue-的过滤器了解吗-过滤器的使用场景"},"39.0":{t:"# 26. v-once 的使用场景有哪些\r",p:"\r",l:"InterviewVue/26.v-once的使用场景有哪些.html",a:"_26-v-once-的使用场景有哪些"},"39.1":{t:"1.1 v-once 概念\r",p:`v-once 是 Vue 的内置指令，只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能
`,l:"InterviewVue/26.v-once的使用场景有哪些.html#_1-1-v-once-概念",a:"_1-1-v-once-概念"},"39.2":{t:"1.2 v-once 使用场景\r",p:`&lt;!-- 单个元素 --&gt;
&lt;span v-once&gt; This will never change: {{ msg }}&lt;/span&gt;
&lt;!-- 有子元素  ...`,l:"InterviewVue/26.v-once的使用场景有哪些.html#_1-2-v-once-使用场景",a:"_1-2-v-once-使用场景"},"40.0":{t:"# 27. Vue.mixin的使用场景和原理\r",p:"\r",l:"InterviewVue/27.Vue.mixin的原理和使用场景.html",a:"_27-vue-mixin的使用场景和原理"},"40.1":{t:"1.1 Vue.mixin 概念\r",p:`mixin可以用来扩展组件，将公共逻辑进行抽离。在需要该逻辑时进行“混入”，采用策略模式针对不同的属性进行合并。如果混入的数据和本身组件中的数据冲突，会采用“就近原则”以组件的数据为准、

mixin ...`,l:"InterviewVue/27.Vue.mixin的原理和使用场景.html#_1-1-vue-mixin-概念",a:"_1-1-vue-mixin-概念"},"40.2":{t:"1.2 混入方式\r",p:`在Vue中我们可以局部混入跟全局混入。一般情况下全局混入用于编写组件。局部混入用于复用逻辑。
`,l:"InterviewVue/27.Vue.mixin的原理和使用场景.html#_1-2-混入方式",a:"_1-2-混入方式"},"40.3":{t:"1.3 mixin合并策略\r",p:`核心就是：对象的合并处理

props、methods、inject、computed同名时会被替换
data会被合并
生命周期和watch方法会被合并成队列
components、directive ...`,l:"InterviewVue/27.Vue.mixin的原理和使用场景.html#_1-3-mixin合并策略",a:"_1-3-mixin合并策略"},"41.0":{t:"# 28. Vue 中的 slot 是怎样实现的？什么时候使用它？\r",p:"\r",l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html",a:"_28-vue-中的-slot-是怎样实现的-什么时候使用它"},"41.1":{t:"1.1 什么是插槽？\r",p:`插槽设计来源于 Web Components 规范草案，利用slot进行占位，在使用组件时，组件标签内部的内容会分发到对应的 slot 中。
`,l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html#_1-1-什么是插槽",a:"_1-1-什么是插槽"},"41.2":{t:"1.2 什么时候使用它？\r",p:`通过插槽可以让用户更好地对组件进行扩展和定制化。可以通过具名插槽指定渲染的位置。常用的组件例如：弹窗组件、布局组件、表格组件、树组件……
`,l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html#_1-2-什么时候使用它",a:"_1-2-什么时候使用它"},"41.3":{t:"1.3 插槽的分类和原理\r",p:`

默认插槽


具名插槽
\`&lt;div&gt;
  &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;
  &lt;slot name=&quot; ...`,l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html#_1-3-插槽的分类和原理",a:"_1-3-插槽的分类和原理"},"42.0":{t:"# 29. 说说你对双向绑定的理解，以及它的实现原理\r",p:"\r",l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html",a:"_29-说说你对双向绑定的理解-以及它的实现原理"},"42.1":{t:"1.1 双向绑定的概念\r",p:"vue 中双向绑定靠的是指令 v-model，可以绑定一个动态值到视图上，同时修改视图能改变数据对应的值(能修改的视图就是表单组件) 经常会听到一句话：v-model 是 value 和 input  ...",l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html#_1-1-双向绑定的概念",a:"_1-1-双向绑定的概念"},"42.2":{t:"1.2 表单元素的 v-model\r",p:`内部会根据标签的不同解析出不同的语法。并且这里有&quot;额外&quot;的处理逻辑

例如 文本框会被解析成 value + input 事件，会解决中文输入问题
例如 复选框会被解析成 chec ...`,l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html#_1-2-表单元素的-v-model",a:"_1-2-表单元素的-v-model"},"42.3":{t:"1.3 组件中的 v-model\r",p:`组件上的v-model默认会利用名为 value的 prop 和名为input的事件。对于组件而言，v-model 就是value + input 的语法糖。可用于组件中的数据的双向绑定。
名字也可以 ...`,l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html#_1-3-组件中的-v-model",a:"_1-3-组件中的-v-model"},"43.0":{t:"# 30. Vue 中 .sync 修饰符的作用？\r",p:"在有些情况下，我们可能需要对一个 prop 进行&quot;双向绑定&quot;，这时可以使用.sync 来实现。v-model 默认只能双向绑定一个属性，这里就可以通过.sync修饰符绑定多个属性。 ...",l:"InterviewVue/30.Vue 中.sync修饰符的作用？.html",a:"_30-vue-中-sync-修饰符的作用"},"44.0":{t:"# 30. Vue 中递归组件的理解\r",p:`&lt;el-menu&gt;
  &lt;el-menu-item&gt;根 1&lt;/el-menu-item&gt;
  &lt;el-submenu&gt;
    &lt;template ...`,l:"InterviewVue/31.Vue 中递归组件的理解.html",a:"_30-vue-中递归组件的理解"},"44.1":{t:"1.1 模板递归\r",p:`&lt;el-menu&gt;
  &lt;template v-for=&quot;item in data&quot;&gt;
    &lt;resub :data=&quot;item&quo ...`,l:"InterviewVue/31.Vue 中递归组件的理解.html#_1-1-模板递归",a:"_1-1-模板递归"},"44.2":{t:"1.2 渲染函数递归\r",p:`render(){
  let renderChildren = (data)=&gt;{
    return data.map((child)=&gt;{
      return child.c ...`,l:"InterviewVue/31.Vue 中递归组件的理解.html#_1-2-渲染函数递归",a:"_1-2-渲染函数递归"},"45.0":{t:"# 32.组件中写 name 属性有哪些好处和作用？\r",p:`
增加 name 选择会在components属性中增加组件本身，实现组件的递归调用
可以表示组件的具体名称，方便调试和查找对应组件
$children.filter(item=&gt;item.$o ...`,l:"InterviewVue/32.组件中写 name 选项有哪些好处及作用.html",a:"_32-组件中写-name-属性有哪些好处和作用"},"46.0":{t:"# 33. Vue 常见的修饰符有哪些？有什么应用场景\r",p:`
表单修饰符 lazy、trim、number
事件修饰符 stop、prevent、self、once、capture、passive、native
鼠标按键修饰符 left、right、middl ...`,l:"InterviewVue/33.Vue 常见的修饰符有哪些，有什么应用场景.html",a:"_33-vue-常见的修饰符有哪些-有什么应用场景"},"47.0":{t:"# 34. Vue 中异步组件的作用和原理\r",p:"\r",l:"InterviewVue/34.Vue中异步组件的作用和原理.html",a:"_34-vue-中异步组件的作用和原理"},"47.1":{t:"1.1 异步组件概念\r",p:`Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。推荐的做法是将异步组件和 webpack 的 code-solitting 功能一起配合使用。
`,l:"InterviewVue/34.Vue中异步组件的作用和原理.html#_1-1-异步组件概念",a:"_1-1-异步组件概念"},"47.2":{t:"1.2 异步组件的写法\r",p:`

回调写法
{
  components: {
    &quot;my-component&quot;: (resolve, reject) =&gt; {
      setTimeout(fu ...`,l:"InterviewVue/34.Vue中异步组件的作用和原理.html#_1-2-异步组件的写法",a:"_1-2-异步组件的写法"},"47.3":{t:"1.3 异步组件原理\r",p:`
默认渲染异步占位符节点
组件加载完毕后调用 $forceUpdate 强制更新，渲染加载完毕后的组件

`,l:"InterviewVue/34.Vue中异步组件的作用和原理.html#_1-3-异步组件原理",a:"_1-3-异步组件原理"},"48.0":{t:"# 35. 说说你对 nextTick 的理解？\r",p:"\r",l:"InterviewVue/35.说说你对 nextTick 的理解.html",a:"_35-说说你对-nexttick-的理解"},"48.1":{t:"1.1 nextTick 概念\r",p:`
Vue 中视图更新是异步的，使用 nextTick 方法可以保证用户定义的逻辑在更新之后执行
可用于获取更新后的 DOM，多次调用 nextTick 会被合并。

&lt;template&gt;
 ...`,l:"InterviewVue/35.说说你对 nextTick 的理解.html#_1-1-nexttick-概念",a:"_1-1-nexttick-概念"},"49.0":{t:"# 36. keep-alive 平时在哪里使用\r",p:"\r",l:"InterviewVue/36.keep-alive平时在哪里使用.html",a:"_36-keep-alive-平时在哪里使用"},"49.1":{t:"1.1 概念\r",p:`keep-alive 是 vue 中的内置组件，能在组件切换过程中会缓存组件的实例，而不是销毁他们。在组建再次重新激活时可以通过缓存的实例拿到之前渲染的 DOM 进行渲染，无需重新生成节点。
`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-1-概念",a:"_1-1-概念"},"49.2":{t:"1.2 使用场景\r",p:`动态组件可以采用keep-alive进行缓存
&lt;keep-alive :include=&quot;whiteList&quot; :exclude=&quot;blackList&quot;  ...`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-2-使用场景",a:"_1-2-使用场景"},"49.3":{t:"1.3 原理\r",p:`export default {
    name:'keep-alive',
    abstract:true, // 不会放到对应的lifecycle
    props:{
        i ...`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-3-原理",a:"_1-3-原理"},"49.4":{t:"1.4 keep-alive中数据更新问题\r",p:`beforeRouteEnter: 在与 vue-router 的项目，每次进入路由的时候，都会执行beforeRouteEnter
beforeRouteEnter(to, from, next){ ...`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-4-keep-alive中数据更新问题",a:"_1-4-keep-alive中数据更新问题"},"50.0":{t:"# 37. 自定义指令的使用场景\r",p:"\r",l:"InterviewVue/37.自定义指令的应用场景.html",a:"_37-自定义指令的使用场景"},"50.1":{t:"1.1 指令的概念\r",p:`vue 除了内置指令之外，同时 Vue 也允许用户注册自定义指令来对 Vue 进行扩展。指令的目的在于可以将操作 DOM 的逻辑进行复用。
`,l:"InterviewVue/37.自定义指令的应用场景.html#_1-1-指令的概念",a:"_1-1-指令的概念"},"50.2":{t:"1.2 指令的生命周期\r",p:`
bind: 只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次性的初始化设置。
inserted: 被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。
update:  ...`,l:"InterviewVue/37.自定义指令的应用场景.html#_1-2-指令的生命周期",a:"_1-2-指令的生命周期"},"50.3":{t:"1.3 常见的指令编写\r",p:`

图片懒加载 v-lazy


防抖 v-debounce


按钮权限 v-has


拖拽指令 v-draggable 、mousemove、mouseup、mousedown、dragente ...`,l:"InterviewVue/37.自定义指令的应用场景.html#_1-3-常见的指令编写",a:"_1-3-常见的指令编写"},"51.0":{t:"# 38. Vue 中使用了哪些设计模式\r",p:`
单例模式 - 单例模式就是整个程序有且仅有一个实例 Vuex 中的 store
工厂模式 - 传入参数即可创建实例(createElement)
发布订阅模式 - 订阅者把自己想订阅的事件注册到调度 ...`,l:"InterviewVue/38.Vue 中使用了哪些设计模式.html",a:"_38-vue-中使用了哪些设计模式"},"52.0":{t:"# 39. Vue 中的性能优化有哪些\r",p:`
数据层级不宜过深，合理设置响应式数据
通过Object.freeze()方法冻结属性
使用数据时，缓存值的结果，不频繁取值
合理设置 key 属性
v-show 和 v-if 的选取
控制组件力粒度 ...`,l:"InterviewVue/39.Vue 中的性能优化有哪些.html",a:"_39-vue-中的性能优化有哪些"},"53.0":{t:"# 40. 单页应用首屏加载速度慢的怎么解决？\r",p:`
使用路由懒加载、异步组件，实现组件拆分，减少入口文件体积大小(优化体验骨架屏)
抽离公共代码，采用splitChunks进行代码分割。
组件加载采用按需加载的方式。
静态资源缓存，采用 HTTP 缓 ...`,l:"InterviewVue/40.单页应用首屏加载慢的怎么解决.html",a:"_40-单页应用首屏加载速度慢的怎么解决"},"54.0":{t:"# 41. Vue 项目中你是如何解决跨域的呢？\r",p:`跨域是浏览器同源策略导致的，这个是浏览器的行为(协议、主机名、端口的不同都会导致跨域问题)。服务端和服务端之间进行通信是没有跨域问题的。跨域的实现方案有很多种。不过一般常用的就那么几中

CORS(C ...`,l:"InterviewVue/41.Vue 项目中你是如何解决跨域的呢.html",a:"_41-vue-项目中你是如何解决跨域的呢"},"55.0":{t:"# 42. Vue 项目中有封装过 axios 吗？主要是封装哪方面的？\r",p:`
设置请求超时时间
根据项目环境设置请求路径
设置拦截请求，自动添加 Token
设置响应拦截，对响应的状态码或者数据进行格式化
增添请求队列，实现 loading 效果
维护取消请求 token，在 ...`,l:"InterviewVue/42.Vue 项目中有封装过 axios 吗？主要是封装哪方面的？.html",a:"_42-vue-项目中有封装过-axios-吗-主要是封装哪方面的"},"56.0":{t:"# 43.Vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？\r",p:"\r",l:"InterviewVue/43.Vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？.html",a:"_43-vue-要做权限管理该怎么做-如果控制到按钮级别的权限怎么做"},"56.1":{t:"1.1 常见权限控制\r",p:`
登录鉴权：用户登录后返回 token，前端将 token 保存到本地，作为用户登录的凭证，每次发送请求时会携带 token，后端会对 token 进行验证。当页面刷新时我们可以使用token 来获得 ...`,l:"InterviewVue/43.Vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？.html#_1-1-常见权限控制",a:"_1-1-常见权限控制"},"57.0":{t:"# 44.Vue-Router 有几种钩子函数，具体是什么及执行流程是怎样的？\r",p:`
导航被触发
在失活的组件调用 beforeRouteLeave守卫
调用全局的 beforeEach 守卫
在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)
在路由配置里调用 ...`,l:"InterviewVue/44.Vue-Router 有几种钩子函数，具体是什么及执行流程是怎样的？.html",a:"_44-vue-router-有几种钩子函数-具体是什么及执行流程是怎样的"},"58.0":{t:"# 45. Vue-Router 几种模式的区别\r",p:`
Vue-Router 有三种模式 hash、history、abstract
abstract 模式是在不支持浏览器 API 环境使用，不依赖于浏览器历史
hash 模式：hash + popSta ...`,l:"InterviewVue/45.Vue-Router 几种模式的区别.html",a:"_45-vue-router-几种模式的区别"},"59.0":{t:"# 46.Vue 项目本地开发完后部署到服务器后报 404 是什么原因呢\r",p:`history 模式刷新时会向服务器发起请求，服务端无法响应到对应的资源，所以会出现 404 问题
`,l:"InterviewVue/46.Vue 项目本地开发完后部署到服务器后报 404 是什么原因呢.html",a:"_46-vue-项目本地开发完后部署到服务器后报-404-是什么原因呢"},"60.0":{t:"#  47. 谈谈你对 vuex 的个人理解\r",p:`\r
`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html",a:"_47-谈谈你对-vuex-的个人理解"},"60.1":{t:" ",p:"",l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#",a:""},"60.2":{t:"1.1 概念\r",p:`
vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式，采用集中存储管理应用的所有组件的状态。核心就是解决数据的共享。
以相应的规则保证状态以一种可预测的方式发生变化。

!vuex
`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-1-概念",a:"_1-1-概念"},"60.3":{t:"1.2 状态修改\r",p:`
组件中 commit() -&gt; mutation -&gt;修改状态
组件中 dispatch() -&gt; action(为了解决接口的复用问题，封装公共的逻辑) -&gt; commit ...`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-2-状态修改",a:"_1-2-状态修改"},"60.4":{t:"1.3 缺点\r",p:`Vuex 中 store 只有一份，复杂的数据需要依赖于模块。Vuex 状态是一个树状结构，最终会将模块的状态挂载到根模块上。

模块和状态的名字冲突
数据不够扁平化，调用的时候过长
更改状态 mut ...`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-3-缺点",a:"_1-3-缺点"},"60.5":{t:"1.4 原理\r",p:`对于 Vuex3 核心就是通过 new Vue()创建了一个 Vue 实例，进行数据共享。
对于 Vuex4 核心就是通过创建一个响应式对象进行数据共享reactive()
`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-4-原理",a:"_1-4-原理"},"61.0":{t:"# 48.如何监听 vuex 中数据的变化\r",p:`
通过 watch 监控 vuex 中状态变化。
通过 store.subscribe 监控状态变化。

`,l:"InterviewVue/48.如何监听 vuex 中数据的变化.html",a:"_48-如何监听-vuex-中数据的变化"},"62.0":{t:"# 49.页面刷新后 vuex 的数据丢失怎么解决\r",p:`
每次获取数据前检测 Vuex 数据是否存在，不存在则发请求重新拉去数据，存储到 Vuex 中
采用 Vuex 持久化插件，将数据存储到 localStorage 或者 sessionStorage  ...`,l:"InterviewVue/49.页面刷新后 vuex 的数据丢失怎么解决.html",a:"_49-页面刷新后-vuex-的数据丢失怎么解决"},"63.0":{t:"# 50.mutation 和 action 的区别\r",p:`
在 action 中可以处理异步逻辑，可以获取数据后将结果提交给 mutation，mutation 中则是修改 state
在 action 中可以多次进行 commit 操作，包括 action ...`,l:"InterviewVue/50.mutation 和 action 的区别.html",a:"_50-mutation-和-action-的区别"},"64.0":{t:"# 51.有使用过 vuex 的 module 吗？在什么情况下会使用\r",p:`使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。
Vuex 允许我们将 store 分割成模块(module)。每个模块拥有自己的  ...`,l:"InterviewVue/51.有使用过 vuex 的 module 吗？在什么情况下会使用.html",a:"_51-有使用过-vuex-的-module-吗-在什么情况下会使用"},"65.0":{t:"# 52.Vue3 中 CompositionAPI 的优势是？\r",p:`
在 Vue2 中采用的是 OptionsAPI，用户提供的 data、props、methods、computed、watch 等属性(用户编写复杂业务逻辑会出现反复横跳的问题)
Vue2 中所有的 ...`,l:"InterviewVue/52.Vue3中 CompositionAPI 的优势是？.html",a:"_52-vue3-中-compositionapi-的优势是"},"66.0":{t:"# 53.Vue3 有了解过吗？能说说跟 Vue2 的区别吗？\r",p:`
Vue3.0 更注重模块上的拆分，在 2.0 中无法单独使用的模块，需要引入完整的 Vuejs(例如只想使用响应式部分，但是需要引入完整的 Vuejs)，Vue3 中的模块之间耦合度低，模块可以独立 ...`,l:"InterviewVue/53.Vue3 有了解过吗？能说说跟 Vue2 的区别吗？.html",a:"_53-vue3-有了解过吗-能说说跟-vue2-的区别吗"},"67.0":{t:"# 54. Vue 项目中的错误如何处理的\r",p:"\r",l:"InterviewVue/54.Vue 项目中的错误如何处理的.html",a:"_54-vue-项目中的错误如何处理的"},"67.1":{t:"1.1 errorCapture 钩子\r",p:`可以捕获来自后代组件的错误，如果全局的 config.errorHandler 被定义，所有的错误仍会发送给它，因此这些错误仍然会向单一的分析服务的地方进行汇报

父组件(errorCapture)  ...`,l:"InterviewVue/54.Vue 项目中的错误如何处理的.html#_1-1-errorcapture-钩子",a:"_1-1-errorcapture-钩子"},"67.2":{t:"1.2 全局设置错误处理\r",p:`如果在组件渲染时出现运行错误，错误将会被传递至全局 Vue.config.errorHandler 配置函数
Vue.config.errorHandler = (err, vm, info) =&g ...`,l:"InterviewVue/54.Vue 项目中的错误如何处理的.html#_1-2-全局设置错误处理",a:"_1-2-全局设置错误处理"},"67.3":{t:"1.3 接口异常处理\r",p:`instance.interceptors.response.use(
    (res) =&gt; {
        return res.data
    },
    (err) =&gt; ...`,l:"InterviewVue/54.Vue 项目中的错误如何处理的.html#_1-3-接口异常处理",a:"_1-3-接口异常处理"},"68.0":{t:"# 55.Vue3 中模板编译优化\r",p:"\r",l:"InterviewVue/55.Vue3 中模板编译优化.html",a:"_55-vue3-中模板编译优化"},"68.1":{t:"1.1 PatchFlags 优化\r",p:`Diff 算法无法避免新旧虚拟DOM 中无用的比较操作，通过 patchFlags 来标记动态内容，可以实现快速 diff 算法。
&lt;div&gt;
  &lt;h1&gt;Hello Jian ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#_1-1-patchflags-优化",a:"_1-1-patchflags-优化"},"68.2":{t:"1.2 BlockTree\r",p:`为什么我们还要提出 blockTree 的概念？只有 block 不就挺好的么？问题出在 block 在收集动态节点时是忽略虚拟 DOM 树层级的
&lt;div&gt;
  &lt;p v-if=& ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#_1-2-blocktree",a:"_1-2-blocktree"},"68.3":{t:"不稳定结构\r",p:`所谓的不稳定结构就是 DOM 树的结构可能会发生变化。不稳定结构有哪些呢？(v-if/v-for/fragment)
`,l:"InterviewVue/55.Vue3 中模板编译优化.html#不稳定结构",a:"不稳定结构"},"68.4":{t:"v-if\r",p:`&lt;div&gt;
  &lt;p v-if=&quot;flag&quot;&gt;
    &lt;span&gt;{{ a }}&lt;/span&gt;
  &lt;/p&gt;
  &l ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#v-if",a:"v-if"},"68.5":{t:"v-for\r",p:`随着 v-for 变量的变化也会导致虚拟DOM 树变得不稳定
&lt;div&gt;
  &lt;div v-for=&quot;item in fruits&quot; &gt;
    {{ it ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#v-for",a:"v-for"},"68.6":{t:"稳定 Fragment",p:"",l:"InterviewVue/55.Vue3 中模板编译优化.html#稳定-fragment",a:"稳定-fragment"},"69.0":{t:"# 什么是 JavaScript\r",p:"\r",l:"JavaScript/第1章-什么是 JavaScript.html",a:"什么是-javascript"},"69.1":{t:"JavaScript 是什么\r",p:`虽然 JavaScript 和 ECMAScript 基本上是同义词, 但是 JavaScript 远远不限于 ECMA-262 所定义的那样
完整的 JavaScript 包含以下几个部分

核心( ...`,l:"JavaScript/第1章-什么是 JavaScript.html#javascript-是什么",a:"javascript-是什么"},"69.2":{t:"JavaScript 实现\r",p:"\r",l:"JavaScript/第1章-什么是 JavaScript.html#javascript-实现",a:"javascript-实现"},"69.3":{t:"ECMAScript\r",p:`在基本层面上, ECMA-262 描述 JavaScript 包含如下几个部分
语法、类型、语句、关键字、保留字、操作符、全局对象
`,l:"JavaScript/第1章-什么是 JavaScript.html#ecmascript",a:"ecmascript"},"69.4":{t:"DOM\r",p:`文档对象模型(Document Object Model)是一个应用编程接口(API), 用于在 HTML 中使用扩展的 XML。
`,l:"JavaScript/第1章-什么是 JavaScript.html#dom",a:"dom"},"69.5":{t:"DOM 级别\r",p:`DOMLevel1 由 DOM Core 和 DOM HTML 组成。 前者提供了一中映射 XML 文档，从而方便访问和操作文档任意部分的方式；后者扩展了前者并增加了特定于 HTML 的对象和方法。
 ...`,l:"JavaScript/第1章-什么是 JavaScript.html#dom-级别",a:"dom-级别"},"69.6":{t:"BOM\r",p:`IE3 和 Netscape Navigator 3 提供的浏览器对象模型（BOM）API，用于支持访问和操作浏览器的窗口。
BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定 ...`,l:"JavaScript/第1章-什么是 JavaScript.html#bom",a:"bom"},"69.7":{t:"JavaScript 的不同版本",p:"",l:"JavaScript/第1章-什么是 JavaScript.html#javascript-的不同版本",a:"javascript-的不同版本"},"70.0":{t:"# HTML 中的 JavaScript\r",p:"\r",l:"JavaScript/第2章-HTML 中的 JavaScript.html",a:"html-中的-javascript"},"70.1":{t:"\\<Script\\> 元素\r",p:`script 元素有下列 8 个属性

async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效
charset：可选。使用 src 属 ...`,l:"JavaScript/第2章-HTML 中的 JavaScript.html#script-元素",a:"script-元素"},"71.0":{t:"# 语言基础\r",p:"\r",l:"JavaScript/第3章-语言基础.html",a:"语言基础"},"71.1":{t:"语法\r",p:"\r",l:"JavaScript/第3章-语言基础.html#语法",a:"语法"},"71.2":{t:"区分大小写\r",p:"ECMAScript 中一切都是区分大小写的。无论是变量、函数名还是操作符，都区分大小写。换句话说。变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一 ...",l:"JavaScript/第3章-语言基础.html#区分大小写",a:"区分大小写"},"71.3":{t:"标识符\r",p:`所谓标识符，就是变量、函数、属性或者函数参数的名称。标识符可以由一个或多个下列字符组成：
第一个字符必须是一个字母、下划线(_)或美元符号($)；
剩下的其他字符可以是字母、下划线、美元符号或数字；
 ...`,l:"JavaScript/第3章-语言基础.html#标识符",a:"标识符"},"71.4":{t:"注释\r",p:`ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。
单行注释以两个斜杠字符(//)开头，如
// 单行注释

块注释以一个斜杠和一个星号(/*)开头，以它们的反向组合(*/)结尾。 ...`,l:"JavaScript/第3章-语言基础.html#注释",a:"注释"},"71.5":{t:"严格模式\r",p:"ECMAScript 5 新增了严格模式的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。 ...",l:"JavaScript/第3章-语言基础.html#严格模式",a:"严格模式"},"71.6":{t:"关键字和保留字\r",p:"\r",l:"JavaScript/第3章-语言基础.html#关键字和保留字",a:"关键字和保留字"},"71.7":{t:"关键字\r",p:`break 	do		in		typeof		case		else		instanceof
var		catch		export		new		void		class		extends
return		 ...`,l:"JavaScript/第3章-语言基础.html#关键字",a:"关键字"},"71.8":{t:"保留字\r",p:`ECMA-262 描述了一组保留的关键字，这些关键字有特殊用途，比如表示控制语句的开始和结束， 或者执行特定的操作。按照规定，保留的关键字不能用作标识符或属性名。
`,l:"JavaScript/第3章-语言基础.html#保留字",a:"保留字"},"71.9":{t:"始终保留\r",p:`enum

`,l:"JavaScript/第3章-语言基础.html#始终保留",a:"始终保留"},"71.10":{t:"严格模式下保留\r",p:`implements		interface		let		package		protected
private		public		static

`,l:"JavaScript/第3章-语言基础.html#严格模式下保留",a:"严格模式下保留"},"71.11":{t:"模块代码中保留\r",p:`await

`,l:"JavaScript/第3章-语言基础.html#模块代码中保留",a:"模块代码中保留"},"71.12":{t:"变量\r",p:"ECMAScript 中有 3 个关键字可以声明变量：var、const 和let。其中var在 ECMAScript 的所有版本中都可以使用，而const和let只能在 ECMAScript 6 及 ...",l:"JavaScript/第3章-语言基础.html#变量",a:"变量"},"71.13":{t:"var 关键字\r",p:`要定义变量，可以使用 var 操作符（注意var是一个关键字），后跟变量名（即标识符）
var message
var message = 'hi'
message = 'hi' // 合法，但不推荐 ...`,l:"JavaScript/第3章-语言基础.html#var-关键字",a:"var-关键字"},"71.14":{t:"var 声明作用域\r",p:`使用var操作符定义的变量会成为包含它的函数的局部变量。比如，使用var在一个函数内部定义了一个变量，就意味着该变量将在函数退出时被销毁
function test() {
  var message ...`,l:"JavaScript/第3章-语言基础.html#var-声明作用域",a:"var-声明作用域"},"71.15":{t:"var 声明提升\r",p:`使用var时，下面的代码不会报错。这是因为使用了这个关键字声明的变量会自动提升到函数的作用域顶部：
function foo() {
  console.log(age)
  var age = 26 ...`,l:"JavaScript/第3章-语言基础.html#var-声明提升",a:"var-声明提升"},"71.16":{t:"let 声明\r",p:`let和var的作用差不多，但是有着非常重要的区别。最明显的区别就是，let声明的范围是块作用域，而var声明的范围是函数作用域。
if (true) {
  var name = 'Matt'
   ...`,l:"JavaScript/第3章-语言基础.html#let-声明",a:"let-声明"},"71.17":{t:"1. 暂时性死区\r",p:`let与var的另一个重要区别，就是let声明的变量不会在作用域中被提升。
// name 会被提升
console.log(name) // undefined
var name = 'Matt'
 ...`,l:"JavaScript/第3章-语言基础.html#_1-暂时性死区",a:"_1-暂时性死区"},"71.18":{t:"2. 全局声明\r",p:`与var关键字不同，使用 let在全局作用域中声明的变量不会成为 window 对象的属性(var 声明的变量则会)
var name = 'Matt'
console.log(window.name ...`,l:"JavaScript/第3章-语言基础.html#_2-全局声明",a:"_2-全局声明"},"71.19":{t:"3. 条件声明\r",p:`因为 let是块级作用域，所以不可能检查前面是否声明过同名变量，同时也就不可能在没有声明的情况下去声明它，因此不能依赖条件声明模式
`,l:"JavaScript/第3章-语言基础.html#_3-条件声明",a:"_3-条件声明"},"71.20":{t:"for 循环中的 let\r",p:`在let出现之前，for循环定义的迭代变量会渗透到循环体外部。改用let之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部
for (var i = 0; i &lt; 5; ++ ...`,l:"JavaScript/第3章-语言基础.html#for-循环中的-let",a:"for-循环中的-let"},"71.21":{t:"const 声明\r",p:`const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误
const age = 26
age = 36 // Typ ...`,l:"JavaScript/第3章-语言基础.html#const-声明",a:"const-声明"},"71.22":{t:"声明风格及最佳实践\r",p:`
不使用 var
const 优先，let 次之

`,l:"JavaScript/第3章-语言基础.html#声明风格及最佳实践",a:"声明风格及最佳实践"},"71.23":{t:"数据类型\r",p:`ECMAScript 有两大数据类型
基本数据类型(原始数据类型)：Undefined、Null、Boolean、Number、String、Symbol
复杂数据类型：Object
`,l:"JavaScript/第3章-语言基础.html#数据类型",a:"数据类型"},"71.24":{t:"typeof 操作符\r",p:`因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof 操作符就是为此而生的。对一个值使用 typeof 会返回下列字符串之一：

&quot;unde ...`,l:"JavaScript/第3章-语言基础.html#typeof-操作符",a:"typeof-操作符"},"71.25":{t:"Undefined 类型\r",p:`Undefined 类型只有一个值，就是特殊值undefined。当 var或let声明了变量但没有初始化时，就相当于给变量赋予了undefined值
注意：包含 undefined值的变量跟未定义变 ...`,l:"JavaScript/第3章-语言基础.html#undefined-类型",a:"undefined-类型"},"71.26":{t:"Null 类型\r",p:`Null类型同样只有一个值，即特殊值null。逻辑上讲，null值表示一个空对象指针，这也是给 typeof传一个null会返回&quot;object&quot;的原因。
在定义一个将来要保存对象值 ...`,l:"JavaScript/第3章-语言基础.html#null-类型",a:"null-类型"},"71.27":{t:"Boolean 类型\r",p:`Boolean类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true和false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。
注意：布尔值字面量 ...`,l:"JavaScript/第3章-语言基础.html#boolean-类型",a:"boolean-类型"},"71.28":{t:"布尔值和不同类型之间的转换规则\r",p:`


数据类型
转换为 true 的值
转换为 false 的值




Boolean
true
false


String
非空字符串
&quot;&quot;(空字符串)


Number
非 ...`,l:"JavaScript/第3章-语言基础.html#布尔值和不同类型之间的转换规则",a:"布尔值和不同类型之间的转换规则"},"71.29":{t:"Number 类型\r",p:`Number类型使用 IEEE 754格式表示正式和浮点数(在某些语言中也叫双精度值)、不同的数值类型相应地也有不同的数值字面量格式。
`,l:"JavaScript/第3章-语言基础.html#number-类型",a:"number-类型"},"71.30":{t:"数值字面量格式\r",p:`十进制： 直接写出来即可
八进制： 对于八进制字面量，第一个数字必须是零(0)，然后是相应的八进制数字(0-7)。如果字面量中包含的数字超出了应有的范围，就回忽略前缀的 0，后面的数字被当做十进制
十 ...`,l:"JavaScript/第3章-语言基础.html#数值字面量格式",a:"数值字面量格式"},"71.31":{t:"浮点值\r",p:`要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。
let floatNumber1 = 1.1
let floatNumber2 = 0 ...`,l:"JavaScript/第3章-语言基础.html#浮点值",a:"浮点值"},"71.32":{t:"值的范围\r",p:"ECMAScript可以保存的最小数值保存在Number.MIN_VALUE中，这个值多数浏览器是5e-324，可以保存的最小数值保存在Number.MAX_VALUE中，这个值多数浏览器是1.797 ...",l:"JavaScript/第3章-语言基础.html#值的范围",a:"值的范围"},"71.33":{t:"NaN\r",p:"有一个特殊的值叫&quot;NaN&quot;，意思是&quot;不是数值&quot;(Not a Number)，用于表示本来要返回数值的操作失败了(而不是抛出错误)。在 ECMAScript 中， ...",l:"JavaScript/第3章-语言基础.html#nan",a:"nan"},"71.34":{t:"数值转换\r",p:`有 3 个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转化为数值。
Numb ...`,l:"JavaScript/第3章-语言基础.html#数值转换",a:"数值转换"},"71.35":{t:"String 类型\r",p:"String(字符串)数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号(&quot;)、单引号(')或反引号(`)标示。必须成对出现，否则会导致语法错误。\n",l:"JavaScript/第3章-语言基础.html#string-类型",a:"string-类型"},"71.36":{t:"字符字面量\r",p:`字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符



字面量
含义




\\n
换行


\\t
制表


\\b
退格


\\r
回车


\\f
换页


\\\\
反斜杠()

 ...`,l:"JavaScript/第3章-语言基础.html#字符字面量",a:"字符字面量"},"71.37":{t:"字符串的特点\r",p:`字符串是不可变的，意思就是一旦创建，他们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量。
`,l:"JavaScript/第3章-语言基础.html#字符串的特点",a:"字符串的特点"},"71.38":{t:"转换为字符串\r",p:`有两种方式将一个值转换为字符串。一个是toString()，一个是直接在后面加空串&quot;&quot;
数值调用toString()时，可以传入一个参数作为底数，默认情况下返回的是十进制
`,l:"JavaScript/第3章-语言基础.html#转换为字符串",a:"转换为字符串"},"71.39":{t:"模板字面量\r",p:`ECMAScript 6新增了模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以夸行定义字符串。
let str = \`first line
second line\`
 ...`,l:"JavaScript/第3章-语言基础.html#模板字面量",a:"模板字面量"},"71.40":{t:"字符串插值\r",p:"模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个 值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的 是字符串 ...",l:"JavaScript/第3章-语言基础.html#字符串插值",a:"字符串插值"},"71.41":{t:"模板字面量标签函数\r",p:`模板字面量也支持定义标签函数(tag function)，而通过标签函数可以自定义插值行为。标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。
标签函数本身是一个常规函数，通过前缀到模板 ...`,l:"JavaScript/第3章-语言基础.html#模板字面量标签函数",a:"模板字面量标签函数"},"71.42":{t:"原始字符串\r",p:`使用模板字面量也可以直接获取原始的模板字面量内容(如换行符或 Unicode 字符)，而不是被转 换后的字符表示。为此，可以使用默认的 String.raw 标签函数:
`,l:"JavaScript/第3章-语言基础.html#原始字符串",a:"原始字符串"},"71.43":{t:"Symbol 类型\r",p:`Symbol(符号)是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的风险。
`,l:"JavaScript/第3章-语言基础.html#symbol-类型",a:"symbol-类型"},"71.44":{t:"符号的基本使用\r",p:`符号需要使用Symbol()函数初始化，因为符号本身是基本类型，所以typeof操作符对符号返回symbol
let symbol = Symbol()

注意： Symbol()函数不能与 new  ...`,l:"JavaScript/第3章-语言基础.html#符号的基本使用",a:"符号的基本使用"},"71.45":{t:"使用全局符号注册表\r",p:`如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。
Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全 ...`,l:"JavaScript/第3章-语言基础.html#使用全局符号注册表",a:"使用全局符号注册表"},"71.46":{t:"使用符号作为属性\r",p:"凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和 Object.defineProperty()/Object.defineProperties()定义的属性。对象字 ...",l:"JavaScript/第3章-语言基础.html#使用符号作为属性",a:"使用符号作为属性"},"71.47":{t:"常用内置符号\r",p:"ECMAScript 6 也引入了一批常用内置符号(well-known symbol)，用于暴露语言内部行为，开发者 可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串 ...",l:"JavaScript/第3章-语言基础.html#常用内置符号",a:"常用内置符号"},"71.48":{t:"Symbol.asyncIterator\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-asynciterator",a:"symbol-asynciterator"},"71.49":{t:"Symbol.hasInstance\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-hasinstance",a:"symbol-hasinstance"},"71.50":{t:"Symbol.isConcatSpreadable\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-isconcatspreadable",a:"symbol-isconcatspreadable"},"71.51":{t:"Symbol.iterator\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-iterator",a:"symbol-iterator"},"71.52":{t:"Symbol.match\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-match",a:"symbol-match"},"71.53":{t:"Symbol.replace\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-replace",a:"symbol-replace"},"71.54":{t:"Symbol.search\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-search",a:"symbol-search"},"71.55":{t:"Symbol.species\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-species",a:"symbol-species"},"71.56":{t:"Symbol.split\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-split",a:"symbol-split"},"71.57":{t:"Symbol.toPrimitive\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-toprimitive",a:"symbol-toprimitive"},"71.58":{t:"Symbol.toStringTag\r",p:"\r",l:"JavaScript/第3章-语言基础.html#symbol-tostringtag",a:"symbol-tostringtag"},"71.59":{t:"Symbol.unscopables\r",p:`80 页
`,l:"JavaScript/第3章-语言基础.html#symbol-unscopables",a:"symbol-unscopables"},"71.60":{t:"Object 类型\r",p:`每个 Object 实例都有如下属性和方法：

constructor：用于创建当前对象的函数。
hasOwnProperty(propertyName)：用于判断当前对象实例(不是原型)上是否存在给 ...`,l:"JavaScript/第3章-语言基础.html#object-类型",a:"object-类型"},"71.61":{t:"操作符\r",p:"\r",l:"JavaScript/第3章-语言基础.html#操作符",a:"操作符"},"71.62":{t:"一元操作符\r",p:`只操作一个值的操作符叫一元操作符(unary operator)。一元操作符是 ECMAScript 中最简单的操作符。
`,l:"JavaScript/第3章-语言基础.html#一元操作符",a:"一元操作符"},"71.63":{t:"递增/递减操作符\r",p:`递增和递减操作符有两个版本：前缀版和后缀版。
两个版本的区别是后缀版的递增和递减在语句被求值后才发生。
这 2 对操作符可以用作于任何值，意思就是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。 ...`,l:"JavaScript/第3章-语言基础.html#递增-递减操作符",a:"递增-递减操作符"},"71.64":{t:"一元加和减\r",p:`一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号(+)表示，放在变量前头，对数值没有任何影响。
一元减由一个减号(-)表示，放在变 ...`,l:"JavaScript/第3章-语言基础.html#一元加和减",a:"一元加和减"},"71.65":{t:"位操作符\r",p:`正值以真正的二进制格式存储，即 31 位中的每一位都代表 2 的幂。第一位(称为第 0 位)表示 20，第二位表示 21，依此类推。
负值以一种称为二补数(或补码)的二进制编码存储。一个数值的二补数通 ...`,l:"JavaScript/第3章-语言基础.html#位操作符",a:"位操作符"},"71.66":{t:"按位非\r",p:`按位非操作符用波浪符(~)表示，它的作用是返回数值的一补数。
let num1 = 25 // 二进制00000000000000000000000000011001
let num2 = ~num1 ...`,l:"JavaScript/第3章-语言基础.html#按位非",a:"按位非"},"71.67":{t:"按位与\r",p:`按位与操作符用和号(&amp;)表示，有两个操作数。本质上，按位与就是将两个数的每一个位对齐， 然后基于真值表中的规则，对每一位执行相应的与操作。



第一个数值的位
第二个数值的位
结果




 ...`,l:"JavaScript/第3章-语言基础.html#按位与",a:"按位与"},"71.68":{t:"按位或\r",p:`按位或操作符用管道符(|)表示，同样有两个操作数。按位或遵循如下真值表:



第一个数值的位
第二个数值的位
结果




1
1
1


1
0



0
1
1


0
0
0



按位异或
 ...`,l:"JavaScript/第3章-语言基础.html#按位或",a:"按位或"},"71.69":{t:"左移\r",p:`左移操作符用两个小于号(&lt;&lt;)表示，会按照指定的位数将数值的所有位向左移动。
`,l:"JavaScript/第3章-语言基础.html#左移",a:"左移"},"71.70":{t:"有符号右移\r",p:`有符号右移由两个大于号(&gt;&gt;)表示，会将数值的所有 32 位都向右移，同时保留符号(正或负)。 有符号右移实际上是左移的逆运算。
`,l:"JavaScript/第3章-语言基础.html#有符号右移",a:"有符号右移"},"71.71":{t:"无符号右移\r",p:`无符号右移用 3 个大于号表示(&gt;&gt;&gt;)，会将数值的所有 32 位都向右移。对于正数，无符号右移与 有符号右移结果相同。
对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会 ...`,l:"JavaScript/第3章-语言基础.html#无符号右移",a:"无符号右移"},"71.72":{t:"布尔操作符\r",p:"\r",l:"JavaScript/第3章-语言基础.html#布尔操作符",a:"布尔操作符"},"71.73":{t:"逻辑非\r",p:`逻辑非操作符由一个叹号(!)表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布 尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。
逻辑非操作 ...`,l:"JavaScript/第3章-语言基础.html#逻辑非",a:"逻辑非"},"71.74":{t:"逻辑与\r",p:`逻辑与操作符由两个和号(&amp;&amp;)表示，应用到两个值。
逻辑与操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
 ...`,l:"JavaScript/第3章-语言基础.html#逻辑与",a:"逻辑与"},"71.75":{t:"逻辑或\r",p:`逻辑或操作符由两个管道符(||)表示
逻辑或操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
true


false
tr ...`,l:"JavaScript/第3章-语言基础.html#逻辑或",a:"逻辑或"},"71.76":{t:"乘性操作符\r",p:`ECMAScript 定义了 3 个乘性操作符:乘法、除法和取模
`,l:"JavaScript/第3章-语言基础.html#乘性操作符",a:"乘性操作符"},"71.77":{t:"乘法操作符\r",p:`乘法操作符由一个星号(*)表示，可以用于计算两个数值的乘积。
特殊值处理
1. 如果操作数都是数值，则执行常规的乘法运算，即两个正值相乘是正值，两个负值相乘也是正值，正负符号不同的值相乘得到负值。如果 ...`,l:"JavaScript/第3章-语言基础.html#乘法操作符",a:"乘法操作符"},"71.78":{t:"除法运算符\r",p:`除法操作符由一个斜杠(/)表示，可以用于计算第一个操作数除以第二个操作数的商
特殊值处理
1. 如果操作数都是数值，则执行常规的除法运算，即两个正值相除是正值，两个负值相除也是正值，符号不同的值相除得 ...`,l:"JavaScript/第3章-语言基础.html#除法运算符",a:"除法运算符"},"71.79":{t:"取模运算符\r",p:`取模(余数)操作符由一个百分比符号(%)表示
特殊值处理

如果操作数是数值，则执行常规除法运算，返回余数。
如果被除数是无限值，除数是有限值，则返回 NaN。
如果被除数是有限值，除数是 0，则返回 ...`,l:"JavaScript/第3章-语言基础.html#取模运算符",a:"取模运算符"},"71.80":{t:"指数操作符\r",p:`ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**
不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作
let square ...`,l:"JavaScript/第3章-语言基础.html#指数操作符",a:"指数操作符"},"71.81":{t:"加性操作符\r",p:`加性操作符，即加法和减法操作符
`,l:"JavaScript/第3章-语言基础.html#加性操作符",a:"加性操作符"},"71.82":{t:"加法操作符\r",p:`加法操作符(+)用于求两个数的和
两个操作数都是数值执行规则

如果有任一操作数是 NaN，则返回 NaN;
如果是 Infinity 加 Infinity，则返回 Infinity;
如果是-Inf ...`,l:"JavaScript/第3章-语言基础.html#加法操作符",a:"加法操作符"},"71.83":{t:"减法操作符\r",p:`减法操作符(-)也是使用很频繁的一种操作符。
计算规则

如果两个操作数都是数值，则执行数学减法运算并返回结果。
如果有任一操作数是 NaN，则返回 NaN。
如果是 Infinity 减 Infin ...`,l:"JavaScript/第3章-语言基础.html#减法操作符",a:"减法操作符"},"71.84":{t:"关系操作符\r",p:`关系操作符执行比较两个值的操作，包括小于(&lt;)、大于(&gt;)、小于等于(&lt;=)和大于等于(&gt;=)
执行规则

如果操作数都是数值，则执行数值比较。
如果操作数都是字符串，则逐个比 ...`,l:"JavaScript/第3章-语言基础.html#关系操作符",a:"关系操作符"},"71.85":{t:"相等操作符\r",p:`第一组是等于和不等于，它们在比较之前执行转换。第二组是全等和不全等，它们在比较之前不执行转换
`,l:"JavaScript/第3章-语言基础.html#相等操作符",a:"相等操作符"},"71.86":{t:"等于和不等于\r",p:"ECMAScript 中的等于操作符用两个等于号(==)表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号(!=)表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进 ...",l:"JavaScript/第3章-语言基础.html#等于和不等于",a:"等于和不等于"},"71.87":{t:"全等和不全等\r",p:`全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号(===)表示，只有两个操作数在不转换的前提下相等才返回 true
不全等操作符用一个叹号和两 ...`,l:"JavaScript/第3章-语言基础.html#全等和不全等",a:"全等和不全等"},"71.88":{t:"条件操作符\r",p:` variable = boolean_expression ? true_value : false_value;

上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expressi ...`,l:"JavaScript/第3章-语言基础.html#条件操作符",a:"条件操作符"},"71.89":{t:"赋值操作符\r",p:`简单赋值用等于号(=)表示，将右手边的值赋给左手边的变量
复合赋值操作符

乘后赋值(*=)
除后赋值(/=)
取模后赋值(%=)
加后赋值(+=)
减后赋值(-=)
左移后赋值(&lt;&lt;=) ...`,l:"JavaScript/第3章-语言基础.html#赋值操作符",a:"赋值操作符"},"71.90":{t:"逗号操作符\r",p:`逗号操作符可以用来在一条语句中执行多个操作，如下所示:
let num1 = 1,
  num2 = 2,
  num3 = 3

也可以使用逗号操作符来辅助 赋值。在赋值时使用逗号操作符分隔值，最终 ...`,l:"JavaScript/第3章-语言基础.html#逗号操作符",a:"逗号操作符"},"71.91":{t:"语句(后续整理)\r",p:`P98
`,l:"JavaScript/第3章-语言基础.html#语句-后续整理",a:"语句-后续整理"},"72.0":{t:"扩展路由的Meta\r",p:`

项目根目录下创建 typing.d.ts 文件


加入以下内容
import 'vue-router'

declare module 'vue-router' {
  interface Ro ...`,l:"Vue+TS/TS 扩展路由meta.html",a:"扩展路由的meta"},"73.0":{t:"DOM 传送门\r",p:"\r",l:"vue-challenge/Components.html",a:"dom-传送门"},"73.1":{t:"题目\r",p:`Vue.js提供了一个内置组件，将其插槽内容渲染到另一个DOM，成为该DOM的一部分


&lt;template&gt;
  &lt;!-- 将以下元素渲染成\`body\`的子元素 --&gt;
   ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"73.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;!-- 将以下元素渲染成\`body\`的子元素 --&gt;
  &lt;teleport to=&quot;body&quot;&gt;
    &l ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"73.3":{t:"解答\r",p:`使用 teleport 将内容渲染到 body 的子元素中
`,l:"vue-challenge/Components.html#解答",a:"解答"},"73.4":{t:"Props 验证\r",p:"\r",l:"vue-challenge/Components.html#props-验证",a:"props-验证"},"73.5":{t:"题目\r",p:`请验证Button组件的Prop类型 ，使它只接收: primary | ghost | dashed | link | text | default ，且默认值为default。


&lt;tem ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"73.6":{t:"答案\r",p:`

&lt;template&gt;
  &lt;button&gt;Button&lt;/button&gt;
&lt;/template&gt;

`,l:"vue-challenge/Components.html#答案",a:"答案"},"73.7":{t:"解答\r",p:`自定义类型校验validator函数可以返回特定的枚举类型
`,l:"vue-challenge/Components.html#解答",a:"解答"},"73.8":{t:"函数式组件\r",p:"\r",l:"vue-challenge/Components.html#函数式组件",a:"函数式组件"},"73.9":{t:"题目\r",p:`

&lt;template&gt;
  &lt;list-component
    :list=&quot;list&quot;
    :active-index=&quot;activeInd ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"73.10":{t:"答案\r",p:`

&lt;template&gt;
  &lt;list-component :list=&quot;list&quot; :active-index=&quot;activeIndex&quot; ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"73.11":{t:"渲染函数[h()]\r",p:"\r",l:"vue-challenge/Components.html#渲染函数-h",a:"渲染函数-h"},"73.12":{t:"题目\r",p:`在这个挑战中，你需要使用h渲染函数来实现一个组件。
请注意: 你应该确保参数被正确传递、事件被正常触发和插槽内容正常渲染。让我们开始吧。

&lt;template&gt;
  &lt;MyButto ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"73.13":{t:"答案\r",p:`import { defineComponent, h } from 'vue'

export default defineComponent({
  name: 'MyButton',
  ren ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"73.14":{t:"树组件 \r",p:"\r",l:"vue-challenge/Components.html#树组件",a:"树组件"},"73.15":{t:"题目\r",p:`在这个挑战中，你需要实现一个树组件，让我们开始吧。


&lt;template&gt;
  &lt;!-- do something.... --&gt;
&lt;/template&gt;


`,l:"vue-challenge/Components.html#题目",a:"题目"},"73.16":{t:"答案\r",p:`

&lt;template&gt;
  &lt;ul v-for=&quot;item in data&quot;&gt;
    &lt;li&gt;
      {{ item.title }} ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"74.0":{t:"切换器\r",p:"\r",l:"vue-challenge/Composable Function.html",a:"切换器"},"74.1":{t:"题目\r",p:`

&lt;template&gt;
  &lt;p&gt;State: {{ state ? 'ON' : 'OFF' }}&lt;/p&gt;
  &lt;p @click=&quot;toggl ...`,l:"vue-challenge/Composable Function.html#题目",a:"题目"},"74.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;p&gt;State: {{ state ? 'ON' : 'OFF' }}&lt;/p&gt;
  &lt;p @click=&quot;toggl ...`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"74.3":{t:"计数器\r",p:"\r",l:"vue-challenge/Composable Function.html#计数器",a:"计数器"},"74.4":{t:"题目\r",p:`


`,l:"vue-challenge/Composable Function.html#题目",a:"题目"},"74.5":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Count: {{ count }}&lt;/p&gt;
    &lt;button @click=&qu ...`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"74.6":{t:"实现本地存储函数\r",p:"\r",l:"vue-challenge/Composable Function.html#实现本地存储函数",a:"实现本地存储函数"},"74.7":{t:"题目\r",p:`

`,l:"vue-challenge/Composable Function.html#题目",a:"题目"},"74.8":{t:"答案\r",p:`





`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"74.9":{t:"鼠标坐标\r",p:`

&lt;template&gt;Mouse position is at: {{ x }}, {{ y }}&lt;/template&gt;

`,l:"vue-challenge/Composable Function.html#鼠标坐标",a:"鼠标坐标"},"74.10":{t:"答案\r",p:`

&lt;template&gt;Mouse position is at: {{ x }}, {{ y }}&lt;/template&gt;


`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"75.0":{t:"生命周期钩子\r",p:"\r",l:"vue-challenge/Composition API.html",a:"生命周期钩子"},"75.1":{t:"题目\r",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      Child Component: {{ count }}
     ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.2":{t:"答案\r",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Child Component: {{ count }}&lt;/p&gt;
  ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.3":{t:"ref 全家桶\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;msg&lt;/h1&gt;
    &lt;p&gt;
      &lt;span @click=&q ...`,l:"vue-challenge/Composition API.html#ref-全家桶",a:"ref-全家桶"},"75.4":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;msg&lt;/h1&gt;
    &lt;p&gt;
      &lt;span @click=&q ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.5":{t:"响应性丢失\r",p:"\r",l:"vue-challenge/Composition API.html#响应性丢失",a:"响应性丢失"},"75.6":{t:"题目\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      &lt;span @click=&quot;update(count-1)&quot;&gt; ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.7":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      &lt;span @click=&quot;update(count - 1)&quot;&g ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.8":{t:"可写的计算属性\r",p:"\r",l:"vue-challenge/Composition API.html#可写的计算属性",a:"可写的计算属性"},"75.9":{t:"题目\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;{{ count }}&lt;/p&gt;
    &lt;p&gt;{{ plusOne }}&lt;/p ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.10":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;{{ count }}&lt;/p&gt;
    &lt;p&gt;{{ plusOne }}&lt;/p ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.11":{t:"watch 全家桶\r",p:"\r",l:"vue-challenge/Composition API.html#watch-全家桶",a:"watch-全家桶"},"75.12":{t:"题目\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ count }}
    &lt;/p&gt;
    &lt;p ref=&quot; ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.13":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ count }}
    &lt;/p&gt;
    &lt;p ref=&quot; ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.14":{t:"解释\r",p:`

immediate：在侦听器创建时立即触发回调。第一次调用时旧值是 undefined。


deep：如果源是对象，强制深度遍历，以便在深层级变更时触发回调。参考深层侦听器。


flush：调 ...`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"75.15":{t:"浅层 ref\r",p:"\r",l:"vue-challenge/Composition API.html#浅层-ref",a:"浅层-ref"},"75.16":{t:"题目\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ state.count }}
    &lt;/p&gt;
  &lt;/div&gt; ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.17":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ state.count }}
    &lt;/p&gt;
  &lt;/div&gt; ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.18":{t:"解释\r",p:`triggerRef：强制触发依赖于一个浅层 ref 的副作用，这通常在对浅引用的内部值进行深度变更后使用
`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"75.19":{t:"依赖注入\r",p:"\r",l:"vue-challenge/Composition API.html#依赖注入",a:"依赖注入"},"75.20":{t:"题目\r",p:`在这个挑战中，你将使用 组合式 API: 依赖注入 来完成它。 以下是你要实现的内容 👇:
// Child.vue 



&lt;template&gt;
  {{ count }}
&lt;/ ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.21":{t:"答案\r",p:`// App.vue


&lt;template&gt;
  &lt;Child /&gt;
&lt;/template&gt;

//Child.vue


&lt;template&gt;
 输 ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.22":{t:"Effect 作用域 API\r",p:"\r",l:"vue-challenge/Composition API.html#effect-作用域-api",a:"effect-作用域-api"},"75.23":{t:"题目\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ doubled }}
    &lt;/p&gt;
  &lt;/div&gt;
&lt ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.24":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ doubled }}
    &lt;/p&gt;
  &lt;/div&gt;
&lt ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.25":{t:"解释\r",p:`effectScope.run(fn:Function),调用 stop 可以停止监听
`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"75.26":{t:"自定义 Ref\r",p:"\r",l:"vue-challenge/Composition API.html#自定义-ref",a:"自定义-ref"},"75.27":{t:"题目\r",p:`

&lt;template&gt;
  &lt;input v-model=&quot;text&quot; /&gt;
&lt;/template&gt;

`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"75.28":{t:"答案\r",p:`

&lt;template&gt;
  &lt;input v-model=&quot;text&quot; /&gt;
&lt;/template&gt;

`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"75.29":{t:"解释\r",p:`customRef语法
return customRef((track, trigger) =&gt; {
    return {
      get() {
        track()
    ...`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"76.0":{t:"动态 CSS\r",p:"\r",l:"vue-challenge/CSS Features.html",a:"动态-css"},"76.1":{t:"题目\r",p:`Vue单文件组件 \`


`,l:"vue-challenge/CSS Features.html#题目",a:"题目"},"76.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;p&gt;hello&lt;/p&gt;
&lt;/template&gt;



`,l:"vue-challenge/CSS Features.html#答案",a:"答案"},"76.3":{t:"解答\r",p:`在 css 中使用v-bind可以将 CSS 的值链接到动态的组件状态
`,l:"vue-challenge/CSS Features.html#解答",a:"解答"},"76.4":{t:"全局 CSS\r",p:"\r",l:"vue-challenge/CSS Features.html#全局-css",a:"全局-css"},"76.5":{t:"题目\r",p:`有些时候，我们想在具有CSS作用域的Vue单文件组件设置全局CSS样式， 该怎么设置呢 ? 让我们开始吧 👇:
&lt;template&gt;
  &lt;p&gt;Hello Vue.js&lt ...`,l:"vue-challenge/CSS Features.html#题目",a:"题目"},"76.6":{t:"答案\r",p:`&lt;template&gt;
  &lt;p&gt;Hello Vue.js&lt;/p&gt;
&lt;/template&gt;




&lt;template&gt;
  &lt;p&gt ...`,l:"vue-challenge/CSS Features.html#答案",a:"答案"},"76.7":{t:"解答\r",p:`:global 可以把对应的 css 转化为全局作用域，:local 可以将对应的 css 转换为局部作用域。
去掉 style 标签中的 scoped 也可以将其内的 css 转化成全局作用域
`,l:"vue-challenge/CSS Features.html#解答",a:"解答"},"77.0":{t:"大写\r",p:"\r",l:"vue-challenge/Directives.html",a:"大写"},"77.1":{t:"题目\r",p:`

&lt;template&gt;
  &lt;input type=&quot;text&quot; v-model.capitalize=&quot;&quot; /&gt;
&lt;/temp ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"77.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;input type=&quot;text&quot; v-model.capitalize=&quot;iptText&quot; /&gt;
&l ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"77.3":{t:"优化性能的指令\r",p:"\r",l:"vue-challenge/Directives.html#优化性能的指令",a:"优化性能的指令"},"77.4":{t:"题目\r",p:`Vue.js 提供了一个指令，以便只渲染一次元素和组件，并且跳过以后的更新。


&lt;template&gt;
  &lt;span&gt;使它从不更新: {{ count }}&lt;/span ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"77.5":{t:"答案\r",p:`

&lt;template&gt;
  &lt;span v-once&gt;使它从不更新: {{ count }}&lt;/span&gt;
&lt;/template&gt;

`,l:"vue-challenge/Directives.html#答案",a:"答案"},"77.6":{t:"解答\r",p:`v-once: 仅渲染元素和组件一次，并跳过之后的更新。在随后的重新渲染，元素/组件及其所有子项将被当作静态内容并跳过渲染。这可以用来优化更新时的性能。
v-text: 更新元素的文本内容。
v-ht ...`,l:"vue-challenge/Directives.html#解答",a:"解答"},"77.7":{t:"切换焦点的指令\r",p:"\r",l:"vue-challenge/Directives.html#切换焦点的指令",a:"切换焦点的指令"},"77.8":{t:"题目\r",p:`

&lt;template&gt;
  &lt;input v-focus=&quot;state&quot; type=&quot;text&quot;&gt;
&lt;/template&gt; ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"77.9":{t:"答案\r",p:`

&lt;template&gt;
  &lt;input v-focus=&quot;state&quot; type=&quot;text&quot; /&gt;
&lt;/template&g ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"77.10":{t:"防抖点击指令\r",p:"\r",l:"vue-challenge/Directives.html#防抖点击指令",a:"防抖点击指令"},"77.11":{t:"题目\r",p:`

&lt;template&gt;
  &lt;button v-debounce-click:200=&quot;onClick&quot;&gt;
    Click on it many ti ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"77.12":{t:"答案\r",p:`

&lt;template&gt;
  &lt;button v-debounce-click:200=&quot;onClick&quot;&gt;Click on it many times q ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"77.13":{t:"激活的样式-指令\r",p:"\r",l:"vue-challenge/Directives.html#激活的样式-指令",a:"激活的样式-指令"},"77.14":{t:"题目\r",p:`

&lt;template&gt;
  &lt;ul&gt;
    &lt;li
      v-for=&quot;(item, index) in list&quot;
      :key= ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"77.15":{t:"答案\r",p:`

&lt;template&gt;
  &lt;ul&gt;
    &lt;li
      v-for=&quot;(item, index) in list&quot;
      :key= ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"77.16":{t:"实现简易的`v-model`指令\r",p:"\r",l:"vue-challenge/Directives.html#实现简易的-v-model-指令",a:"实现简易的-v-model-指令"},"77.17":{t:"题目\r",p:`

&lt;template&gt;
  &lt;input v-oh-model=&quot;value&quot; type=&quot;text&quot; /&gt;
&lt;/templat ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"77.18":{t:"答案\r",p:`

&lt;template&gt;
  &lt;input v-oh-model=&quot;vatltexue&quot; type=&quot;text&quot; /&gt;
&lt;/tem ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"78.0":{t:"阻止冒泡事件\r",p:"\r",l:"vue-challenge/Event Handling.html",a:"阻止冒泡事件"},"78.1":{t:"题目\r",p:`在这个挑战中，你需要阻止点击事件的冒泡，让我们开始吧。


&lt;template&gt;
  &lt;div @click=&quot;click1()&quot;&gt;
   &lt;div  ...`,l:"vue-challenge/Event Handling.html#题目",a:"题目"},"78.2":{t:"答案\r",p:`
stop 修饰符



&lt;template&gt;
  &lt;div @click=&quot;click1&quot;&gt;
    &lt;div @click.stop=&quot; ...`,l:"vue-challenge/Event Handling.html#答案",a:"答案"},"78.3":{t:"按键修饰符\r",p:"\r",l:"vue-challenge/Event Handling.html#按键修饰符",a:"按键修饰符"},"78.4":{t:"题目\r",p:"在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许为 v-on 或者 @ 在监听键盘事件时添加按键修饰符：，例如：\n&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.su ...",l:"vue-challenge/Event Handling.html#题目",a:"题目"},"78.5":{t:"答案\r",p:`&lt;template&gt;
  &lt;!-- 添加按键修饰符让即使 Alt 或 Shift 被一同按下时也会触发 --&gt;
  &lt;button @click.alt.shift=&q ...`,l:"vue-challenge/Event Handling.html#答案",a:"答案"},"79.0":{t:"下一次 DOM 更新\r",p:"\r",l:"vue-challenge/Global APT General.html",a:"下一次-dom-更新"},"79.1":{t:"题目\r",p:`

&lt;template&gt;
  &lt;button id=&quot;counter&quot; @click=&quot;increment&quot;&gt;
    {{ count ...`,l:"vue-challenge/Global APT General.html#题目",a:"题目"},"79.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;button id=&quot;counter&quot; @click=&quot;increment&quot;&gt;
    {{ count ...`,l:"vue-challenge/Global APT General.html#答案",a:"答案"},"80.0":{t:"生命周期钩子\r",p:"\r",l:"vue-challenge/LifeCycle.html",a:"生命周期钩子"},"80.1":{t:"题目\r",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      Child Component: {{ count }}
     ...`,l:"vue-challenge/LifeCycle.html#题目",a:"题目"},"80.2":{t:"答案\r",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Child Component: {{ count }}&lt;/p&gt;
  ...`,l:"vue-challenge/LifeCycle.html#答案",a:"答案"},"81.0":{t:"原始值 API\r",p:"\r",l:"vue-challenge/Reactivity Advanced.html",a:"原始值-api"},"81.1":{t:"题目\r",p:`在这个挑战中，你将使用 响应式 API: [xx]Raw 来完成它。 以下是你要实现的内容 👇:


&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
    ...`,l:"vue-challenge/Reactivity Advanced.html#题目",a:"题目"},"81.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ reactiveState.count }}
    &lt;/p&gt;
  &lt; ...`,l:"vue-challenge/Reactivity Advanced.html#答案",a:"答案"},"81.3":{t:"解释\r",p:`toRaw(reactiveObj):根据一个 Vue 创建的代理返回其原始对象
`,l:"vue-challenge/Reactivity Advanced.html#解释",a:"解释"},"82.0":{t:"Until\r",p:"\r",l:"vue-challenge/Unility Function.html",a:"until"},"82.1":{t:"题目\r",p:`有些时候，我们需要依赖于异步的返回结果做一些后续处理，until函数在这种场景下非常有用，你能实现它吗 ? 让我们来试试吧 👇:


`,l:"vue-challenge/Unility Function.html#题目",a:"题目"},"82.2":{t:"答案\r",p:`

&lt;template&gt;
  &lt;p @click=&quot;increase&quot;&gt;Increase&lt;/p&gt;
&lt;/template&gt;


`,l:"vue-challenge/Unility Function.html#答案",a:"答案"},"83.0":{t:"自定义元素\r",p:"\r",l:"vue-challenge/Web Component.html",a:"自定义元素"},"83.1":{t:"题目\r",p:`

&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

`,l:"vue-challenge/Web Component.html#题目",a:"题目"},"84.0":{t:"Pinia 缓存持久化\r",p:"\r",l:"Vue插件/Pinia 缓存持久化.html",a:"pinia-缓存持久化"},"84.1":{t:"一、安装pinia-plugin-persistedstate\r",p:`
pnpm : pnpm i pinia-plugin-persistedstate
npm : npm i pinia-plugin-persistedstate
yarn : yarn add p ...`,l:"Vue插件/Pinia 缓存持久化.html#一、安装pinia-plugin-persistedstate",a:"一、安装pinia-plugin-persistedstate"},"84.2":{t:"二、在 main.ts 中添加\r",p:`import { createPinia } from 'pinia'
import piniaPluginPersistedstate from 'pinia-plugin-persistedsta ...`,l:"Vue插件/Pinia 缓存持久化.html#二、在-main-ts-中添加",a:"二、在-main-ts-中添加"},"84.3":{t:"三、在仓库中添加配置项\r",p:`defineStore的第二个参数中配置{persist:true}来开启数据持久化
import { defineStore } from 'pinia'

export const useStor ...`,l:"Vue插件/Pinia 缓存持久化.html#三、在仓库中添加配置项",a:"三、在仓库中添加配置项"},"84.4":{t:"四、配置\r",p:`该插件的默认配置如下:

使用 localStorage 进行存储
store.$id 作为 storage 默认的 key
使用 JSON.stringify/JSON.parse 进行序列化/反序 ...`,l:"Vue插件/Pinia 缓存持久化.html#四、配置",a:"四、配置"},"84.5":{t:"key\r",p:`
类型：string
默认值：store.$id

Key 用于引用 storage 中的数据
import { defineStore } from 'pinia'

export const us ...`,l:"Vue插件/Pinia 缓存持久化.html#key",a:"key"},"84.6":{t:"storage\r",p:`
类型：StorageLike
默认值：localStorage

将数据持久化到 storage 中，必须具有 getItem: (key: string) =&gt; string | null  ...`,l:"Vue插件/Pinia 缓存持久化.html#storage",a:"storage"},"84.7":{t:"paths\r",p:`
类型：string[]
默认值：undefined

用于指定 state 中哪些数据需要被持久化。[] 表示不持久化任何状态，undefined 或 null 表示持久化整个 state。
imp ...`,l:"Vue插件/Pinia 缓存持久化.html#paths",a:"paths"},"84.8":{t:"serializer\r",p:`
类型：Serializer
默认值：JSON.stringify/JSON.parse

该配置能够指定持久化时所使用的序列化方法，以及恢复 Store 时的反序列化方法。另外，必须具有 seria ...`,l:"Vue插件/Pinia 缓存持久化.html#serializer",a:"serializer"},"84.9":{t:"beforeRestore\r",p:`
类型：(context: PiniaPluginContext) =&gt; void
默认值：undefined

该 hook 将在从 storage 中恢复数据之前触发，并且它可以访问整个 P ...`,l:"Vue插件/Pinia 缓存持久化.html#beforerestore",a:"beforerestore"},"84.10":{t:"afterRestore\r",p:`
类型：(context: PiniaPluginContext) =&gt; void
默认值：undefined

该 hook 将在从 storage 中恢复数据之后触发，并且它可以访问整个 P ...`,l:"Vue插件/Pinia 缓存持久化.html#afterrestore",a:"afterrestore"},"84.11":{t:"debug\r",p:`
类型：boolean
默认值：false

当设置为 true 时，持久化/恢复 Store 时可能发生的任何错误都将使用 console.error 输出。
`,l:"Vue插件/Pinia 缓存持久化.html#debug",a:"debug"},"85.0":{t:"批量导入 SVG\r",p:"\r",l:"Vue插件/批量导入svg.html",a:"批量导入-svg"},"85.1":{t:"一-安装插件\r",p:`npm i vite-plugin-svg-icons -D
// 或者
yarn add vite-plugin-svg-icons -D

`,l:"Vue插件/批量导入svg.html#一-安装插件",a:"一-安装插件"},"85.2":{t:"二、在 vite.config.ts中配置\r",p:`iconDirs:iconDirs是保存 svg 图片的文件夹，可以填写多个
&lt;img src=&quot;https://gitee.com/xuchp/typora-pics/raw/mas ...`,l:"Vue插件/批量导入svg.html#二、在-vite-config-ts中配置",a:"二、在-vite-config-ts中配置"},"85.3":{t:"三、封装 svg 组件\r",p:`&lt;template&gt;
  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot;&gt;
    &lt;use  ...`,l:"Vue插件/批量导入svg.html#三、封装-svg-组件",a:"三、封装-svg-组件"},"85.4":{t:"四、配置全局组件并引入插件\r",p:`
import { type App } from 'vue'
import SvgIcon from '@/components/SvgIcon/index.vue' // svg componen ...`,l:"Vue插件/批量导入svg.html#四、配置全局组件并引入插件",a:"四、配置全局组件并引入插件"},"85.5":{t:"五、在 main.ts 中引入\r",p:`import { useSvgIcon } from '@/icons'
useSvgIcon(app)


`,l:"Vue插件/批量导入svg.html#五、在-main-ts-中引入",a:"五、在-main-ts-中引入"},"86.0":{t:"目录\r",p:`
核心语法

setup语法糖



`,l:"vue教程/index.html",a:"目录"},"87.0":{t:"1. Options API 和 Composition API\r",p:`
Vue2 的API设计是Option(配置)风格的。
Vue3 的API设计是Composition(组合)风格的。

`,l:"vue教程/Vue3核心语法/setup语法糖.html",a:"_1-options-api-和-composition-api"},"87.1":{t:"Options API 的弊端\r",p:"Options类型的API，数据、方法、计算属性等，是分散在：data、methods、computed中的，若想新增或者修改一个需求，就需要分别修改data、methods、computed，不便于 ...",l:"vue教程/Vue3核心语法/setup语法糖.html#options-api-的弊端",a:"options-api-的弊端"},"87.2":{t:"2.拉开序幕的 setup\r",p:"\r",l:"vue教程/Vue3核心语法/setup语法糖.html#_2-拉开序幕的-setup",a:"_2-拉开序幕的-setup"},"87.3":{t:"setup 概述\r",p:"setup 是 Vue3 中一个新的配置项 ，值是一个函数，它是 Composition API &quot;表演的舞台&quot;，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在 se ...",l:"vue教程/Vue3核心语法/setup语法糖.html#setup-概述",a:"setup-概述"},"87.4":{t:"3. 【ref 创建：基本类型的响应式数据】\r",p:`
**作用：**定义响应式变量。
语法：let xxx = ref(初始值)。
**返回值：**一个RefImpl的实例对象，简称ref对象或ref，ref对象的value属性是响应式的。
注意点：
 ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_3-【ref-创建-基本类型的响应式数据】",a:"_3-【ref-创建-基本类型的响应式数据】"},"87.5":{t:"4. 【reactive 创建：对象类型的响应式数据】\r",p:`
作用：定义一个响应式对象（基本类型不要用它，要用ref，否则报错）
语法：let 响应式对象= reactive(源对象)。
**返回值：**一个Proxy的实例对象，简称：响应式对象。
注意点：r ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_4-【reactive-创建-对象类型的响应式数据】",a:"_4-【reactive-创建-对象类型的响应式数据】"},"87.6":{t:"5. 【ref 创建：对象类型的响应式数据】\r",p:`
其实ref接收的数据可以是：基本类型、对象类型。
若ref接收的是对象类型，内部其实也是调用了reactive函数。

`,l:"vue教程/Vue3核心语法/setup语法糖.html#_5-【ref-创建-对象类型的响应式数据】",a:"_5-【ref-创建-对象类型的响应式数据】"},"87.7":{t:"6. 【ref 对比 reactive】\r",p:`宏观角度看：



ref用来定义：基本类型数据、对象类型数据；


reactive用来定义：对象类型数据。




区别：




ref创建的变量必须使用.value（可以使用volar插件自动 ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_6-【ref-对比-reactive】",a:"_6-【ref-对比-reactive】"},"87.8":{t:"7. 【toRefs 与 toRef】\r",p:`

作用：将一个响应式对象中的每一个属性，转换为ref对象。


备注：toRefs与toRef功能一致，但toRefs可以批量转换。


语法如下：
&lt;template&gt;
  &lt;d ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_7-【torefs-与-toref】",a:"_7-【torefs-与-toref】"}},n={previewLength:100,buttonLabel:"搜索",placeholder:"请输入关键词",allow:[],ignore:[]},r={INDEX_DATA:t,PREVIEW_LOOKUP:e,Options:n};export{r as default};
