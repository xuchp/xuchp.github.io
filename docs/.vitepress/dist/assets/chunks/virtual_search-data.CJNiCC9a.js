const t={map:'[{"语言基础":["0.0","58.0"],"语法":["0.1","58.1"],"区分大小写":["0.2","58.2"],"标识符":["0.3","58.3"],"注释":["0.4","58.4"],"严格模式":["0.5","58.5"],"关键字和保留字":["0.6","58.6"],"关键字":["0.7","58.7"],"保留字":["0.8","58.8"],"始终保留":["0.9","58.9"],"严格模式下保留":["0.10","58.10"],"模块代码中保留":["0.11","58.11"],"变量":["0.12","58.12"],"var":["0.13","0.14","0.15","58.13","58.14","58.15","67.55"],"let":["0.16","58.16"],"for":["0.20","58.20"],"const":["0.21","58.21"],"声明风格及最佳实践":["0.22","58.22"],"数据类型":["0.23","58.23","62.0"],"typeof":["0.24","58.24"],"undefined":["0.25","58.25"],"null":["0.26","58.26","67.3"],"boolean":["0.27","58.27"],"布尔值和不同类型之间的转换规则":["0.28","58.28"],"number":["0.29","58.29"],"数值字面量格式":["0.30","58.30"],"浮点值":["0.31","58.31"],"值的范围":["0.32","58.32"],"nan":["0.33","58.33"],"数值转换":["0.34","58.34"],"string":["0.35","58.35"],"字符字面量":["0.36","58.36"],"字符串的特点":["0.37","58.37"],"转换为字符串":["0.38","58.38"],"模板字面量":["0.39","58.39"],"字符串插值":["0.40","58.40"],"模板字面量标签函数":["0.41","58.41"],"原始字符串":["0.42","58.42"],"symbol":["0.43","0.48","0.49","0.50","0.51","0.52","0.53","0.54","0.55","0.56","0.57","0.58","0.59","58.43","58.48","58.49","58.50","58.51","58.52","58.53","58.54","58.55","58.56","58.57","58.58","58.59"],"符号的基本使用":["0.44","58.44"],"使用全局符号注册表":["0.45","58.45"],"使用符号作为属性":["0.46","58.46"],"常用内置符号":["0.47","58.47"],"object":["0.60","58.60"],"操作符":["0.61","58.61"],"一元操作符":["0.62","58.62"],"递增":["0.63","58.63"],"一元加和减":["0.64","58.64"],"位操作符":["0.65","58.65"],"按位非":["0.66","58.66"],"按位与":["0.67","58.67"],"按位或":["0.68","58.68"],"左移":["0.69","58.69"],"有符号右移":["0.70","58.70"],"无符号右移":["0.71","58.71"],"布尔操作符":["0.72","58.72"],"逻辑非":["0.73","58.73"],"逻辑与":["0.74","58.74"],"逻辑或":["0.75","58.75"],"乘性操作符":["0.76","58.76"],"乘法操作符":["0.77","58.77"],"除法运算符":["0.78","58.78"],"取模运算符":["0.79","58.79"],"指数操作符":["0.80","58.80"],"加性操作符":["0.81","58.81"],"加法操作符":["0.82","58.82"],"减法操作符":["0.83","58.83"],"关系操作符":["0.84","58.84"],"相等操作符":["0.85","58.85"],"等于和不等于":["0.86","58.86"],"全等和不全等":["0.87","58.87"],"条件操作符":["0.88","58.88"],"赋值操作符":["0.89","58.89"],"逗号操作符":["0.90","58.90"],"语句":["0.91","58.91"],"补充":["4.1"],"解释":["12.0","79.14","79.18","79.25","79.29","84.3"],"如何将":["14.0"],"不稳定结构":["55.3"],"v":["55.4","55.5"],"稳定":["55.6"],"什么是":["56.0","63.13"],"javascript":["56.1","56.2","56.7"],"ecmascript":["56.3"],"dom":["56.4","56.5","77.0"],"bom":["56.6"],"html":["57.0","65.0"],"script":["57.1"],"扩展路由的meta":["59.0"],"pinia":["60.0"],"一":["60.1","61.1","69.0"],"二":["60.2","61.2"],"三":["60.3","61.3"],"四":["60.4","61.4"],"key":["60.5"],"storage":["60.6"],"paths":["60.7"],"serializer":["60.8"],"beforerestore":["60.9"],"afterrestore":["60.10"],"debug":["60.11"],"批量导入":["61.0"],"五":["61.5"],"数据类型分类":["62.1"],"数据类型检测":["62.2"],"数据类型转换":["62.3"],"浅拷贝和深拷贝":["62.4"],"浅拷贝":["62.5"],"深拷贝":["62.6"],"继承":["62.7"],"常见的实现继承的方法":["62.8"],"如何实现new":["62.9"],"闭包":["62.10","67.37"],"闭包的定义":["62.11"],"闭包产生的原因":["62.12"],"闭包的表现形式":["62.13"],"json":["62.14"],"数组":["62.15"],"array":["62.16","62.17","62.18"],"数组扁平化":["62.19"],"数组排序":["62.21"],"排序分类":["62.23"],"sort排序":["62.24"],"css":["63.0","63.3","63.4","63.14"],"介绍一下":["63.1"],"line":["63.2"],"用":["63.5"],"一个盒子不给宽度和高度如何实现水平垂直居中":["63.6"],"display":["63.7","63.15"],"对":["63.8"],"清除浮动有哪些方式":["63.9"],"在网页中应该使用奇数还是偶数的字体大小":["63.10"],"position":["63.11"],"写一个左中右布局占满屏幕":["63.12"],"opacity":["63.16"],"before":["63.17"],"怎么让":["63.18"],"rem":["63.19"],"webkit":["63.20"],"响应式":["63.21"],"布局方案":["63.22"],"行内元素有哪些":["65.1"],"页面导入样式时":["65.2"],"title":["65.3"],"img":["65.4"],"png":["65.5"],"什么是语义化标签":["65.6"],"ios":["66.0","66.2"],"如何关闭":["66.1"],"禁止":["66.3","66.4","66.6"],"禁止下载图片":["66.5"],"js":["67.0","67.2","67.5","67.6","67.11","67.15","67.20","67.29","67.42"],"延迟加载":["67.1"],"和":["67.4"],"面试的时候怎么看":["67.7"],"考题":["67.8"],"考题二":["67.9","67.13","67.17","67.58"],"考题三":["67.10","67.14","67.18","67.59"],"考题一":["67.12","67.16","67.57"],"考题四":["67.19"],"方式一":["67.21","67.30","67.43","67.61"],"方式二":["67.22","67.31","67.44","67.62"],"方式三":["67.23","67.32","67.45","67.63"],"方式四":["67.24","67.46"],"方式五":["67.25"],"slice":["67.26","67.27"],"splice":["67.28"],"找出多维数组最大值":["67.33"],"给字符串新增方法实现功能":["67.34"],"找出字符串出现最多次数的字符以及次数":["67.35"],"new":["67.36"],"原型链":["67.41"],"说一下":["67.47"],"共同点":["67.48"],"区别":["67.49"],"场景":["67.50"],"sort":["67.51"],"深拷贝和浅拷贝":["67.52"],"localstorage":["67.53"],"自适应":["67.54"],"作用域考题":["67.56"],"将下列对象进行合并":["67.60"],"箭头函数和普通函数有什么区别":["67.64"],"promise":["67.65"],"find":["67.66"],"some":["67.67"],"tstststst":["68.0"],"webpack":["70.0","70.1"],"markdown":["72.0"],"syntax":["72.1"],"custom":["72.2"],"more":["72.3"],"image":["73.0"],"如何理解node中模块的概念":["75.0"],"动态":["76.0"],"题目":["76.1","76.5","77.1","77.5","77.9","77.12","77.15","78.1","78.4","78.7","79.1","79.6","79.9","79.12","79.16","79.20","79.23","79.27","80.1","80.4","80.8","80.11","80.14","80.17","81.1","81.4","82.1","83.1","84.1","85.1","86.1"],"答案":["76.2","76.6","77.2","77.6","77.10","77.13","77.16","78.2","78.5","78.8","78.10","79.2","79.4","79.7","79.10","79.13","79.17","79.21","79.24","79.28","80.2","80.5","80.9","80.12","80.15","80.18","81.2","81.5","82.2","83.2","84.2","85.2"],"解答":["76.3","76.7","77.3","77.7","80.6"],"全局":["76.4"],"props":["77.4"],"函数式组件":["77.8"],"渲染函数":["77.11"],"树组件":["77.14"],"切换器":["78.0"],"计数器":["78.3"],"实现本地存储函数":["78.6"],"鼠标坐标":["78.9"],"生命周期钩子":["79.0","83.0"],"ref":["79.3"],"响应性丢失":["79.5"],"可写的计算属性":["79.8"],"watch":["79.11"],"浅层":["79.15"],"依赖注入":["79.19"],"effect":["79.22"],"自定义":["79.26"],"大写":["80.0"],"优化性能的指令":["80.3"],"切换焦点的指令":["80.7"],"防抖点击指令":["80.10"],"激活的样式":["80.13"],"实现简易的":["80.16"],"阻止冒泡事件":["81.0"],"按键修饰符":["81.3"],"下一次":["82.0"],"原始值":["84.0"],"until":["85.0"],"自定义元素":["86.0"],"options":["87.1"],"setup":["87.3"],"目录":["88.0"]},{"0":["0.33","0.34","53.0","58.33","58.34","62.3","62.23","73.50"],"1":["0.17","0.22","0.34","0.60","0.77","0.78","0.82","0.83","1.0","1.1","1.2","1.3","1.4","1.5","2.1","2.2","2.3","3.1","3.2","3.3","6.1","6.2","6.3","7.1","7.2","8.1","8.2","9.0","10.1","10.2","10.3","11.1","11.2","11.3","12.1","12.2","18.1","18.2","19.1","19.2","20.1","20.2","21.1","21.2","21.3","22.1","22.2","26.1","26.2","27.1","27.2","27.3","28.1","28.2","28.3","29.1","29.2","29.3","31.1","31.2","34.1","34.2","34.3","35.1","36.1","36.2","36.3","36.4","37.1","37.2","37.3","43.1","47.2","47.3","47.4","47.5","54.1","54.2","54.3","55.1","55.2","57.1","58.17","58.22","58.34","58.60","58.77","58.78","58.82","58.83","59.0","62.2","62.3","62.5","62.6","62.8","62.9","62.13","62.19","62.23","63.21","63.22","67.3","67.5","67.6","67.7","67.8","67.31","67.32","67.38","67.40","67.41","67.49","67.52","67.64","69.1","69.2","69.3","69.4","69.5","69.6","69.7","69.8","69.9","69.11","69.15","73.1","73.2","73.3","73.4","73.5","73.6","73.7","73.8","73.9","73.13","73.19","73.27","73.34","73.36","73.58","73.60","73.67","73.69","73.80","73.82","73.83","73.84","73.89","73.123","73.128","73.136","81.2","87.0","87.7"],"2":["0.18","0.63","0.65","0.82","0.83","1.2","2.0","2.2","6.2","8.2","18.2","19.2","20.2","26.2","29.2","31.2","34.2","36.2","37.2","47.3","54.2","55.2","57.1","58.18","58.63","58.65","58.82","58.83","62.2","62.3","62.6","62.8","62.9","62.16","62.19","62.23","63.21","67.39","69.3","69.10","69.11","73.3","73.4","73.7","73.9","73.10","73.11","73.12","73.13","73.14","73.15","73.16","73.17","73.18","73.19","73.20","73.21","73.22","73.23","73.24","73.25","73.26","73.27","73.28","73.29","73.30","73.31","73.32","73.33","73.34","73.35","73.36","73.37","73.38","73.39","73.40","73.41","73.42","73.43","73.44","73.45","73.46","73.47","73.48","73.49","73.50","73.51","73.52","73.53","73.54","73.55","73.56","73.57","73.58","73.59","73.60","73.61","73.62","73.63","73.64","73.65","73.66","73.67","73.68","73.69","73.70","73.71","73.72","73.73","73.74","73.75","73.76","73.77","73.80","73.83","73.87","73.89","73.90","73.91","73.92","73.93","73.96","73.103","73.110","73.118","73.121","73.128","73.130","73.140","87.2"],"3":["0.19","0.34","0.71","1.3","2.3","3.0","3.3","6.3","21.3","27.3","28.3","29.3","36.3","37.3","47.4","54.3","56.6","58.19","58.34","58.71","62.3","62.6","62.8","62.19","62.23","67.40","69.4","69.13","73.6","73.7","73.8","73.19","73.22","73.23","73.38","73.39","73.44","73.50","73.54","73.58","73.60","73.61","73.62","73.65","73.67","73.69","73.70","73.73","73.74","73.76","73.77","73.78","73.79","73.80","73.81","73.82","73.83","73.84","73.85","73.86","73.87","73.88","73.89","73.90","73.91","73.92","73.93","73.94","73.95","73.96","73.97","73.98","73.99","73.100","73.101","73.102","73.103","73.104","73.105","73.106","73.107","73.108","73.109","73.110","73.111","73.112","73.113","73.114","73.115","73.116","73.117","73.118","73.119","73.120","73.121","73.122","73.123","73.124","73.125","73.126","73.127","73.128","73.129","73.130","73.131","73.132","73.133","73.134","73.135","73.136","73.137","73.138","73.139","73.140","87.4"],"4":["1.4","4.0","36.4","47.5","62.3","62.6","62.8","62.19","67.33","73.27","73.28","73.31","73.32","73.40","73.45","73.55","73.67","73.69","73.70","73.73","73.76","73.77","73.92","73.100","73.103","73.106","73.107","73.117","73.118","73.136","87.5"],"5":["0.5","5.0","58.5","62.3","62.6","62.19","67.33","69.6","73.23","73.34","73.36","73.37","73.38","73.39","73.40","73.46","73.93","73.110","73.112","73.114","73.115","73.117","73.118","73.139","73.140","87.6"],"6":["0.47","6.0","58.47","62.6","62.23","69.7","69.12","69.13","73.43","73.44","73.45","73.46","73.121","73.123","73.124","87.7"],"7":["0.80","7.0","58.80","69.8","69.14","69.15","69.16","73.49","73.50","73.128","73.130","73.133","73.136","73.137","73.139","73.140","87.8"],"8":["8.0","57.1","69.9","73.53","73.54","73.55"],"9":["9.0"],"10":["10.0","67.19"],"11":["11.0"],"13":["13.0"],"15":["15.0"],"16":["16.0"],"17":["17.0"],"18":["6.3","18.0"],"19":["19.0"],"20":["20.0"],"21":["21.0"],"22":["22.0"],"23":["23.0"],"24":["24.0"],"25":["25.0"],"26":["26.0"],"27":["27.0"],"28":["28.0"],"29":["29.0"],"30":["30.0","31.0"],"31":["0.65","58.65"],"32":["32.0"],"33":["33.0"],"34":["34.0","62.23"],"35":["35.0"],"36":["36.0"],"37":["37.0"],"38":["38.0"],"39":["39.0"],"40":["40.0"],"41":["41.0"],"42":["42.0"],"43":["43.0"],"44":["44.0"],"45":["45.0"],"46":["46.0"],"47":["47.0"],"48":["48.0"],"49":["49.0"],"50":["50.0"],"51":["51.0"],"52":["52.0"],"53":["53.0"],"54":["54.0"],"55":["55.0"],"76":["62.23"],"100":["73.82"],"211":["62.23"],"222":["62.23"],"324":["0.32","58.32"],"456":["62.23"],"2023":["71.0"],"ecmascript":["0.2","0.4","0.5","0.12","0.23","0.24","0.32","0.33","0.39","0.47","0.73","0.76","0.80","0.86","58.2","58.4","58.5","58.12","58.23","58.24","58.32","58.33","58.39","58.47","58.73","58.76","58.80","58.86"],"中一切都是区分大小写的":["0.2","58.2"],"所谓标识符":["0.3","58.3"],"就是变量":["0.3","58.3"],"采用":["0.4","58.4"],"新增了严格模式的概念":["0.5","58.5"],"严格模式是一种不同的":["0.5","58.5"],"bash":["0.7","58.7","61.1"],"break":["0.7","58.7"],"do":["0.7","58.7"],"in":["0.7","58.7"],"ecma":["0.8","58.8"],"enum":["0.9","58.9","73.49"],"implements":["0.10","58.10"],"await":["0.11","58.11"],"中有":["0.12","58.12"],"关键字":["0.13","58.13","73.49"],"要定义变量":["0.13","58.13"],"可以使用":["0.13","58.13"],"声明作用域":["0.14","58.14"],"使用":["0.14","0.15","57.1","58.14","58.15","60.4","65.2","77.3"],"操作符定义的变量会成为包含它的函数的局部变量":["0.14","58.14"],"比如":["0.14","58.14"],"在一个函数内部定义了一个变量":["0.14","58.14"],"就意味着该变量将在函数退出时被销毁":["0.14","58.14"],"js":["0.14","0.31","0.90","9.0","34.2","36.3","58.14","58.31","58.90","62.2","62.5","62.8","62.19","62.23","67.1","67.8","67.9","67.10","67.12","67.13","67.14","67.16","67.17","67.18","67.19","67.25","67.28","67.30","67.31","67.32","67.33","67.34","67.35","67.43","67.44","67.45","67.46","67.50","67.52","67.58","67.59","67.60","67.63"],"function":["0.14","9.0","21.3","58.14","62.2","62.8","62.19","62.23","67.8","67.10","67.16","67.19","67.35","67.44","67.45","67.46","67.58","67.63"],"test":["0.14","58.14"],"声明提升":["0.15","58.15"],"时":["0.15","58.15","62.16"],"下面的代码不会报错":["0.15","58.15"],"这是因为使用了这个关键字声明的变量会自动提升到函数的作用域顶部":["0.15","58.15"],"声明":["0.16","0.21","58.16","58.21"],"和":["0.16","13.0","17.0","18.2","50.0","56.5","56.6","58.16","62.2","62.3","63.15","63.16","63.17","63.19","65.2","65.3","65.4","67.3","67.57","67.66","67.67","73.96"],"var":["0.16","0.17","0.25","58.16","58.17","58.25","62.8","62.19","62.23","67.9","67.13","67.14","67.17","67.19","67.31","67.32","67.33","67.35","67.50","67.52","67.58"],"的作用差不多":["0.16","58.16"],"但是有着非常重要的区别":["0.16","58.16"],"最明显的区别就是":["0.16","58.16"],"暂时性死区":["0.17","58.17"],"let":["0.17","0.20","0.21","0.31","6.3","58.17","58.20","58.21","58.31","62.19","62.23","67.55","67.57"],"与":["0.17","0.18","6.3","58.17","58.18","87.8"],"全局声明":["0.18","58.18"],"循环中的":["0.20","58.20"],"在":["0.20","0.33","15.0","52.0","58.20","58.33","60.2","61.2","61.5","76.3"],"出现之前":["0.20","58.20"],"的行为与":["0.21","58.21"],"基本相同":["0.21","58.21"],"唯一一个重要的区别是用它声明变量时必须同时初始化变量":["0.21","58.21"],"且尝试修改":["0.21","58.21"],"操作符":["0.24","58.24"],"因为":["0.24","58.24"],"的类型系统是松散的":["0.24","58.24"],"类型":["0.25","0.26","0.27","0.29","0.35","0.43","0.60","58.25","58.26","58.27","58.29","58.35","58.43","58.60","60.5","60.6","60.7","60.8","60.9","60.10","60.11","73.80"],"类型只有一个值":["0.25","58.25"],"就是特殊值":["0.25","58.25"],"当":["0.25","58.25"],"类型同样只有一个值":["0.26","58.26"],"即特殊值":["0.26","58.26"],"逻辑上讲":["0.26","58.26"],"类型是":["0.27","58.27"],"数据类型":["0.28","58.28"],"转换为":["0.28","0.34","58.28","58.34","87.8"],"true":["0.28","0.34","0.86","36.3","58.28","58.34","58.86","62.3"],"十进制":["0.30","58.30"],"直接写出来即可":["0.30","58.30"],"八进制":["0.30","58.30"],"要定义浮点值":["0.31","58.31"],"数值中必须包含小数点":["0.31","58.31"],"而且小数点后面必须至少有一个数字":["0.31","58.31"],"虽然小数点前面不是必须有整数":["0.31","58.31"],"但推荐加上":["0.31","58.31"],"floatnumber1":["0.31","58.31"],"可以保存的最小数值保存在":["0.32","58.32"],"number":["0.32","0.33","0.34","36.3","58.32","58.33","58.34","62.3","73.77"],"min":["0.32","58.32"],"value":["0.32","58.32"],"中":["0.32","0.33","30.0","52.0","58.32","58.33","62.5","73.50"],"这个值多数浏览器是":["0.32","58.32"],"5e":["0.32","58.32"],"有一个特殊的值叫":["0.33","58.33"],"意思是":["0.33","58.33"],"不是数值":["0.33","58.33"],"not":["0.33","58.33"],"a":["0.33","55.4","58.33","62.19","62.23","67.14"],"用于表示本来要返回数值的操作失败了":["0.33","58.33"],"而不是抛出错误":["0.33","58.33"],"有":["0.34","58.34"],"个函数可以将非数值转换为数值":["0.34","58.34"],"parseint":["0.34","58.34","62.3"],"parsefloat":["0.34","58.34","62.3"],"是转型函数":["0.34","58.34"],"可用于任何数据类型":["0.34","58.34"],"后两个函数主要用于将字符串转化为数值":["0.34","58.34"],"函数基于如下规则执行转换":["0.34","58.34"],"布尔值":["0.34","58.34"],"false":["0.34","58.34","62.3"],"数值":["0.34","58.34"],"直接返回":["0.34","58.34"],"null":["0.34","58.34","62.1","62.2","62.3"],"返回":["0.34","58.34","62.3"],"undefined":["0.34","58.34","60.7","60.9","60.10","62.1","62.6","67.3","79.14"],"nan":["0.34","0.82","0.83","58.34","58.82","58.83"],"字符串":["0.34","58.34"],"应用一下规则":["0.34","58.34"],"如果字符串包含数值字符":["0.34","58.34"],"包括数字字符前面带加":["0.34","58.34"],"减号的情况":["0.34","58.34"],"则转换为一个十进制数":["0.34","58.34"],"因此":["0.34","58.34"],"字符串数据类型包含一些字符字面量":["0.36","58.36"],"用于表示非打印字符或有其他用途的字符":["0.36","58.36"],"字面量":["0.36","58.36"],"含义":["0.36","58.36"],"n":["0.36","58.36"],"换行":["0.36","58.36"],"t":["0.36","58.36"],"字符串是不可变的":["0.37","58.37"],"有两种方式将一个值转换为字符串":["0.38","58.38"],"模板字面量最常用的一个特性是支持字符串插值":["0.40","58.40"],"也就是可以在一个连续定义中插入一个或多个":["0.40","58.40"],"值":["0.40","58.40","63.7"],"模板字面量也支持定义标签函数":["0.41","58.41"],"使用模板字面量也可以直接获取原始的模板字面量内容":["0.42","58.42"],"符号需要使用":["0.44","58.44"],"symbol":["0.44","0.45","58.44","58.45","62.6"],"函数初始化":["0.44","58.44"],"因为符号本身是基本类型":["0.44","58.44"],"所以":["0.44","58.44"],"typeof":["0.44","58.44","62.2"],"如果运行时的不同部分需要共享和重用符号实例":["0.45","58.45"],"那么可以用一个字符串作为键":["0.45","58.45"],"在全局符号注册表中创建并重用符号":["0.45","58.45"],"for":["0.45","55.5","58.45","62.19","62.23"],"对每个字符串键都执行幂等操作":["0.45","58.45"],"第一次使用某个字符串调用时":["0.45","58.45"],"它会检查全局运行时注册表":["0.45","58.45"],"凡是可以使用字符串或数值作为属性的地方":["0.46","58.46"],"也引入了一批常用内置符号":["0.47","58.47"],"well":["0.47","58.47"],"known":["0.47","58.47"],"asynciterator":["0.48","58.48"],"hasinstance":["0.49","58.49"],"isconcatspreadable":["0.50","58.50"],"iterator":["0.51","58.51"],"match":["0.52","58.52"],"replace":["0.53","58.53"],"search":["0.54","58.54"],"species":["0.55","58.55"],"split":["0.56","58.56"],"toprimitive":["0.57","58.57"],"tostringtag":["0.58","58.58"],"unscopables":["0.59","58.59"],"每个":["0.60","58.60"],"实例都有如下属性和方法":["0.60","58.60"],"只操作一个值的操作符叫一元操作符":["0.62","58.62"],"递减操作符":["0.63","58.63"],"递增和递减操作符有两个版本":["0.63","58.63"],"前缀版和后缀版":["0.63","58.63"],"两个版本的区别是后缀版的递增和递减在语句被求值后才发生":["0.63","58.63"],"这":["0.63","58.63"],"对操作符可以用作于任何值":["0.63","58.63"],"一元加和减操作符对大多数开发者来说并不陌生":["0.64","58.64"],"它们在":["0.64","58.64"],"正值以真正的二进制格式存储":["0.65","58.65"],"即":["0.65","58.65"],"位中的每一位都代表":["0.65","58.65"],"的幂":["0.65","58.65"],"按位非操作符用波浪符":["0.66","58.66"],"表示":["0.66","0.67","0.68","0.73","0.74","0.75","0.77","0.78","0.79","0.86","58.66","58.67","58.68","58.73","58.74","58.75","58.77","58.78","58.79","58.86"],"按位与操作符用和号":["0.67","58.67"],"按位或操作符用管道符":["0.68","58.68"],"同样有两个操作数":["0.68","58.68"],"按位或遵循如下真值表":["0.68","58.68"],"左移操作符用两个小于号":["0.69","58.69"],"有符号右移由两个大于号":["0.70","58.70"],"无符号右移用":["0.71","58.71"],"个大于号表示":["0.71","58.71"],"逻辑非操作符由一个叹号":["0.73","58.73"],"可应用给":["0.73","58.73"],"中的任何值":["0.73","58.73"],"这个操作符始终返回布":["0.73","58.73"],"逻辑与操作符由两个和号":["0.74","58.74"],"应用到两个值":["0.74","58.74"],"逻辑与操作符遵循如下真值表":["0.74","58.74"],"第一个操作数":["0.74","0.75","58.74","58.75"],"第二个操作数":["0.74","0.75","58.74","58.75"],"结果":["0.74","0.75","58.74","58.75"],"逻辑或操作符由两个管道符":["0.75","58.75"],"逻辑或操作符遵循如下真值表":["0.75","58.75"],"乘法操作符由一个星号":["0.77","58.77"],"可以用于计算两个数值的乘积":["0.77","58.77"],"特殊值处理":["0.77","0.78","0.79","58.77","58.78","58.79"],"如果操作数都是数值":["0.77","0.78","58.77","58.78"],"除法操作符由一个斜杠":["0.78","58.78"],"可以用于计算第一个操作数除以第二个操作数的商":["0.78","58.78"],"则执行常规的除法运算":["0.78","58.78"],"取模":["0.79","58.79"],"余数":["0.79","58.79"],"操作符由一个百分比符号":["0.79","58.79"],"用于求两个数的和":["0.82","58.82"],"两个操作数都是数值执行规则":["0.82","58.82"],"如果有任一操作数是":["0.82","0.83","58.82","58.83"],"则返回":["0.82","0.83","58.82","58.83"],"也是使用很频繁的一种操作符":["0.83","58.83"],"计算规则":["0.83","58.83"],"如果两个操作数都是数值":["0.83","58.83"],"则执行数学减法运算并返回结果":["0.83","58.83"],"关系操作符执行比较两个值的操作":["0.84","58.84"],"包括小于":["0.84","58.84"],"大于":["0.84","58.84"],"小于等于":["0.84","58.84"],"第一组是等于和不等于":["0.85","58.85"],"中的等于操作符用两个等于号":["0.86","58.86"],"如果操作数相等":["0.86","58.86"],"则会返回":["0.86","58.86"],"不等于操作符用叹号和等于号":["0.86","58.86"],"如果两个操作数不相等":["0.86","58.86"],"这两个操作符都会先进行类型转换":["0.86","58.86"],"通常称为强制类型转换":["0.86","58.86"],"全等和不全等操作符与相等和不相等操作符类似":["0.87","58.87"],"variable":["0.88","58.88"],"boolean":["0.88","58.88","62.3"],"expression":["0.88","58.88"],"简单赋值用等于号":["0.89","58.89"],"逗号操作符可以用来在一条语句中执行多个操作":["0.90","58.90"],"如下所示":["0.90","58.90"],"后续整理":["0.91","58.91"],"声明式框架":["1.1"],"vue":["1.1","4.1","5.0","9.0","15.0","16.0","21.3","22.1","23.0","25.0","30.0","31.0","33.0","38.0","39.0","41.0","42.0","44.0","45.0","76.1","76.2","76.6","77.1","77.2","77.6","77.9","77.10","77.13","77.16","78.1","78.2","78.4","78.5","78.7","78.8","78.9","78.10","79.1","79.2","79.3","79.4","79.6","79.7","79.9","79.10","79.12","79.13","79.16","79.17","79.21","79.23","79.24","79.27","79.28","79.29","80.1","80.2","80.4","80.5","80.8","80.9","80.11","80.12","80.14","80.15","80.17","80.18","81.2","81.4","81.5","82.1","82.2","83.1","83.2","84.2","85.2","86.1"],"的核心特点":["1.1"],"用起来简单":["1.1"],"那我们就有必要知道":["1.1"],"命令式和声明式的区别":["1.1"],"mvvm":["1.2"],"模式":["1.2"],"说起":["1.2"],"理解基本概念":["2.1"],"spa":["2.1"],"single":["2.1"],"page":["2.1"],"优缺点":["2.2"],"单页面应用":["2.2"],"解决方案":["2.3"],"基本概念":["3.1"],"基本所有框架都引入了虚拟":["3.1"],"2补充":["3.2"],"再次补充":["3.3"],"谈谈对":["4.0"],"中的每一个组件都有一个渲染函数":["4.1"],"既然":["5.0"],"vue2":["6.2","6.3","18.1","53.0","69.0"],"处理缺陷":["6.2"],"vue3":["6.3","52.0","53.0","87.3"],"实现对比":["6.3"],"javascript":["6.3","28.3","56.0","62.10"],"obj":["6.3"],"name":["6.3","28.3","32.0","36.3","55.1","62.8","67.9","67.18"],"jw":["6.3"],"age":["6.3"],"依赖收集流程":["8.1"],"set方法是如何实现的":["9.0"],"不允许在已经创建的实例上动态添加新的响应式属性":["9.0"],"export":["9.0","36.3"],"set":["9.0","67.30"],"target":["9.0"],"key":["9.0","20.1"],"val":["9.0"],"是开发环境":["9.0"],"没定义或者是基础类型则报错":["9.0"],"if":["9.0","17.0","55.4","62.3","62.23"],"process":["9.0"],"env":["9.0"],"node":["9.0"],"watch":["11.0","13.0"],"ref":["12.0","79.15","79.26","87.4","87.6","87.7"],"watcheffect":["13.0"],"的区别":["13.0","63.16","65.3","67.3","67.53","67.55"],"template":["14.0","31.1","76.6","77.16","78.1","78.2","78.5","79.3","79.4","79.6","79.7","80.11","80.12","80.14","80.15","81.5"],"转化成":["14.0"],"render":["14.0","31.2"],"函数":["14.0"],"new":["15.0","62.8","62.9","62.16","67.30"],"这个过程中究竟做了什么":["15.0"],"的时候":["15.0"],"v":["17.0","26.2","29.3","37.3","80.6","80.16","81.4"],"中的生命周期":["18.1"],"主要的生命周期":["18.1"],"创建前后":["18.1"],"挂载前后":["18.1"],"更新前后":["18.1"],"v2":["18.2"],"v3":["18.2"],"中的生命周期对比":["18.2"],"生命周期":["18.2"],"diff":["19.2","55.1"],"比较流程":["19.2"],"先比较是否是相同节点":["19.2"],"的概念":["20.1","55.2"],"use":["21.1","21.3"],"实现原理":["21.3"],"typescript":["21.3","61.4","73.38","73.45","73.46","73.54","73.77"],"plugin":["21.3","60.1"],"extend":["22.1"],"概念":["22.1"],"使用基础":["22.1"],"组件":["23.0"],"data":["23.0"],"为什么必须是一个函数":["23.0"],"根实例对象":["23.0"],"可以是对象也可以是函数":["23.0"],"单例":["23.0"],"函数组件的优势":["24.0"],"函数式组件的特性":["24.0"],"的过滤器了解吗":["25.0"],"过滤器的使用场景":["25.0"],"过滤器实质不改变原始数据":["25.0"],"只是对数据进行加工处理后返回过滤后的数据再进行调用处理":["25.0"],"once":["26.2","80.6"],"使用场景":["26.2","36.2"],"html":["26.2","31.0","31.1","36.2","55.1","55.4","55.5","63.6"],"单个元素":["26.2"],"span":["26.2","55.1","55.4"],"插槽的分类和原理":["28.3"],"默认插槽":["28.3"],"具名插槽":["28.3"],"div":["28.3","55.1","55.4","55.5","63.6","78.5","79.4"],"slot":["28.3"],"title":["28.3","65.4"],"content":["28.3"],"组件中的":["29.3"],"model":["29.3"],"组件上的":["29.3"],"默认会利用名为":["29.3"],"sync":["30.0"],"修饰符的作用":["30.0"],"中递归组件的理解":["31.0"],"el":["31.0","31.1"],"menu":["31.0","31.1"],"模板递归":["31.1"],"渲染函数递归":["31.2"],"jsx":["31.2"],"组件中写":["32.0"],"常见的修饰符有哪些":["33.0"],"异步组件的写法":["34.2"],"回调写法":["34.2"],"components":["34.2"],"my":["34.2"],"动态组件可以采用":["36.2"],"keep":["36.2","36.3","36.4"],"alive":["36.2","36.3"],"进行缓存":["36.2"],"原理":["36.3"],"default":["36.3"],"abstract":["36.3"],"不会放到对应的lifecycle":["36.3"],"props":["36.3"],"include":["36.3"],"patterntypes":["36.3"],"白名单":["36.3"],"exclude":["36.3"],"黑名单":["36.3"],"max":["36.3"],"string":["36.3","60.5","60.7","62.3","67.2","67.34","73.80","73.87"],"最大连接数":["36.3"],"created":["36.3"],"this":["36.3","62.8","67.64","72.2"],"cache":["36.3"],"alive中数据更新问题":["36.4"],"指令的生命周期":["37.2"],"常见的指令编写":["37.3"],"图片懒加载":["37.3"],"lazy":["37.3"],"防抖":["37.3"],"debounce":["37.3"],"按钮权限":["37.3"],"中使用了哪些设计模式":["38.0"],"单例模式":["38.0"],"单例模式就是整个程序有且仅有一个实例":["38.0"],"中的性能优化有哪些":["39.0"],"数据层级不宜过深":["39.0"],"合理设置响应式数据":["39.0"],"单页应用首屏加载速度慢的怎么解决":["40.0"],"使用路由懒加载":["40.0"],"异步组件":["40.0"],"实现组件拆分":["40.0"],"项目中你是如何解决跨域的呢":["41.0"],"跨域是浏览器同源策略导致的":["41.0"],"常见权限控制":["43.1"],"登录鉴权":["43.1"],"用户登录后返回":["43.1"],"router":["44.0","45.0"],"有几种钩子函数":["44.0"],"具体是什么及执行流程是怎样的":["44.0"],"几种模式的区别":["45.0"],"缺点":["47.4"],"页面刷新后":["49.0"],"mutation":["50.0"],"action":["50.0"],"有使用过":["51.0"],"vuex":["51.0"],"的":["51.0"],"module":["51.0"],"吗":["51.0"],"compositionapi":["52.0"],"的优势是":["52.0"],"有了解过吗":["53.0"],"能说说跟":["53.0"],"的区别吗":["53.0"],"更注重模块上的拆分":["53.0"],"接口异常处理":["54.3"],"patchflags":["55.1"],"优化":["55.1"],"算法无法避免新旧虚拟dom":["55.1"],"中无用的比较操作":["55.1"],"通过":["55.1","62.24"],"来标记动态内容":["55.1"],"可以实现快速":["55.1"],"算法":["55.1"],"h1":["55.1","65.3"],"hello":["55.1"],"jiang":["55.1"],"blocktree":["55.2"],"为什么我们还要提出":["55.2"],"所谓的不稳定结构就是":["55.3"],"p":["55.4"],"flag":["55.4"],"随着":["55.5"],"变量的变化也会导致虚拟dom":["55.5"],"树变得不稳定":["55.5"],"fragment":["55.6"],"是什么":["56.1","63.14","63.21"],"虽然":["56.1"],"实现":["56.2"],"在基本层面上":["56.3"],"文档对象模型":["56.4"],"级别":["56.5"],"domlevel1":["56.5"],"由":["56.5"],"core":["56.5"],"ie3":["56.6"],"netscape":["56.6"],"navigator":["56.6"],"提供的浏览器对象模型":["56.6"],"的不同版本":["56.7"],"中的":["57.0"],"元素":["57.1"],"元素有下列":["57.1"],"个属性":["57.1"],"async":["57.1","67.1"],"可选":["57.1"],"表示应该立即开始下载脚本":["57.1"],"但不能阻止其他页面动作":["57.1"],"比如下载资源或等待其他脚本加载":["57.1"],"只对外部脚本文件有效":["57.1"],"charset":["57.1"],"src":["57.1","73.65","73.80"],"项目根目录下创建":["59.0"],"typing":["59.0"],"缓存持久化":["60.0"],"安装pinia":["60.1"],"main":["60.2","63.6","73.65","73.80"],"在仓库中添加配置项":["60.3"],"definestore的第二个参数中配置":["60.3"],"配置":["60.4"],"该插件的默认配置如下":["60.4"],"localstorage":["60.4","60.6"],"进行存储":["60.4"],"默认值":["60.5","60.6","60.7","60.8","60.9","60.10","63.11"],"store":["60.5"],"storagelike":["60.6"],"将数据持久化到":["60.6"],"用于指定":["60.7"],"state":["60.7"],"json":["60.8","62.6"],"stringify":["60.8","62.6","62.14"],"parse":["60.8"],"context":["60.9","60.10","63.8"],"piniaplugincontext":["60.9","60.10"],"void":["60.9","60.10","65.1","73.77"],"svg":["61.0","61.2","61.3"],"安装插件":["61.1"],"vite":["61.2"],"config":["61.2"],"ts中配置":["61.2"],"icondirs":["61.2"],"icondirs是保存":["61.2"],"图片的文件夹":["61.2"],"封装":["61.3"],"配置全局组件并引入插件":["61.4"],"import":["61.4","77.13"],"type":["61.4","62.8"],"基础数据类型":["62.1"],"instanceof":["62.2","67.22"],"的差异":["62.2"],"可以准确地判断复杂引用数据的类型":["62.2"],"但是不能正确判断基础数据类型":["62.2"],"而":["62.2"],"也存在弊端":["62.2"],"他虽然可以判断基础数据类型":["62.2"],"除外":["62.2"],"但是引用数据类型中":["62.2"],"除了":["62.2"],"类型以外":["62.2"],"其他的也无法判断":["62.2"],"myinstanceof":["62.2"],"left":["62.2"],"right":["62.2"],"这里先用":["62.2"],"来判断基础类型":["62.2"],"强制类型转换":["62.3"],"tostring":["62.3"],"隐式类型转换":["62.3"],"逻辑运算符":["62.3"],"运算符":["62.3"],"关系操作符":["62.3"],"相等运算符":["62.3"],"while":["62.3"],"条件":["62.3"],"方法强制转换规则":["62.3"],"如果是布尔值":["62.3"],"分别被转换为":["62.3"],"如果数数字":["62.3"],"返回自身":["62.3"],"如果是":["62.3"],"自己创建一个新的对象":["62.5"],"来接受你要重新复制或引用的对象值":["62.5"],"如果对象属性是基本的数据类型":["62.5"],"复制的就是基本类型的值给新对象":["62.5"],"但如果属性是引用数据类型":["62.5"],"复制的就是内存中的地址":["62.5"],"如果其中一个对象改变了内存中的地址":["62.5"],"肯定会影响到另一个对象":["62.5"],"实现浅拷贝的方法":["62.5"],"object":["62.5","67.61"],"assign":["62.5"],"是":["62.5","87.3"],"es6":["62.5","67.43"],"的一个方法":["62.5"],"该方法可以用于":["62.5"],"浅拷贝只是创建了一个新的对象":["62.6"],"复制了原有对象的基本类型的值":["62.6"],"对于复杂引用数据类型":["62.6"],"其在堆内存中完全开辟了一块内存地址":["62.6"],"并将原有的对象完全复制过来存放":["62.6"],"深拷贝原理":["62.6"],"将一个对象从内存中完整地拷贝出来一份给目标对象":["62.6"],"并从堆内存中开辟一个全新的空间存放新对象":["62.6"],"且新对象的修改并不会改变原对象":["62.6"],"二者实现真正的分离":["62.6"],"实现深拷贝的方法":["62.6"],"乞丐版":["62.6"],"是目前开发中最简单的深拷贝的方法":["62.6"],"注意":["62.6"],"拷贝的对象的值如果有函数":["62.6"],"这几种类型":["62.6"],"经过":["62.6"],"序列化之后的字符串中的键值对会消失":["62.6"],"拷贝":["62.6"],"date":["62.6","71.0"],"引用类型会变成字符串":["62.6"],"无法拷贝不可枚举的属性":["62.6"],"无法拷贝对象的原型链":["62.6"],"regexp引用类型会变成空对象":["62.6"],"对象中含有":["62.6"],"继承是面向对象的":["62.7"],"一":["62.8"],"原型链继承":["62.8","67.44"],"原型链继承是比较常见的继承方式之一":["62.8"],"其中涉及的构造函数":["62.8"],"原型和实例":["62.8"],"每一个构造函数都有一个原型对象":["62.8"],"原型对象又包含一个指向构造函数的指针":["62.8"],"而实例则包含一个原型对象的指针":["62.8"],"parent1":["62.8"],"play":["62.8"],"child1":["62.8"],"child2":["62.8"],"prototype":["62.8","67.23"],"s1":["62.8"],"s2":["62.8"],"push":["62.8","62.18"],"console":["62.8","62.23","67.16"],"log":["62.8","62.23","67.16"],"image":["62.8","62.23","73.80","73.82","75.0"],"20240117094112987":["62.8"],"原型链继承内存空间是共享的":["62.8"],"apply":["62.9","67.50"],"call":["62.9","67.47"],"bind的底层逻辑":["62.9"],"javascript中的apply":["62.9"],"call和bind方法是前端代码开发中相当重要的概念":["62.9"],"并且与this的指向密切相关":["62.9"],"new原理介绍":["62.9"],"关键词的主要作用":["62.9"],"就是指向一个构造函数":["62.9"],"返回一个实例对象":["62.9"],"根据构造函数的情况":["62.9"],"来确定是否可以接受参数的传递":["62.9"],"执行过程":["62.9"],"创建一个新对象":["62.9"],"将构造函数的作用域赋给新对象":["62.9"],"红宝书":["62.11"],"作用域链的基本概念":["62.12"],"返回一个函数":["62.13"],"是日常开发中经常用到的":["62.14"],"的构造器":["62.16"],"构造器用于创建一个新的数组":["62.16"],"通常推荐使用对象字面量的方式创建一个数组":["62.16"],"arg1":["62.16"],"arg2":["62.16"],"参数长度为0":["62.16"],"或长度大于等于":["62.16"],"的判断":["62.17"],"的方法":["62.18"],"改变自身的方法":["62.18"],"pop":["62.18"],"reverse":["62.18"],"数组的扁平化其实就是讲一个嵌套多层的数组":["62.19"],"array":["62.19","62.23"],"嵌套可以是任何层数":["62.19"],"转化为只有一层的数组":["62.19"],"扁平化实现方法":["62.19"],"普通的递归实现":["62.19"],"通过循环递归的方式":["62.19"],"一项一项地去遍历":["62.19"],"如果每一项还是数组":["62.19"],"那么就继续往下遍历":["62.19"],"利用递归程序的方法":["62.19"],"来实现数组的每一项的连接":["62.19"],"flatten":["62.19"],"arr":["62.19","62.24","67.31","67.32","67.33","67.50","73.77"],"result":["62.19"],"时间复杂度":["62.21"],"比较类排序":["62.23"],"通过比较来决定元素之间的相对次序":["62.23"],"其时间复杂度不能突破":["62.23"],"o":["62.23","67.17"],"nlogn":["62.23"],"因此也成为非线性时间比较类排序":["62.23"],"非比较类排序":["62.23"],"不通过比较来决定元素之间的相对次序":["62.23"],"它可以突破基于比较排序的时间下界":["62.23"],"以线性时间运行":["62.23"],"因此也称为线性时间非比较类排序":["62.23"],"20240117155801276":["62.23"],"冒泡排序":["62.23"],"bubblesort":["62.23"],"const":["62.23","67.55"],"len":["62.23"],"length":["62.23","67.19"],"return":["62.23"],"i":["62.23","65.3"],"j":["62.23"],"temp":["62.23"],"sort":["62.24","67.32"],"方法也可以实现数组的排序":["62.24"],"默认排序顺序是先将元素转换为字符串":["62.24"],"然后再进行排序":["62.24"],"语法是":["62.24"],"comparefunction":["62.24"],"css":["63.1","63.5","63.13","66.2","66.5","76.0","76.4"],"的盒子模型":["63.1"],"的盒子模型有哪些":["63.1"],"height":["63.2","73.82"],"选字符有哪些":["63.3"],"哪些属性可以继承":["63.3"],"选择符":["63.3"],"优先算法如何计算":["63.4"],"优先级比较":["63.4"],"important":["63.4"],"内联样式":["63.4"],"class":["63.6","67.43"],"container":["63.6"],"有哪些值":["63.7"],"说说他们的作用":["63.7"],"描述":["63.7"],"bfc":["63.8","63.9"],"块级格式化上下文":["63.8"],"block":["63.8"],"formatting":["63.8"],"方式一":["63.9"],"触发":["63.9"],"为什么呢":["63.10"],"有几种定位":["63.11"],"分别是根据什么定位的":["63.11"],"static":["63.11"],"没有定位":["63.11"],"fixed":["63.11"],"其中左右两块固定":["63.12"],"200px":["63.12"],"中间自适应宽":["63.12"],"要求先加载中间块":["63.12"],"reset":["63.13"],"sprite":["63.14"],"none":["63.15"],"visibility":["63.15"],"rgba":["63.16"],"共同性":["63.16"],"after":["63.17"],"chrome":["63.18"],"支持小于":["63.18"],"em":["63.19","65.3"],"表单输入框":["63.20"],"一个":["63.21"],"url":["63.21"],"可以响应多端":["63.21"],"什么情况下采用响应式布局":["63.22"],"数据不是特别多":["63.22"],"用户量不是特别大":["63.22"],"纯展示类的项目适合响应式布局":["63.22"],"例如":["63.22","73.54","73.82"],"公司的官网":["63.22"],"块级元素有哪些":["65.1"],"空":["65.1"],"元素有哪些":["65.1"],"行内元素":["65.1"],"link":["65.2"],"b":["65.3"],"strong":["65.3"],"标签的":["65.4"],"jpg":["65.5"],"gif":["65.5"],"这些图片格式解释一下":["65.5"],"header":["65.6"],"footer":["65.6"],"兼容问题":["66.0"],"ios":["66.1","66.3","66.4","66.6"],"系统中元素被触摸时产生的半透明遮罩怎么去掉":["66.2"],"有哪些方式":["67.1"],"数据类型有哪些":["67.2"],"基本类型":["67.2"],"作者在设计":["67.3"],"有什么不同":["67.4"],"比较的是值":["67.4"],"微任务和宏任务":["67.5"],"是单线程的语言":["67.5"],"作用域":["67.6","67.15","79.22"],"除了函数外":["67.6"],"对象":["67.11","73.23"],"对象注意点":["67.11"],"obj1":["67.13"],"foo":["67.16"],"getname":["67.16"],"window":["67.18"],"bytedance":["67.18"],"判断变量是不是数组":["67.20"],"isarray":["67.21"],"原型":["67.23"],"isprototypeof":["67.24"],"constructor":["67.25"],"是干嘛的":["67.26"],"是来截取的":["67.27"],"数组去重":["67.29"],"indexof":["67.31"],"s":["67.35"],"aaaaaaabbbbbbcccccbbbbaaaaaabbbbbcccaaa":["67.35"],"getmost":["67.35"],"str":["67.35"],"操作符具体做了什么":["67.36"],"闭包可以解决什么问题":["67.39"],"闭包的优点":["67.39"],"闭包的缺点":["67.40"],"变量会驻留在内存中":["67.40"],"造成内存损耗问题":["67.40"],"原型可以解决什么问题":["67.41"],"继承有哪些方式":["67.42"],"借用构造函数":["67.45"],"组合式继承":["67.46"],"功能一致":["67.48"],"返回不同":["67.49"],"用":["67.50"],"的情况":["67.50"],"背后的原理是什么":["67.51"],"v8":["67.51"],"引擎":["67.51"],"共同点":["67.52","67.53"],"复制":["67.52"],"浅拷贝":["67.52"],"只复制引用":["67.52"],"而未复制真正的值":["67.52"],"arr1":["67.52"],"sessionstorage":["67.53"],"cookie":["67.53"],"在客户端存放数据":["67.53"],"淘宝无限适配移动端":["67.54"],"布局单位使用":["67.54"],"rem":["67.54"],"没有自身作用域":["67.58"],"解构":["67.62"],"自定义":["67.63"],"指向的问题":["67.64"],"的几种状态":["67.65"],"filter":["67.66"],"生命周期有哪些":["69.2"],"发送请求在":["69.2"],"为什么发送请求不在":["69.3"],"beforecreate":["69.3"],"里":["69.3"],"在created":["69.4"],"加入":["69.8"],"组件传值":["69.11"],"通信":["69.11"],"的方式":["69.11"],"插件":["70.1"],"extension":["72.0"],"examples":["72.0"],"highlighting":["72.1"],"vitepress":["72.1"],"provides":["72.1"],"containers":["72.2"],"input":["72.2"],"md":["72.2"],"info":["72.2"],"is":["72.2"],"an":["72.2"],"check":["72.3"],"png":["73.0"],"安装ide":["73.2"],"鸿蒙应用开发需要使用配套的ide":["73.2"],"huawei":["73.2"],"deveco":["73.2"],"studio":["73.2","73.3"],"配置ide":["73.3"],"安装完成后":["73.3"],"可按以下步骤完成初始化配置":["73.3"],"双击桌面快捷方式":["73.3"],"启动deveco":["73.3"],"创建项目":["73.4"],"下面我们创建第一个鸿蒙应用项目":["73.4"],"模拟器运行":["73.7"],"previewer":["73.7"],"预览器主要用于查看界面ui效果":["73.7"],"如需对项目进行更加深入的测试":["73.7"],"可以使用模拟器运行项目":["73.7"],"初次使用需要先安装模拟器":["73.7"],"安装步骤如下":["73.7"],"真机运行":["73.8"],"使用模拟器运行应用时":["73.8"],"会占用电脑较多的资源":["73.8"],"并且有些功能无法进行测试":["73.8"],"当模拟器不满足要求时":["73.8"],"可选择真机运行":["73.8"],"真机运行的步骤如下":["73.8"],"准备一台装有":["73.8"],"本地运行环境":["73.13"],"除去线上的运行环境":["73.13"],"我们也可以在本地搭建一个":["73.13"],"ts":["73.13","73.46"],"的运行环境":["73.13"],"安装":["73.13"],"在ts中":["73.23"],"特殊语法":["73.27"],"可选参数":["73.27"],"可选参数通过参数名后的":["73.27"],"进行标识":["73.27"],"如以下案例中的":["73.27"],"gender":["73.27"],"参数":["73.27","73.80","73.87","73.96","73.103","73.110","73.121"],"函数声明特殊语法":["73.32"],"静态成员":["73.38"],"继承":["73.39"],"继承是面向对象编程中的重要机制":["73.39"],"允许一个类":["73.39"],"子类或派生类":["73.39"],"访问修饰符":["73.40"],"access":["73.40"],"语法说明":["73.43","73.49","73.53","73.69","73.77"],"接口定义":["73.43"],"接口使用":["73.43"],"interface":["73.43"],"多态":["73.44"],"是面相对象编程中的一个重要概念":["73.44"],"它可以使同一类型的对象具有不同的行为":["73.44"],"下面我们通过一个具体的案例来体会":["73.44"],"这一概念":["73.44"],"首先":["73.44"],"再创建一个":["73.44"],"接口的作用":["73.45"],"在传统的面向对象编程的场景中":["73.45"],"接口主要用于设计和组织代码":["73.45"],"使代码更加容易扩展和维护":["73.45"],"下面举例说明":["73.45"],"假如现在需要实现一个订单支付系统":["73.45"],"按照面向对象编程的习惯":["73.45"],"首先需要定义一个订单类":["73.45"],"order":["73.45"],"如下":["73.45","73.49"],"中的接口的特殊性":["73.46"],"枚举定义":["73.49"],"枚举的定义需使用":["73.49"],"赋值":["73.50"],"在typescript":["73.50"],"枚举实际上是一个对象":["73.50"],"而每个枚举值都是该对象的一个属性":["73.50"],"并且每个属性都有具体的值":["73.50"],"属性值只支持两种类型":["73.50"],"数字或字符串":["73.50"],"默认情况下":["73.50"],"每个属性的值都是数字":["73.50"],"并且从":["73.50"],"开始递增":["73.50"],"避免命名冲突":["73.54"],"若多个模块中具有命名相同的变量":["73.54"],"函数等内容":["73.54"],"将这些内容导入到同一模块下就会出现命名冲突":["73.54"],"在上述案例的基础上":["73.54"],"又增加了一个":["73.54"],"modulec":["73.54"],"内容如下":["73.54"],"默认导入导出":["73.55"],"完整代码":["73.65"],"案例的完整代码见":["73.65"],"demos":["73.65","73.80"],"entry":["73.65","73.80"],"声明组件":["73.67"],"下面通过一个相对简单的案例来系统的学习":["73.67"],"arkts":["73.67","73.82","73.121","73.136"],"声明组件的语法":["73.67"],"案例的最终效果如下":["73.67"],"自定义组件的语法如下图所示":["73.69"],"foreach":["73.77"],"循环渲染的语法如下":["73.77"],"any":["73.77"],"itemgenerator":["73.77"],"item":["73.77"],"index":["73.77"],"keygenerator":["73.77"],"组件的参数类型为":["73.80","73.87"],"resource":["73.80"],"media":["73.80","73.82"],"pixelmap":["73.80"],"相关案例见":["73.80"],"ets":["73.80"],"pages":["73.80"],"component":["73.80"],"parameter":["73.80"],"solution":["73.80"],"imageparameter":["73.80"],"下面对三种参数类型逐一进行介绍":["73.80"],"类型的参数用于通过路径的方式引用图片":["73.80"],"图片尺寸":["73.82"],"图片尺寸可通过":["73.82"],"width":["73.82"],"方法和":["73.82"],"方法进行设置":["73.82","73.90"],"r":["73.82"],"app":["73.82"],"img":["73.82"],"图片缩放":["73.83"],"当图片的原始大小与image组件不同时":["73.83"],"可通过":["73.83","73.123"],"图片插值":["73.84"],"当原图分辨率较低并且需要放大显示时":["73.84"],"text":["73.87"],"字体大小":["73.89"],"字体大小可通过":["73.89"],"字体粗细":["73.90"],"字体粗细可通过":["73.90"],"fontweight":["73.90"],"该方法参数类型为":["73.90"],"字体颜色":["73.91"],"字体颜色可通过":["73.91"],"fontcolor":["73.91"],"最大行数和超长处理":["73.93"],"button":["73.96","77.5"],"组件有两种使用方式":["73.96"],"分别是":["73.96"],"不包含子组件":["73.96"],"包含子组件":["73.96"],"常用事件":["73.100","73.107"],"toggle":["73.103","73.107"],"组件的参数定义如下":["73.103","73.121"],"组件常用的事件为change事件":["73.107"],"焦点事件":["73.118"],"progress":["73.121"],"进度条样式":["73.123"],"style":["73.123"],"调整进度条的样式":["73.123"],"使用说明":["73.128","73.140"],"可使用":["73.128"],"ohos":["73.128"],"概述":["73.136","87.3"],"选择器弹窗用于让用户从一个列表中选择一个具体的值":["73.136"],"内置了多种选择器弹窗":["73.136"],"显示自定义弹窗需要使用":["73.140"],"有些时候":["76.5","85.1"],"global":["76.7"],"传送门":["77.0"],"验证":["77.4"],"请验证":["77.5"],"自定义类型校验validator函数可以返回特定的枚举类型":["77.7"],"h":["77.11"],"在这个挑战中":["77.12","77.15","79.20","81.1","84.1"],"你需要使用":["77.12"],"definecomponent":["77.13"],"ul":["77.16","80.14","80.15"],"全家桶":["79.3","79.11"],"immediate":["79.14"],"在侦听器创建时立即触发回调":["79.14"],"第一次调用时旧值是":["79.14"],"deep":["79.14"],"triggerref":["79.18"],"effectscope":["79.25"],"customref语法":["79.29"],"仅渲染元素和组件一次":["80.6"],"指令":["80.13"],"你需要阻止点击事件的冒泡":["81.1"],"stop":["81.2"],"修饰符":["81.2"],"在监听键盘事件时":["81.4"],"我们经常需要检查特定的按键":["81.4"],"允许为":["81.4"],"on":["81.4"],"添加按键修饰符让即使":["81.5"],"alt":["81.5"],"dom":["82.0"],"api":["84.0","87.1","87.3"],"你将使用":["84.1"],"toraw":["84.3"],"options":["87.0"],"的弊端":["87.1"],"中一个新的配置项":["87.3"],"值是一个函数":["87.3"],"它是":["87.3"],"composition":["87.3"],"表演的舞台":["87.3"],"组件中所用到的":["87.3"],"创建":["87.4","87.5"],"基本类型的响应式数据":["87.4"],"作用":["87.4","87.8"],"reactive":["87.5","87.7"],"对比":["87.7"],"宏观角度看":["87.7"],"用来定义":["87.7"],"基本类型数据":["87.7"],"torefs":["87.8"],"toref":["87.8"],"将一个响应式对象中的每一个属性":["87.8"],"核心语法":["88.0"]},{"0":["0.30","0.31","0.65","0.86","58.30","58.31","58.65","58.86","62.16","62.19","62.24","67.35","73.8"],"1":["0.31","0.32","0.63","0.68","0.73","0.79","0.84","0.86","0.90","31.0","58.31","58.32","58.63","58.68","58.73","58.79","58.84","58.86","58.90","62.24","63.8","63.14","63.17","65.6","67.11","67.16","67.19","67.30","67.33","67.36","67.39","67.50","67.53","73.0","73.12","73.48","73.50","73.52","73.61","73.73","73.76","73.78","73.79","73.81","73.98","73.112","73.117","73.127","73.130","73.133","73.139"],"2":["0.60","0.79","0.86","7.2","9.0","10.2","11.2","12.2","21.2","22.2","27.2","28.2","28.3","53.0","58.60","58.79","58.86","59.0","62.5","62.13","63.22","67.5","67.6","67.31","67.32","67.41","67.50","67.52","67.58","69.12","69.16","73.85","73.86","73.88","73.99","73.106","73.124","73.137","87.7"],"3":["0.5","0.12","0.82","0.83","10.3","11.3","34.3","57.1","58.5","58.12","58.82","58.83","62.9","67.31","67.32","67.33","67.52","73.5","73.17","73.20","73.21","73.30","73.31","73.56","73.57","73.59","73.63","73.64","73.66","73.68","73.71","73.72","73.75"],"4":["0.83","58.83","62.9","67.31","67.32","73.8","73.22","73.30","73.61","73.68","73.74","73.101","73.102","73.104","73.105","73.115","73.137"],"5":["1.5","67.31","67.32","73.108","73.109","73.111","73.113","73.116"],"6":["0.39","58.39","62.3","67.50","73.42","73.119","73.120","73.122"],"7":["62.3","62.6","73.48","73.125","73.126","73.127","73.129","73.131","73.132","73.134","73.135","73.138"],"8":["73.52"],"10":["67.17","71.0"],"11":["0.34","58.34"],"12":["71.0"],"13":["67.33"],"18":["67.33"],"20":["0.65","58.65","67.44","67.46"],"22":["71.0"],"26":["0.21","58.21"],"27":["67.33"],"32":["0.71","58.71"],"33":["67.50"],"36":["0.21","58.21"],"54":["67.50"],"80":["0.59","58.59"],"100":["73.90"],"134":["0.32","58.32"],"246":["67.50"],"262":["0.8","56.3","58.8"],"693":["0.32","58.32"],"797":["0.32","58.32"],"862":["0.32","58.32"],"900":["73.90"],"无论是变量":["0.2","58.2"],"函数名还是操作符":["0.2","58.2"],"函数":["0.3","58.3"],"属性或者函数参数的名称":["0.3","58.3"],"标识符可以由一个或多个下列字符组成":["0.3","58.3"],"c":["0.4","28.3","58.4","67.8","73.54"],"语言风格的注释":["0.4","58.4"],"javascript":["0.5","0.40","57.0","58.5","58.40"],"解析和执行模型":["0.5","58.5"],"typeof":["0.7","0.26","6.3","58.7","58.26","62.6"],"case":["0.7","58.7"],"else":["0.7","55.4","58.7","62.19","62.23"],"instanceof":["0.7","58.7"],"interface":["0.10","58.10"],"个关键字可以声明变量":["0.12","58.12"],"var":["0.12","0.18","58.12","58.18","67.8","67.21","67.22","67.23","67.25","67.30","67.40"],"操作符":["0.13","58.13"],"注意":["0.13","0.25","0.44","58.13","58.25","58.44","73.80"],"message":["0.14","25.0","58.14","73.28"],"hi":["0.14","58.14"],"局部变量":["0.14","58.14"],"console":["0.14","0.15","58.14","58.15","62.5","62.19","67.12","73.45","73.50","73.54"],"log":["0.14","0.15","58.14","58.15","62.19","73.45","73.50","73.54"],"出错":["0.14","58.14"],"uncaught":["0.14","58.14"],"referenceerror":["0.14","58.14"],"js":["0.15","0.16","0.17","0.21","0.33","0.34","0.44","0.45","0.66","13.0","54.3","55.1","55.4","55.5","58.15","58.16","58.17","58.21","58.33","58.34","58.44","58.45","58.66","62.3","62.6","67.3","67.22","67.23","67.24","67.27","67.40","67.54","67.57","67.61","67.62","77.1","80.4"],"function":["0.15","0.41","6.3","34.2","55.1","58.15","58.41","62.6","67.9","67.18","73.27","73.54"],"foo":["0.15","58.15"],"age":["0.15","0.21","58.15","58.21","67.43","67.44","67.45","67.46","73.27","73.44"],"声明的范围是块作用域":["0.16","58.16"],"而":["0.16","58.16"],"声明的范围是函数作用域":["0.16","58.16"],"if":["0.16","6.3","58.16","62.2","62.6","62.19","67.9","69.13","73.27"],"true":["0.16","0.27","0.74","0.75","0.88","58.16","58.27","58.74","58.75","58.88","60.3","62.2"],"的另一个重要区别":["0.17","58.17"],"就是":["0.17","58.17"],"声明的变量不会在作用域中被提升":["0.17","58.17"],"name":["0.17","58.17","73.27","73.44"],"关键字不同":["0.18","58.18"],"使用":["0.18","58.18"],"let":["0.18","0.25","0.44","0.45","0.90","31.2","58.18","58.25","58.44","58.45","58.90","62.2","62.5","62.6","62.8","73.32","73.46","87.4"],"条件声明":["0.19","58.19"],"循环定义的迭代变量会渗透到循环体外部":["0.20","58.20"],"改用":["0.20","58.20"],"之后":["0.20","58.20"],"这个问题就消失了":["0.20","58.20"],"因为迭代变量的作用域仅限于":["0.20","58.20"],"声明的变量会导致运行时错误":["0.21","58.21"],"typeerror":["0.21","58.21"],"给常量赋值":["0.21","58.21"],"不使用":["0.22","58.22"],"有两大数据类型":["0.23","58.23"],"基本数据类型":["0.23","58.23"],"所以需要一种手段来确定任意变量的数据类型":["0.24","58.24"],"操作符就是为此而生的":["0.24","58.24"],"对一个值使用":["0.24","58.24"],"或":["0.25","58.25","60.7","81.5"],"声明了变量但没有初始化时":["0.25","58.25"],"就相当于给变量赋予了":["0.25","58.25"],"值":["0.25","0.33","58.25","58.33"],"包含":["0.25","58.25"],"值表示一个空对象指针":["0.26","58.26"],"这也是给":["0.26","58.26"],"传一个":["0.26","58.26"],"会返回":["0.26","58.26"],"object":["0.26","6.3","21.3","36.3","39.0","58.26","62.2","62.6","73.23"],"ecmascript":["0.27","0.64","0.77","0.78","56.1","58.27","58.64","58.77","58.78"],"中使用最频繁的类型之一":["0.27","58.27"],"有两个字面值":["0.27","58.27"],"的值":["0.28","58.28"],"false":["0.28","0.74","0.75","0.86","0.88","58.28","58.74","58.75","58.86","58.88","62.2"],"对于八进制字面量":["0.30","58.30"],"第一个数字必须是零":["0.30","58.30"],"floatnumber2":["0.31","58.31"],"floatnumber3":["0.31","58.31"],"max":["0.32","36.2","58.32","63.21"],"相除会返回":["0.33","58.33"],"分子是非":["0.33","58.33"],"分母是有符号或无符号的":["0.33","58.33"],"则会返回":["0.33","58.33"],"infinity":["0.33","0.78","0.82","0.83","58.33","58.78","58.82","58.83","62.6"],"或者":["0.33","58.33","81.4"],"011":["0.34","58.34"],"忽略前面的":["0.34","58.34"],"如果字符串包含有效的浮点值格式如":["0.34","58.34"],"则会转换为相应的浮点值":["0.34","58.34"],"同样忽略前面的":["0.34","58.34"],"如果字符串包含有效的十六进制格式如":["0.34","58.34"],"0xf":["0.34","58.34"],"则会转换为与该十六进制值对应的十进制整数值":["0.34","58.34"],"如果是空字符串":["0.34","58.34","62.3"],"不包含字符":["0.34","58.34"],"则返回":["0.34","0.78","58.34","58.78"],"如果字符串包含出上述情况之外的其他字符":["0.34","58.34"],"对象":["0.34","58.34","87.8"],"调用":["0.34","58.34"],"valueof":["0.34","58.34","62.3"],"方法":["0.34","58.34","62.3","87.3"],"并按照上述规则转换返回的值":["0.34","58.34"],"如果转换结果为":["0.34","58.34"],"则调用":["0.34","58.34"],"tostring":["0.34","58.34"],"在按照转换字符串的规则转换":["0.34","58.34"],"字符串":["0.35","0.63","58.35","58.63"],"制表":["0.36","58.36"],"b":["0.36","58.36","62.5","62.6","62.24","67.8","67.14","67.17"],"退格":["0.36","58.36"],"r":["0.36","58.36"],"回车":["0.36","58.36"],"f":["0.36","58.36"],"换页":["0.36","58.36"],"意思就是一旦创建":["0.37","58.37"],"一个是":["0.38","58.38"],"新增了模板字面量定义字符串的能力":["0.39","58.39"],"技术上讲":["0.40","58.40"],"模板字面量不是字符串":["0.40","58.40"],"而是一种特殊的":["0.40","58.40"],"tag":["0.41","19.2","58.41"],"如换行符或":["0.42","58.42"],"unicode":["0.42","58.42"],"符号":["0.43","58.43"],"操作符对符号返回":["0.44","58.44"],"发现不存在对应的符号":["0.45","58.45"],"于是就会生成一个新符号实例并添加到注册表中":["0.45","58.45"],"后续使用相同字符串的调用同样会检查注册表":["0.45","58.45"],"发现存在与该字符串对应的符号":["0.45","58.45"],"然后就会返回该符号实例":["0.45","58.45"],"fooglobalsymbol":["0.45","58.45"],"都可以使用符号":["0.46","58.46"],"symbol":["0.47","58.47","62.3"],"用于暴露语言内部行为":["0.47","58.47"],"开发者":["0.47","58.47"],"可以直接访问":["0.47","58.47"],"重写或模拟这些行为":["0.47","58.47"],"constructor":["0.60","58.60","62.9","67.43","73.45"],"用于创建当前对象的函数":["0.60","58.60"],"hasownproperty":["0.60","58.60"],"propertyname":["0.60","58.60"],"unary":["0.62","58.62"],"意思就是不限于整数":["0.63","58.63"],"布尔值":["0.63","58.63"],"浮点值":["0.63","58.63"],"甚至对象都可以":["0.63","58.63"],"递增和递减操作符遵循如下规则":["0.63","58.63"],"中跟在高中数学中的用途一样":["0.64","58.64"],"第一位":["0.65","58.65"],"称为第":["0.65","58.65"],"位":["0.65","58.65"],"表示":["0.65","0.69","0.70","0.89","58.65","58.69","58.70","58.89"],"第二位表示":["0.65","58.65"],"它的作用是返回数值的一补数":["0.66","58.66"],"有两个操作数":["0.67","58.67"],"本质上":["0.67","58.67"],"按位与就是将两个数的每一个位对齐":["0.67","58.67"],"第一个数值的位":["0.68","58.68"],"第二个数值的位":["0.68","58.68"],"结果":["0.68","58.68"],"会将数值的所有":["0.71","58.71"],"位都向右移":["0.71","58.71"],"尔值":["0.73","58.73"],"无论应用到的是什么数据类型":["0.73","58.73"],"逻辑非操作符首先将操作数转换为布尔值":["0.73","58.73"],"然后再对其取反":["0.73","58.73"],"逻辑非操作符会遵循如下规则":["0.73","58.73"],"如果操作数是对象":["0.73","58.73"],"定义了":["0.76","58.76"],"则执行常规的乘法运算":["0.77","58.77"],"即两个正值相乘是正值":["0.77","58.77"],"两个负值相乘也是正值":["0.77","58.77"],"正负符号不同的值相乘得到负值":["0.77","58.77"],"如果":["0.77","0.78","58.77","58.78","62.24"],"不能表示乘积":["0.77","58.77"],"即两个正值相除是正值":["0.78","58.78"],"两个负值相除也是正值":["0.78","58.78"],"符号不同的值相除得到负值":["0.78","58.78"],"不能表示商":["0.78","58.78"],"如果操作数是数值":["0.79","58.79"],"则执行常规除法运算":["0.79","58.79"],"返回余数":["0.79","58.79"],"如果被除数是无限值":["0.79","58.79"],"新增了指数操作符":["0.80","58.80"],"math":["0.80","58.80","62.23"],"pow":["0.80","58.80"],"即加法和减法操作符":["0.81","58.81"],"如果是":["0.82","0.83","58.82","58.83","62.2"],"加":["0.82","58.82"],"减":["0.83","58.83"],"和大于等于":["0.84","58.84"],"执行规则":["0.84","58.84"],"如果操作数都是数值":["0.84","58.84"],"它们在比较之前执行转换":["0.85","58.85"],"再确定操作数是否相等":["0.86","58.86"],"转换规则":["0.86","58.86"],"如果任一操作数是布尔值":["0.86","58.86"],"则将其转换为数值再比较是否相等":["0.86","58.86"],"转换为":["0.86","58.86"],"如果一个操作数是字符串":["0.86","58.86"],"另一个操作数是数值":["0.86","58.86"],"只不过它们在比较相等时不转换操作数":["0.87","58.87"],"全等操作符由":["0.87","58.87"],"value":["0.88","9.0","29.3","58.88","73.110","73.121","87.7"],"将右手边的值赋给左手边的变量":["0.89","58.89"],"num1":["0.90","58.90"],"p98":["0.91","58.91"],"谈谈你对":["1.0","2.0","47.0"],"vue":["1.0","2.1","4.0","7.0","8.0","14.0","19.0","20.1","21.0","21.1","22.0","27.0","27.1","28.0","29.1","34.0","35.1","36.4","43.0","46.0","54.0","55.1","61.3","61.4","76.5","81.1"],"早在":["1.1"],"jq的时代":["1.1"],"编写的代码都是命令式的":["1.1"],"命令式框架重要特点就是关注过程":["1.1"],"声明式框架更加关注结果":["1.1"],"命令式的代码封装到了":["1.1"],"vuejs":["1.1","53.0"],"中":["1.1","47.4","60.6","87.3"],"就要知道另一个东西叫":["1.2"],"mvc":["1.2"],"为什么要有这些模式呢":["1.2"],"目的":["1.2"],"职责划分":["1.2"],"采用虚拟":["1.3"],"dom":["1.3","3.1","5.0","55.3","69.4"],"传统更新页面":["1.3"],"区分编译":["1.4"],"打包":["1.4"],"时和运行":["1.4"],"application":["2.1"],"单页应用":["2.1"],"默认情况下我们编写":["2.1"],"react":["2.1"],"都只有一个":["2.1"],"html":["2.1","25.0","56.5","63.12","81.4"],"spa":["2.2"],"多页面应用":["2.2"],"mpa":["2.2"],"组成":["2.2","56.5"],"一个主页面和页面组件":["2.2"],"静态页面预渲染":["2.3"],"static":["2.3"],"site":["2.3"],"vue为什么需要虚拟dom":["3.0"],"来对真实的":["3.1"],"进行抽象":["3.1"],"也就是现在大家所熟知的":["3.1"],"vdom":["3.2","3.3"],"是如何生成的":["3.2"],"在":["3.2","6.2","50.0","53.0"],"如何做":["3.3"],"diff":["3.3","19.1"],"挂载过程结束后":["3.3"],"组件化的理解":["4.0"],"webcomponent":["4.0"],"watcher":["4.1","11.0"],"effect":["4.1"],"通过数据劫持可以精确探测数据变化":["5.0"],"为什么还要虚拟":["5.0"],"请说一下你对响应式的理解":["6.0"],"如何实现响应式数据":["6.1"],"数组和对象类型当值变化时如何劫持到":["6.1"],"的时候使用":["6.2"],"defineproperty":["6.2"],"observer":["6.3","18.1"],"data":["6.3","15.0","18.1","22.1","31.1","31.2","52.0"],"null":["6.3","9.0","36.3","60.7","62.6","67.40"],"return":["6.3","28.3","31.2","62.2","62.8","62.19","67.16","67.19","79.29"],"for":["6.3","17.0","31.1","36.3","62.6","67.35","77.16","80.14","80.15"],"实现数组劫持":["7.1"],"数组考虑性能的原因没有用":["7.1"],"每个属性都拥有自己的":["8.1"],"dep":["8.1"],"属性":["8.1","73.40"],"vue3依赖收集":["8.2"],"vue3":["8.2","55.0"],"production":["9.0"],"isundef":["9.0"],"isprimitive":["9.0"],"warn":["9.0"],"cannot":["9.0"],"reactive":["9.0"],"property":["9.0"],"on":["9.0"],"undefined":["9.0","62.3","67.2","73.27"],"or":["9.0"],"primitive":["9.0"],"如果是数组":["9.0"],"v":["10.0","26.0","26.1","29.2","31.1","69.13","77.16","80.11","80.12","80.14","80.15"],"基本概念":["10.1","12.1"],"效果展示":["10.2"],"computed":["11.0"],"vue2中有三种":["11.0"],"watch":["11.2","36.3"],"和":["12.0","12.1","56.1","63.2","66.6","67.49","67.51","69.3","69.13","73.23","73.118","87.0"],"ref":["12.1","87.8"],"立即运行一个函数":["13.0"],"然后被动地追踪它的依赖":["13.0"],"当这些依赖改变时重新执行该函数":["13.0"],"侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数":["13.0"],"const":["13.0","21.3","36.3","67.57","67.59","67.60","73.54"],"中含有模板编译的功能":["14.0"],"它的主要作用是将用户编写的":["14.0"],"内部会进行初始化操作":["15.0"],"内部会初始化组件绑定的事件":["15.0"],"初始化组件的父子关系":["15.0"],"parent":["15.0","67.43","67.44","67.45","67.46"],"children":["15.0"],"root":["15.0"],"初始化响应式数据":["15.0"],"observable":["16.0"],"你有了解过吗":["16.0"],"哪个优先级更高":["17.0"],"生命周期有哪些":["18.0"],"销毁前后":["18.1"],"beforecreate":["18.1","18.2"],"初始化父子关系及事件":["18.1"],"数据观测":["18.1"],"之前被调用":["18.1"],"用此方法一般编写插件的时候会用到":["18.1"],"created":["18.1","18.2","69.2","69.3","69.9"],"描述":["18.2"],"组件实例被创建之初":["18.2"],"组件实例已经完全创建":["18.2"],"概念":["19.1","21.1","27.1","35.1","36.1","47.2"],"key":["19.2","20.2","36.3","60.4","60.6","62.6","67.14","81.4"],"相同节点比较属性":["19.2"],"并复用老节点":["19.2"],"将老的虚拟":["19.2"],"请说明":["20.0"],"的特殊":["20.1"],"attribute":["20.1","73.82"],"主要用在":["20.1"],"的作用":["20.2"],"安装":["21.1"],"插件的功能":["21.2"],"插件缓存":["21.3"],"installedplugins":["21.3"],"this":["21.3","26.2","28.3","67.15","67.16","67.18","67.19","67.43","67.44","67.45","67.46","67.48","72.0","73.45"],"构造器":["22.1"],"创建一个":["22.1"],"子类":["22.1"],"参数是一个包含组件选项的对象":["22.1"],"选项是特例":["22.1"],"分析":["22.2"],"不会产生数据污染的情况":["23.0"],"组件实例对象":["23.0"],"必须是函数":["23.0"],"目的是为了防止多个组件实例对象之间共用一个":["23.0"],"产生数据污染":["23.0"],"所以需要通过工厂函数返回全新的":["23.0"],"作为组件的数据源":["23.0"],"无状态":["24.0"],"无生命周期":["24.0"],"无":["24.0"],"我们也可以理解成纯函数":["25.0"],"filtera":["25.0"],"arg1":["25.0"],"arg2":["25.0"],"filter2":["25.0"],"once":["26.1"],"will":["26.2"],"never":["26.2"],"change":["26.2","73.107"],"msg":["26.2","79.3","79.4"],"有子元素":["26.2"],"div":["26.2","65.1","79.3","79.6","79.7","79.9","79.10","79.12","79.13","81.2"],"mixin":["27.1"],"mixin合并策略":["27.3"],"核心就是":["27.3"],"什么是插槽":["28.1"],"编译后的结果with":["28.3"],"t":["28.3"],"my":["28.3"],"h1":["28.3","79.3","79.4"],"标题":["28.3"],"说说你对双向绑定的理解":["29.0"],"双向绑定的概念":["29.1"],"表单元素的":["29.2"],"model":["29.2","80.16"],"的":["29.3","63.19"],"prop":["29.3","30.0","77.5"],"和名为":["29.3"],"input":["29.3","65.1"],"的事件":["29.3"],"对于组件而言":["29.3"],"就是value":["29.3"],"在有些情况下":["30.0"],"我们可能需要对一个":["30.0"],"进行":["30.0"],"双向绑定":["30.0"],"这时可以使用":["30.0","73.84"],"item":["31.0","31.1","55.5","77.16"],"根":["31.0"],"in":["31.1","36.3","55.5","62.6","77.16"],"resub":["31.1"],"renderchildren":["31.2"],"属性有哪些好处和作用":["32.0"],"增加":["32.0"],"选择会在":["32.0"],"有什么应用场景":["33.0"],"表单修饰符":["33.0"],"lazy":["33.0"],"异步组件概念":["34.1"],"component":["34.2","36.2","73.65","73.82"],"resolve":["34.2"],"reject":["34.2"],"settimeout":["34.2"],"render":["34.2","55.1"],"h":["34.2","77.12","77.13"],"说说你对":["35.0"],"nexttick":["35.1","69.15"],"keep":["36.0","69.8"],"include":["36.2"],"whitelist":["36.2"],"exclude":["36.2"],"blacklist":["36.2"],"count":["36.2","78.5"],"create":["36.3","73.4"],"缓存列表":["36.3"],"keys":["36.3"],"destroyed":["36.3"],"alive销毁时":["36.3"],"删除所有缓存":["36.3"],"prunecacheentry":["36.3"],"mounted":["36.3","69.2"],"监控缓存列表":["36.3"],"beforerouteenter":["36.4"],"在与":["36.4"],"router":["36.4"],"的项目":["36.4"],"自定义指令的使用场景":["37.0"],"指令的概念":["37.1"],"bind":["37.2"],"只调用一次":["37.2"],"指令第一次绑定到元素时调用":["37.2"],"在这里可以进行一次性的初始化设置":["37.2"],"has":["37.3"],"拖拽指令":["37.3"],"draggable":["37.3"],"mousemove":["37.3"],"mouseup":["37.3"],"mousedown":["37.3"],"dragenter":["37.3"],"dragover":["37.3"],"vuex":["38.0","47.4","48.0","49.0"],"中的":["38.0"],"store":["38.0","47.4","51.0","60.4","60.8"],"工厂模式":["38.0"],"传入参数即可创建实例":["38.0"],"通过":["39.0"],"freeze":["39.0"],"方法冻结属性":["39.0"],"使用数据时":["39.0"],"减少入口文件体积大小":["40.0"],"优化体验骨架屏":["40.0"],"抽离公共代码":["40.0"],"采用":["40.0"],"splitchunks":["40.0"],"这个是浏览器的行为":["41.0"],"协议":["41.0"],"主机名":["41.0"],"端口的不同都会导致跨域问题":["41.0"],"项目中有封装过":["42.0"],"axios":["42.0"],"吗":["42.0"],"token":["43.1"],"前端将":["43.1"],"保存到本地":["43.1"],"作为用户登录的凭证":["43.1"],"导航被触发":["44.0"],"在失活的组件调用":["44.0"],"beforerouteleave守卫":["44.0"],"调用全局的":["44.0"],"beforeeach":["44.0"],"有三种模式":["45.0"],"hash":["45.0"],"history":["45.0"],"状态修改":["47.3"],"组件中":["47.3"],"原理":["47.5","69.15"],"对于":["47.5"],"如何监听":["48.0"],"的数据丢失怎么解决":["49.0"],"的区别":["50.0","63.15","67.66"],"中可以处理异步逻辑":["50.0"],"在什么情况下会使用":["51.0"],"使用单一状态树":["51.0"],"应用的所有状态会集中到一个比较大的对象":["51.0"],"当应用变得非常复杂时":["51.0"],"对象就有可能变得相当臃肿":["51.0"],"vue2":["52.0","69.2"],"中采用的是":["52.0"],"optionsapi":["52.0"],"用户提供的":["52.0"],"props":["52.0"],"methods":["52.0"],"中无法单独使用的模块":["53.0"],"需要引入完整的":["53.0"],"例如只想使用响应式部分":["53.0"],"但是需要引入完整的":["53.0"],"errorcapture":["54.1"],"钩子":["54.1"],"可以捕获来自后代组件的错误":["54.1"],"全局设置错误处理":["54.2"],"如果在组件渲染时出现运行错误":["54.2"],"错误将会被传递至全局":["54.2"],"instance":["54.3"],"interceptors":["54.3"],"response":["54.3"],"此":["55.1"],"template":["55.1","61.3","76.2","77.2","77.6","77.9","77.10","78.9","78.10","79.9","79.10","79.12","79.13","79.16","79.17","79.23","79.24","79.27","79.28","80.1","80.2","80.5","80.8","80.9","80.17","80.18","81.2","82.1","82.2","84.2","85.2","86.1"],"经过模板编译会编译成如下代码":["55.1"],"import":["55.1","55.4","55.5","65.2"],"createelementvnode":["55.1"],"as":["55.1","55.4","55.5"],"todisplaystring":["55.1","55.4"],"openblock":["55.1"],"createelementblock":["55.1"],"from":["55.1","61.4","77.13"],"export":["55.1","73.53","73.54"],"ctx":["55.1"],"只有":["55.2"],"block":["55.2","63.7"],"不就挺好的么":["55.2"],"问题出在":["55.2"],"在收集动态节点时是忽略虚拟":["55.2"],"fruits":["55.5"],"renderlist":["55.5"],"基本上是同义词":["56.1"],"但是":["56.1"],"ecma":["56.3"],"document":["56.4"],"前者提供了一中映射":["56.5"],"xml":["56.5"],"文档":["56.5"],"从而方便访问和操作文档任意部分的方式":["56.5"],"后者扩展了前者并增加了特定于":["56.5"],"api":["56.6","62.2","79.22","84.1","87.0"],"用于支持访问和操作浏览器的窗口":["56.6"],"主要针对浏览器窗口和子窗口":["56.6"],"frame":["56.6"],"属性指定的代码字符集":["57.1"],"这个属性很少使用":["57.1"],"因为大多数浏览器不在乎它的值":["57.1"],"crossorigin":["57.1"],"配置相关请求的":["57.1"],"cros":["57.1"],"跨域资源共享":["57.1"],"设置":["57.1","73.8"],"默认不适用":["57.1"],"annoymous":["57.1"],"配置文件请求不必设置凭据标志":["57.1"],"use":["57.1"],"credentials":["57.1"],"d":["59.0"],"ts":["59.0","60.2","61.5"],"文件":["59.0"],"persistedstate":["60.1"],"pnpm":["60.1"],"中添加":["60.2"],"typescript":["60.2","73.39","73.44","73.50","73.110","73.123"],"persist":["60.3"],"来开启数据持久化":["60.3"],"id":["60.4","60.5","63.3","63.4","73.43","73.44"],"作为":["60.4"],"storage":["60.4","60.5","60.9","60.10"],"默认的":["60.4"],"用于引用":["60.5"],"中的数据":["60.5"],"必须具有":["60.6","60.8"],"getitem":["60.6"],"中哪些数据需要被持久化":["60.7"],"表示不持久化任何状态":["60.7"],"表示持久化整个":["60.7"],"该配置能够指定持久化时所使用的序列化方法":["60.8"],"以及恢复":["60.8"],"时的反序列化方法":["60.8"],"另外":["60.8"],"serialize":["60.8"],"该":["60.9","60.10"],"hook":["60.9","60.10"],"将在从":["60.9","60.10"],"中恢复数据之前触发":["60.9"],"并且它可以访问整个":["60.9","60.10"],"中恢复数据之后触发":["60.10"],"boolean":["60.11","62.1","67.2","73.103"],"默认值":["60.11"],"npm":["61.1"],"i":["61.1","62.19","67.35"],"可以填写多个":["61.2"],"img":["61.2","65.1","66.5","73.3","73.4","73.7","73.36","73.69","73.84"],"src":["61.2","73.67","73.82"],"https":["61.2","73.13"],"gitee":["61.2"],"com":["61.2","73.13"],"xuchp":["61.2"],"typora":["61.2"],"组件":["61.3"],"app":["61.4","79.21"],"main":["61.5","73.67","73.82"],"string":["62.1","67.4","73.27","73.44","73.77","73.82","73.89","73.90","73.91","73.96","73.123"],"number":["62.1","67.2","67.4","67.28","73.19","73.27","73.32","73.44","73.45","73.82","73.89","73.90","73.91","73.121","73.123"],"直接返回":["62.2"],"getprototypeof":["62.2"],"是":["62.2","81.4"],"自带的":["62.2"],"能够拿到参数的原型对象":["62.2"],"proto":["62.2"],"while":["62.2"],"循环往下寻找":["62.2"],"直到找到相同的原型对象":["62.2"],"nan":["62.3","62.6"],"如果是字符串":["62.3"],"如果字符串中只包含了数字":["62.3"],"则将其转换为十进制":["62.3"],"如果字符串中包含了有效的浮点格式":["62.3"],"将其转换为浮点数值":["62.3"],"将其转换为":["62.3"],"如果不是以上格式的字符串":["62.3"],"均返回":["62.3"],"抛出错误":["62.3"],"如果是对象并且部署了":["62.3"],"synbol":["62.3"],"toprimitive":["62.3"],"那么调用此方法":["62.3"],"否则调用对象的":["62.3"],"0111":["62.3"],"对象的合并等多个用途":["62.5"],"其中一个用途就是可以进行浅拷贝":["62.5"],"的语法为":["62.5"],"target":["62.5","67.63"],"source":["62.5","67.63"],"a":["62.5","62.6","62.24","66.2","67.9","67.10","67.13","67.17","67.18","67.52","67.60","72.2"],"infinity以及":["62.6"],"序列化的结果会变成":["62.6"],"无法拷贝对象的循环应用":["62.6"],"即对象成环":["62.6"],"obj":["62.6","67.35","67.59"],"基础版":["62.6"],"手写递归实现":["62.6"],"obj1":["62.6","67.52"],"deepclone":["62.6"],"cloneobj":["62.6"],"遍历":["62.6"],"使用这种方式我们可以更好地复用以前的开发代码":["62.7"],"当一个发生变化的时候":["62.8"],"另一个也随之进行变化":["62.8"],"二":["62.8"],"构造函数继承":["62.8"],"借助call":["62.8"],"getname":["62.8"],"call":["62.8","67.49"],"child":["62.8","79.1","79.2","83.1","83.2"],"没问题":["62.8"],"会报错":["62.8"],"20240117094152565":["62.8"],"三":["62.8"],"组合继承":["62.8"],"前两中组合":["62.8"],"parent3":["62.8"],"this指向新对象":["62.9"],"执行构造函数中的代码":["62.9"],"为这个新对象添加属性":["62.9"],"返回新对象":["62.9"],"关键词执行之后总是会返回一个对象":["62.9"],"要么是实例对象":["62.9"],"要么是return语句指定的对象":["62.9"],"被调用后大致做了哪几件事情":["62.9"],"让实例可以访问到私有属性":["62.9"],"让实例可以访问构造函数原型":["62.9"],"prototype":["62.9","67.34"],"所在原型链上的属性":["62.9"],"的作用域":["62.10"],"闭包是指有权访问另外一个函数作用域中的变量的函数":["62.11"],"mdn":["62.11"],"当访问一个变量时":["62.12"],"在定时器":["62.13"],"时间监听":["62.13"],"对象中的方法":["62.14"],"parse":["62.14"],"传入的参数将按照顺序依次成为新数组的第":["62.16"],"至第":["62.16"],"n":["62.16","67.58","69.6"],"项":["62.16"],"参数长度为":["62.16"],"返回空数组":["62.16"],"len":["62.16"],"当":["62.16"],"shift":["62.18","81.5"],"sort":["62.18"],"splice":["62.18","62.23","67.26"],"unshift":["62.18"],"以及两个":["62.18"],"length":["62.19","67.35"],"isarray":["62.19"],"concat":["62.19"],"push":["62.19","62.23"],"说的更多地是通过":["62.21"],"o":["62.21"],"快速排序":["62.23"],"通过一趟排序":["62.23"],"将待排记录分割成独立的两部分":["62.23"],"其中一部分记录的关键字均比另一部分的关键字小":["62.23"],"则可以分别对这两部分记录继续进行排序":["62.23"],"以达到整个序列有序":["62.23"],"quicksort":["62.23","67.51"],"quick":["62.23"],"arr":["62.23","67.25","67.30"],"index":["62.23"],"floor":["62.23"],"pivot":["62.23"],"left":["62.23"],"right":["62.23"],"小于":["62.24"],"那么":["62.24"],"标准盒子模型":["63.1"],"ie":["63.1"],"盒子模型":["63.1"],"盒子模型的区别":["63.1"],"通配":["63.3","63.4"],"选择器":["63.3"],"类选择器":["63.3"],"标签选择器":["63.3"],"class":["63.4","73.34","73.36","73.39","73.44","73.45","73.136"],"标签":["63.4"],"画一个三角形":["63.5"],"用边框画":["63.5"],"方式一":["63.6"],"css":["63.6","63.21","66.4","76.3","76.7"],"width":["63.6"],"none":["63.7"],"此元素不会被显示":["63.7"],"此元素将显示为块元素":["63.7"],"的理解":["63.8"],"就是页面上一个隔离的独立容器":["63.8"],"容器里面的子元素不会影响到外面的元素":["63.8"],"overflow":["63.9"],"hidden":["63.9","63.15"],"方式二":["63.9"],"偶数":["63.10"],"让文字在浏览器上表现的更好看":["63.10"],"固定定位":["63.11"],"相对于浏览器窗口进行定位":["63.11"],"relative":["63.11"],"相对定位":["63.11"],"相对于自身定位":["63.11"],"不脱离文档流":["63.11"],"请写出结构及样式":["63.12"],"双飞翼布局":["63.12"],"是一个":["63.13"],"有什么优缺点":["63.14"],"区别":["63.15","63.16","63.19","65.3","67.53","87.7"],"实现透明效果":["63.16"],"中双冒号和单冒号有什么区别":["63.17"],"解释一下这两个伪元素的作用":["63.17"],"12px":["63.18"],"的文字":["63.18"],"placeholder":["63.20"],"语法结构":["63.21"],"media":["63.21"],"only":["63.21"],"screen":["63.21"],"and":["63.21"],"专题页面":["63.22"],"特别追求性能的项目":["63.22"],"不太适合响应式":["63.22"],"因为如果添加了很多的响应式":["63.22"],"会造成加载速度变慢":["63.22"],"pc":["63.22"],"span":["65.1","79.6","79.7"],"块级元素":["65.1"],"有什么区别":["65.2","65.4","69.3"],"区别一":["65.2","65.4","67.55","67.66"],"定义":["65.3"],"概括了网站信息":["65.3"],"可以告诉搜索引擎或者用户关于这个网站的内容主题是什么":["65.3"],"文章主题内容":["65.3"],"告诉蜘蛛我们的网站内容最主要是什么":["65.3"],"alt":["65.4"],"分别什么时候用":["65.5"],"无损压缩":["65.5"],"尺寸体积要比":["65.5"],"section":["65.6"],"等":["65.6"],"键盘首字母自动大小写":["66.1"],"button":["66.2","80.11","80.12","81.5"],"长按时不触发系统的菜单":["66.3"],"长按触发系统菜单":["66.4"],"android":["66.6"],"defer":["67.1"],"例如":["67.1","73.46","73.49","81.4"],"script":["67.1"],"时先设计的":["67.3"],"原因":["67.3"],"最初设计":["67.3"],"代码执行流程":["67.5"],"同步执行完":["67.5"],"没有块级作用域":["67.6"],"作用域链":["67.6"],"本层作用域有没有此变量":["67.7"],"fun":["67.10"],"对象是通过":["67.11"],"new":["67.11","73.37"],"hello":["67.13","73.54","76.6"],"fn":["67.19"],"你能写出哪些方法":["67.20"],"判断":["67.21","67.24"],"start":["67.28"],"deletecount":["67.28"],"addprefix":["67.34"],"创建了一个空的对象":["67.36"],"闭包是什么":["67.38"],"内部函数可以访问到外部函数的局部变量":["67.39"],"闭包可以解决的问题":["67.39"],"解决":["67.40"],"把闭包的函数设置为":["67.40"],"对象共享属性和共享方法":["67.41"],"谁有原型":["67.41"],"apply":["67.47","67.49"],"可以改变":["67.48"],"函数只给出了两种排序":["67.51"],"insertionsort":["67.51"],"数量小于":["67.51"],"arr2":["67.52"],"数据存放有效期":["67.53"],"仅在当前浏览器窗口关闭之前有效":["67.53"],"window":["67.54"],"addeventlistener":["67.54"],"const共同点":["67.55"],"都是可以声明变量的":["67.55"],"具有变量提升的机制":["67.55"],"没有变量提升性":["67.57"],"demo":["67.58","73.80"],"assign":["67.61"],"extend":["67.63"],"箭头函数中的":["67.64"],"是在箭头函数定义时就确定的":["67.64"],"有三种状态":["67.65"],"every":["67.67"],"篇":["69.0"],"关于生命周期":["69.1"],"还是":["69.2"],"x":["69.2"],"中如何获取":["69.4"],"4一旦进入组件会执行哪些生命周期":["69.5"],"第二次或者第":["69.6"],"父组件引入子组件":["69.7","69.11"],"那么生命周期执行的顺序是":["69.7"],"alive":["69.8"],"会执行哪些生命周期":["69.8"],"如果使用了":["69.8"],"你在什么情况下用过哪些生命周期":["69.9"],"说一说生命周期的使用场景":["69.9"],"关于组件":["69.10"],"父传后代":["69.11"],"后代拿到了父的数据":["69.11"],"绑定数据":["69.11"],"list":["69.11","77.9","77.10"],"关于原理":["69.14"],"微任务":["69.15"],"page":["72.0"],"powered":["72.1"],"by":["72.1"],"shikiji":["72.1"],"box":["72.2"],"tip":["72.2"],"warning":["72.2"],"out":["72.3"],"the":["72.3"],"studio基于intellij":["73.2"],"idea":["73.2"],"community":["73.2"],"idea社区版":["73.2"],"构建":["73.2"],"为鸿蒙应用提供了一站式开发环境":["73.2"],"集成了开发":["73.2"],"运行":["73.2"],"阅读各项条款":["73.3"],"点击":["73.3","73.4","73.7"],"agree":["73.3"],"表示同意":["73.3"],"初次启动会出现如下设置向导":["73.3"],"首先需要为":["73.3"],"nodejs":["73.3"],"project":["73.4"],"选择项目模版":["73.4"],"preview":["73.6"],"tools":["73.7"],"菜单下的":["73.7"],"device":["73.7"],"manager":["73.7"],"打开设备管理器":["73.7"],"install":["73.7"],"安装模拟器":["73.7"],"harmony":["73.8"],"os":["73.8"],"系统的手机":["73.8"],"系统版本最好为":["73.8"],"及以上":["73.8"],"系统版本可在":["73.8"],"关于手机":["73.8"],"中查看":["73.8"],"概述":["73.9","73.34","73.48","73.52","73.130","73.133","73.139"],"harmonyos":["73.9"],"应用的主要开发语言是":["73.9"],"vscode":["73.13"],"编辑器":["73.13"],"vscode是一款轻量级":["73.13"],"开源且功能丰富的集成开发环境":["73.13"],"ide":["73.13"],"支持多种编程语言":["73.13"],"具有强大的插件系统":["73.13"],"下载地址为":["73.13"],"code":["73.13"],"visualstudio":["73.13"],"类型推断":["73.17","73.31"],"表示数字":["73.19"],"包括整数和浮点数":["73.19"],"数组":["73.22"],"数组类型定义由两部分组成":["73.22"],"是一种一系列由":["73.23"],"属性名称":["73.23"],"属性值":["73.23"],"组成的数据结构":["73.23"],"getpersoninfo":["73.27"],"特殊类型":["73.28"],"联合类型":["73.28"],"一个函数可能用于处理不同类型的值":["73.28"],"这种情况可以使用联合类型":["73.28"],"例如以下案例中的":["73.28"],"匿名函数":["73.32"],"匿名函数的语法结构简洁":["73.32"],"特别适用于简单且仅需一次性使用的场景":["73.32"],"numbers":["73.32"],"类":["73.34"],"是面向对象编程语言中的一个重要概念":["73.34"],"类的定义":["73.36"],"定义类的语法如下图所示":["73.36"],"代码如下":["73.36"],"person":["73.36","73.43","73.44"],"对象创建":["73.37"],"语法":["73.37","87.4"],"创建对象的关键字为":["73.37"],"具体语法如下":["73.37"],"中的类中可以包含静态成员":["73.38"],"静态属性和静态方法":["73.38"],"静态成员隶属于类本身":["73.38"],"而不属于某个对象实例":["73.38"],"静态成员通用用于定义一些常量":["73.38"],"或者工具方法":["73.38"],"声明静态成员":["73.38"],"继承另一个类":["73.39"],"父类或基类":["73.39"],"的属性和方法":["73.39"],"子类可以直接使用父类的特性":["73.39"],"并根据需要添加新的特性或覆盖现有的特性":["73.39"],"这种机制赋予面向对象程序良好的扩展性":["73.39"],"下面通过一个例子演示继承的特性":["73.39"],"modifiers":["73.40"],"用于控制类成员":["73.40"],"方法等":["73.40"],"的可访问性":["73.40"],"typescript提供了三种访问修饰符":["73.40"],"分别是private":["73.40"],"protected和public":["73.40"],"关键字定义":["73.43"],"通常情况下":["73.43"],"接口中只会包含属性和方法的声明":["73.43"],"而不包含具体的实现细节":["73.43"],"具体的细节由其实现类完成":["73.43"],"接口的实现类":["73.44"],"teacher":["73.44"],"如下":["73.44"],"implements":["73.44"],"totalamount":["73.45"],"pay":["73.45"],"alipay":["73.45"],"中的接口是一个非常灵活的概念":["73.46"],"除了用作类的规范之外":["73.46"],"也常用于直接描述对象的类型":["73.46"],"现有一个变量的定义如下":["73.46"],"season":["73.49"],"spring":["73.49"],"summer":["73.49"],"autumn":["73.49"],"winter":["73.49"],"枚举使用":["73.49"],"枚举的使用记住两个原则即可":["73.49"],"枚举值的访问":["73.49"],"像访问对象属性一样访问枚举值":["73.49"],"例如上述案例中的":["73.50","73.77"],"direction":["73.50"],"枚举中":["73.50"],"up":["73.50"],"的值为":["73.50"],"bottom":["73.50"],"依次类推":["73.50"],"具体如下":["73.50"],"导出":["73.53"],"导出须使用":["73.53"],"关键字":["73.53","73.69"],"语法如下":["73.53"],"module":["73.54"],"str":["73.54"],"moduleb":["73.54"],"除了上述导入导出的语法之外":["73.55"],"还有一种语法":["73.55"],"叫做":["73.55"],"这种语法相对简洁一些":["73.55"],"定义界面状态":["73.58"],"按照声明式ui的开发范式":["73.58"],"首先需要分析和定义页面的各种状态":["73.58"],"并声明相应的状态变量用于表示不同的状态":["73.58"],"改变状态":["73.60"],"在明确了界面在不同状态下的显示效果后":["73.60"],"我们只需修改状态变量的值":["73.60"],"就能触发界面的更新":["73.60"],"在当前案例中":["73.60"],"组件化":["73.62"],"ets":["73.65","73.67","73.82"],"pages":["73.65","73.67","73.82"],"helloworld":["73.65","73.67"],"light":["73.65"],"solution":["73.65","73.82"],"arkts":["73.65","73.103"],"struct":["73.65","73.69"],"完整代码见":["73.67"],"demos":["73.67","73.82"],"entry":["73.67","73.82"],"delete":["73.67"],"deletebutton":["73.67"],"各部分语法说明如下":["73.69"],"是arkts新增的用于自定义组件或者自定义弹窗的关键字":["73.69"],"其声明的数据结构和ts中的类十分相似":["73.69"],"案例实操":["73.70"],"各参数的含义如下":["73.77"],"需要进行循环渲染的数据源":["73.77"],"必须为数组类型":["73.77"],"state":["73.77","78.1","78.2"],"options":["73.77","73.103","73.121"],"苹果":["73.77"],"桃子":["73.77"],"香蕉":["73.77"],"橘子":["73.77"],"组件生成函数":["73.77"],"用于为":["73.77"],"数组中的每个元素创建对应的组件":["73.77"],"该函数可接收两个参数":["73.77"],"分别是":["73.77"],"包括本地图片和网络图片":["73.80"],"本地图片":["73.80"],"images":["73.80"],"jpg":["73.80"],"使用这种方式引入本地图片":["73.80"],"需要将图片置于":["73.80"],"目录下":["73.80"],"并且需要为":["73.80"],"组件提供图片相对于":["73.80"],"目录的路径":["73.80"],"网络图片":["73.80"],"http":["73.80"],"xxx":["73.80","87.4"],"真机中运行的鸿蒙应用":["73.80"],"访问网络图片需要配置网络访问权限":["73.80"],"不过在预览器和模拟器中测试时不受限制":["73.80"],"权限配置相关的内容在后续章节会系统介绍":["73.80"],"两个方法可接收的参数类型均为":["73.82"],"resource":["73.82","73.87","73.89","73.91","73.123"],"相关案例见":["73.82"],"size":["73.82"],"imagesize":["73.82"],"下面对三种参数类型逐一进行介绍":["73.82"],"objectfit":["73.83"],"方法来设置图片的显示效果":["73.83"],"该方法的参数类型为":["73.83","73.89"],"imagefit":["73.83"],"枚举类型":["73.83"],"可选的枚举值如下":["73.83"],"名称":["73.83"],"图片会模糊并出现锯齿":["73.84"],"如下图所示":["73.84"],"interpolation":["73.84"],"方法对图片进行插值":["73.84"],"下面分别对两个参数类型进行介绍":["73.87"],"string类型":["73.87"],"我是一段文本":["73.87"],"类型":["73.87","77.5"],"fontsize":["73.89"],"方法进行设置":["73.89","73.91","73.92"],"下面逐一介绍":["73.89","73.90","73.91"],"number类型":["73.90"],"类型的取值范围是":["73.90"],"该方法参数类型为":["73.91"],"color":["73.91","73.124"],"文本对齐":["73.92"],"文本对齐方向可通过":["73.92"],"textalign":["73.92"],"该方法的参数为枚举类型":["73.92"],"可使用":["73.93"],"maxlines":["73.93"],"方法控制文本的最大行数":["73.93"],"当内容超出最大行数时":["73.93"],"textoverflow":["73.93"],"两种方式下":["73.96"],"组件所需的参数有所不同":["73.96"],"下面分别介绍":["73.96"],"不包含子组件时":["73.96"],"组件所需的参数如下":["73.96"],"label":["73.96"],"边框圆角":["73.99"],"按钮的边框圆角大小可使用":["73.99"],"borderradius":["73.99"],"对于button组件而言":["73.100"],"最为常用的就是点击事件":["73.100"],"可以通过":["73.100"],"onclick":["73.100"],"type":["73.103","73.121"],"toggletype":["73.103"],"ison":["73.103"],"swtich滑块颜色":["73.106"],"每当":["73.107"],"组件的状态发生变化":["73.107"],"就会触发":["73.107"],"事件":["73.107"],"textinput":["73.110"],"组件的参数定义如下":["73.110"],"输入框类型":["73.112"],"可通过":["73.112"],"placeholder样式":["73.114"],"文本样式":["73.115"],"change事件":["73.117"],"每当输入的内容发生变化":["73.117"],"焦点事件包括":["73.118"],"获得焦点":["73.118"],"失去焦点":["73.118"],"两个事件":["73.118"],"当输入框获得焦点时":["73.118"],"total":["73.121"],"progresstype":["73.121"],"例如进度条的宽度":["73.123"],"该方法的参数类型定义如下":["73.123"],"strokewidth":["73.123"],"进度条颜色":["73.124"],"进度条的颜色可通过":["73.124"],"promptaction":["73.128"],"模块中的":["73.128"],"showtoast":["73.128"],"方法显示":["73.128"],"toast":["73.128"],"提示":["73.128"],"使用时需要先导入":["73.128"],"alertdialog":["73.130"],"actionsheet":["73.133"],"例如文本选择器":["73.136"],"日期选择器":["73.136"],"时间选择器等等":["73.136"],"各选择器效果如下":["73.136"],"details":["73.136"],"lake":["73.136"],"collapse":["73.136"],"当现有组件不满足要求时":["73.139"],"customdialogcontroller":["73.140"],"具体用法可参考相关案例或者官方文档":["73.140"],"json":["73.140"],"br":["73.140"],"integer":["73.140"],"20240527104001233":["75.0"],"单文件组件":["76.1"],"我们想在具有css作用域的":["76.5"],"p":["76.6","78.1","78.2","78.5","79.6","79.7"],"可以把对应的":["76.7"],"提供了一个内置组件":["77.1"],"将以下元素渲染成":["77.2"],"teleport":["77.3"],"组件的":["77.5"],"渲染函数来实现一个组件":["77.12"],"请注意":["77.12"],"你需要实现一个树组件":["77.15"],"如果源是对象":["79.14"],"强制深度遍历":["79.14"],"以便在深层级变更时触发回调":["79.14"],"参考深层侦听器":["79.14"],"flush":["79.14"],"强制触发依赖于一个浅层":["79.18"],"你将使用":["79.20"],"组合式":["79.20"],"run":["79.25"],"customref":["79.29"],"提供了一个指令":["80.4"],"并跳过之后的更新":["80.6"],"在随后的重新渲染":["80.6"],"元素":["80.6"],"li":["80.14","80.15"],"让我们开始吧":["81.1"],"click":["81.2"],"click1":["81.2"],"在监听键盘事件时添加按键修饰符":["81.4"],"只有在":["81.4"],"被一同按下时也会触发":["81.5"],"更新":["82.0"],"响应式":["84.1"],"reactiveobj":["84.3"],"我们需要依赖于异步的返回结果做一些后续处理":["85.1"],"composition":["87.0"],"类型的":["87.1"],"拉开序幕的":["87.2"],"数据":["87.3"],"计算属性":["87.3"],"监视":["87.3"],"等等":["87.3"],"均配置在":["87.3"],"特点如下":["87.3"],"函数返回的对象中的内容":["87.3"],"定义响应式变量":["87.4"],"对象类型的响应式数据":["87.5","87.6"],"作用":["87.5"],"定义一个":["87.5"],"响应式对象":["87.5"],"创建":["87.6"],"对象类型数据":["87.7"],"创建的变量必须使用":["87.7"],"备注":["87.8"],"功能一致":["87.8"],"setup语法糖":["88.0"]},{"0":["0.20","0.68","58.20","58.68","63.16"],"1":["0.24","56.5","56.6","58.24","63.16","67.12","67.21","67.22","67.23","67.25","67.58","67.59","67.60","73.11","73.30","73.32","73.37","73.42","73.57","73.59","73.74","73.86","73.95","73.102","73.105","73.109","73.120","73.126"],"2":["0.84","0.90","31.0","44.0","56.6","58.84","58.90","62.24","63.8","65.6","67.3","67.7","67.11","67.16","67.23","67.25","67.30","67.36","73.113","73.129","73.131","73.134"],"3":["0.60","0.65","0.76","0.79","0.86","0.87","19.2","58.60","58.65","58.76","58.79","58.86","58.87","62.2","67.30","73.18","73.32"],"4":["0.82","57.1","58.82","67.30","73.24","73.25","73.26","73.29","73.66","73.71","73.72","73.75","73.116","73.135"],"5":["0.33","0.83","57.1","58.33","58.83","67.19","73.19","73.32","73.33","73.35","73.138"],"6":["0.83","16.0","58.83","73.41"],"7":["0.30","58.30","73.47"],"8":["73.51"],"10":["62.5","67.10","67.51","73.23"],"16":["0.35","58.35"],"17":["62.3"],"18":["67.43"],"20":["67.45","73.65"],"21":["0.65","58.65"],"26":["0.15","58.15","67.33"],"32":["62.16","67.33"],"33":["73.19"],"35":["67.33","71.0"],"37":["67.33"],"39":["67.33"],"100":["9.0","73.19","73.77"],"111":["62.3"],"123":["62.2","67.18"],"150":["73.140"],"262":["56.1"],"308":["0.32","58.32"],"315":["0.32","58.32"],"400":["73.90"],"404":["46.0"],"1000":["34.2"],"都区分大小写":["0.2","58.2"],"换句话说":["0.2","58.2"],"变量":["0.2","58.2"],"第一个字符必须是一个":["0.3","58.3"],"字母":["0.3","58.3"],"下划线":["0.3","58.3"],"包括单行注释和块注释":["0.4","58.4"],"单行注释以两个斜杠字符":["0.4","58.4"],"开头":["0.4","58.4"],"的一些不规范写法在这种模式下会被处理":["0.5","58.5"],"对于不安全的活动将抛出错误":["0.5","58.5"],"要对整个脚本使用严格模式":["0.5","58.5"],"在脚本的开头加上这一行":["0.5","58.5"],"var":["0.7","0.20","0.22","58.7","58.20","58.22","67.10","67.24","67.39","67.63"],"catch":["0.7","58.7"],"export":["0.7","58.7","60.7","77.13"],"new":["0.7","0.44","13.0","58.7","58.44","62.2"],"void":["0.7","58.7","73.43"],"描述了一组保留的关键字":["0.8","58.8"],"let":["0.10","0.12","0.34","0.66","58.10","58.12","58.34","58.66","62.9","67.61","67.62","73.16","73.27","73.37"],"const":["0.12","58.12"],"和":["0.12","0.27","0.86","3.1","15.0","58.12","58.27","58.86","60.6","60.8","67.55","73.3","73.49","73.54","73.58","73.82","73.114","73.124"],"是一个关键字":["0.13","58.13"],"后跟变量名":["0.13","58.13"],"is":["0.14","36.2","58.14"],"not":["0.14","58.14"],"defined":["0.14","58.14"],"这里":["0.14","58.14"],"变量是在函数内部使用":["0.14","58.14"],"定义的":["0.14","58.14"],"函数叫":["0.14","58.14"],"调用它会创建这个变量并给它赋值":["0.14","58.14"],"调用之后变量随即被销毁":["0.14","58.14"],"因此示例中的最后一行会导致错误":["0.14","58.14"],"undefined":["0.15","0.17","0.23","0.24","58.15","58.17","58.23","58.24","67.9","87.3"],"之所以不会报错":["0.15","58.15"],"是因为":["0.15","58.15"],"ecmascript":["0.15","0.31","0.43","58.15","58.31","58.43"],"name":["0.16","0.21","58.16","58.21","73.36","73.39","73.40","73.43","73.46","73.140"],"matt":["0.16","0.21","58.16","58.21"],"console":["0.16","0.17","0.33","58.16","58.17","58.33","62.2","62.6","67.8","67.17","67.50","67.57","73.53"],"log":["0.16","0.17","0.33","58.16","58.17","58.33","62.2","62.5","62.6","67.12","67.50","67.57","73.53"],"会被提升":["0.17","58.17"],"在全局作用域中声明的变量不会成为":["0.18","58.18"],"window":["0.18","58.18"],"对象的属性":["0.18","58.18"],"因为":["0.19","58.19","69.3"],"循环块内部":["0.20","58.20"],"js":["0.20","0.25","2.1","14.0","21.1","22.1","23.0","25.0","29.3","36.4","58.20","58.25","62.9","67.39","76.6"],"i":["0.20","58.20","60.1"],"也不允许重复声明":["0.21","58.21"],"nicholas":["0.21","58.21"],"syntaxerror":["0.21","58.21"],"原始数据类型":["0.23","58.23"],"会返回下列字符串之一":["0.24","58.24"],"表示值未定义":["0.24","58.24"],"值的变量跟未定义变量是有区别的":["0.25","58.25"],"message":["0.25","58.25"],"这个变量被声明了":["0.25","58.25"],"只是值为undefined":["0.25","58.25"],"的原因":["0.26","58.26"],"在定义一个将来要保存对象值的变量时":["0.26","58.26"],"建议使用":["0.26","58.26"],"来初始化":["0.26","58.26"],"不要使用其他值":["0.26","58.26"],"这样":["0.26","58.26"],"false":["0.27","0.73","58.27","58.73","60.11","73.65"],"这两个布尔值不同于数值":["0.27","58.27"],"因此":["0.27","58.27"],"boolean":["0.28","0.44","58.28","58.44","67.4","73.21","73.65","73.96"],"类型使用":["0.29","58.29"],"然后是相应的八进制数字":["0.30","58.30"],"如果字面量中包含的数字超出了应有的范围":["0.30","58.30"],"有效":["0.31","58.31"],"但不推荐":["0.31","58.31"],"因为存储浮点数值使用的内存空间是存储整数值的两倍":["0.31","58.31"],"所以":["0.31","58.31"],"总是想方设法把值转换为整数":["0.31","58.31"],"在小数点后面没有数字或者全是":["0.31","58.31"],"7e":["0.32","58.32"],"如果某个计算得出的值超出这个范围":["0.32","58.32"],"那么这个数值会被自动转为一个特殊的":["0.32","58.32"],"infinity":["0.32","0.77","58.32","58.77"],"无穷":["0.32","58.32"],"值":["0.32","58.32"],"任何无法表示的负数以":["0.32","58.32"],"num1":["0.34","0.66","58.34","58.66"],"hello":["0.34","34.2","58.34","73.53"],"world":["0.34","58.34"],"num2":["0.34","0.90","58.34","58.90"],"num3":["0.34","0.90","58.34","58.90"],"000011":["0.34","58.34"],"num4":["0.34","58.34"],"考虑到":["0.34","58.34"],"函数转换字符串时相对复杂且有点反常规":["0.34","58.34"],"通常在需要得到整数时可以优先使用":["0.34","58.34"],"函数":["0.34","58.34"],"函数更专注于字符串是否包函数值模式":["0.34","58.34"],"字符串最前面的空格会被忽略":["0.34","58.34"],"从第一个非空的字符串开始转换":["0.34","58.34"],"如果第一个字符不是数值字符":["0.34","58.34"],"加号或减号":["0.34","58.34"],"立即返回":["0.34","58.34"],"如果第一个字符是数值字符":["0.34","58.34"],"加号或者减号":["0.34","58.34"],"数据类型表示零或多个":["0.35","58.35"],"反斜杠":["0.36","58.36"],"单引号":["0.36","58.36"],"在字符串以单引号标记时使用":["0.36","58.36"],"例如":["0.36","58.36","73.19","73.22","73.23","73.89","73.91","73.99","73.139"],"he":["0.36","58.36"],"said":["0.36","58.36"],"hey":["0.36","58.36"],"他们的值就不能变了":["0.37","58.37"],"tostring":["0.38","58.38","62.2"],"一个是直接在后面加空串":["0.38","58.38"],"与使用单引号或双引号不同":["0.39","58.39"],"模板字面量保留换行字符":["0.39","58.39"],"句法表达式":["0.40","58.40"],"只不过求值后得到的":["0.40","58.40"],"是字符串":["0.40","58.40"],"而通过标签函数可以自定义插值行为":["0.41","58.41"],"标签函数":["0.41","58.41"],"字符":["0.42","58.42"],"是":["0.43","12.1","58.43"],"函数不能与":["0.44","58.44"],"关键字一起作为构造函数使用":["0.44","58.44"],"这样做是为了避免创建符号包装对象":["0.44","58.44"],"像使用":["0.44","58.44"],"foo":["0.45","58.45"],"创建新符号":["0.45","58.45"],"otherfooglobalsymbol":["0.45","58.45"],"重用已有符号":["0.45","58.45"],"这就包括了对象字面量属性和":["0.46","58.46"],"object":["0.46","56.4","58.46","62.1","67.52","73.34"],"这些内置符号都以":["0.47","58.47"],"工厂函数字符串属性的形式存在":["0.47","58.47"],"这些内置符号最重要的用途之一是重新定义它们":["0.47","58.47"],"从而改变原生结构的行为":["0.47","58.47"],"页":["0.59","58.59"],"用于判断当前对象实例":["0.60","58.60"],"不是原型":["0.60","58.60"],"上是否存在给定的属性":["0.60","58.60"],"要检查的属性名必须是字符串或者符号":["0.60","58.60"],"operator":["0.62","58.62"],"对于字符串":["0.63","58.63"],"如果是有效的数值形式":["0.63","58.63"],"则转换为数值再应用改变":["0.63","58.63"],"变量类型从字符串变成数值":["0.63","58.63"],"如果不是有效的数值形式":["0.63","58.63"],"则将变量值设置为":["0.63","58.63"],"一元加由一个加号":["0.64","58.64"],"表示":["0.64","58.64"],"依此类推":["0.65","58.65"],"负值以一种称为二补数":["0.65","58.65"],"或补码":["0.65","58.65"],"的二进制编码存储":["0.65","58.65"],"一个数值的二补数通过如下":["0.65","58.65"],"然后基于真值表中的规则":["0.67","58.67"],"对每一位执行相应的与操作":["0.67","58.67"],"第一个数值的位":["0.67","58.67"],"会按照指定的位数将数值的所有位向左移动":["0.69","58.69"],"会将数值的所有":["0.70","58.70"],"对于正数":["0.71","58.71"],"无符号右移与":["0.71","58.71"],"有符号右移结果相同":["0.71","58.71"],"则返回":["0.73","0.77","0.79","58.73","58.77","58.79"],"如果操作数是空字符串":["0.73","58.73"],"true":["0.73","58.73","67.58","73.60"],"逻辑与操作符可用于任何类型的操作数":["0.74","58.74"],"不限于布尔值":["0.74","58.74"],"如果有操作数不是布尔值":["0.74","58.74"],"与逻辑与类似":["0.75","58.75"],"如果有一个操作数不是布尔值":["0.75","58.75"],"或":["0.77","0.78","58.77","58.78"],"如果有任一操作数是":["0.77","0.78","58.77","58.78"],"nan":["0.77","0.78","0.79","58.77","58.78","58.79"],"除数是有限值":["0.79","58.79"],"如果被除数是有限值":["0.79","58.79"],"除数是":["0.79","58.79"],"现在有了自己的操作符":["0.80","58.80"],"不仅如此":["0.80","58.80"],"则执行数值比较":["0.84","58.84"],"如果操作数都是字符串":["0.84","58.84"],"则逐个比较字符串中对应字符的编码":["0.84","58.84"],"第二组是全等和不全等":["0.85","58.85"],"则尝试将字符串转换为数值":["0.86","58.86"],"再比较是否相等":["0.86","58.86"],"如果一个操作数是对象":["0.86","58.86"],"另一个操作数不是":["0.86","58.86"],"则调用对象的":["0.86","58.86"],"valueof":["0.86","58.86"],"方法取得其原始值":["0.86","58.86"],"再根据前面的规则进行比较":["0.86","58.86"],"比较规则":["0.86","58.86"],"null":["0.86","55.1","58.86","60.6","67.2","67.50"],"个等于号":["0.87","58.87"],"上面的代码执行了条件赋值操作":["0.88","58.88"],"即根据条件表达式":["0.88","58.88"],"复合赋值操作符":["0.89","58.89"],"乘后赋值":["0.89","58.89"],"的理解":["1.0"],"过程靠":["1.1"],"来实现":["1.1","30.0"],"声明式代码更加简单":["1.1"],"不需要关注实现":["1.1"],"按照要求填代码就可以了":["1.1"],"给上原材料就出结果":["1.1"],"javascript":["1.1","56.3","67.1"],"命令式编程":["1.1"],"分层管理":["1.2"],"image":["1.2","61.2","62.19"],"20240313103948553":["1.2"],"对于前端而言就是如何将数据同步到页面上":["1.2"],"也就是借鉴后端思想":["1.2"],"拼接一个完整的字符串innerhtml":["1.3"],"全部重新渲染":["1.3"],"添加虚拟":["1.3"],"浏览器":["1.4"],"时":["1.4"],"vue":["1.4","3.2","10.2","19.1","20.0","20.2","22.2","24.0","29.3","34.1","37.1","54.2","59.0","69.12","87.8"],"组件化":["1.5"],"实现高内聚":["1.5"],"spa":["2.0"],"页面":["2.1"],"并且提供一个挂载点":["2.1"],"最终打包后会在此页面中引入对应的资源":["2.1"],"页面的渲染全部是由":["2.1"],"动态进行渲染的":["2.1"],"多个完整的页面":["2.2"],"刷新方式":["2.2"],"局部刷新":["2.2"],"整页刷新":["2.2"],"seo":["2.2","65.3","65.6"],"generation":["2.3"],"ssg":["2.3"],"在构建时生成完整的":["2.3"],"md":["3.0","6.0","16.0"],"vnode":["3.1","36.3"],"vdom":["3.1"],"virtual":["3.1"],"中我们常常回味组件编写模板":["3.2"],"会记录第一次生成的":["3.3"],"oldvnode":["3.3"],"当响应式数据发生变化时":["3.3"],"组件化的核心组成":["4.0"],"模板":["4.0"],"属性":["4.0","39.0"],"数据是响应式的":["4.1"],"数据变化后执行":["4.1"],"进行":["5.0"],"diff":["5.0"],"检测差异":["5.0"],"对象内部通过":["6.1"],"definereactive":["6.1","6.3"],"方法":["6.1","9.0","15.0","73.45","73.69","87.1"],"来进行数据的劫持":["6.2"],"需要对属性进行重写添加":["6.2"],"getter":["6.2","13.0"],"及":["6.2"],"key":["6.3","31.1","39.0","67.63"],"in":["6.3","67.63","80.14","80.15"],"target":["6.3"],"value":["6.3","60.8","73.140"],"中如何检测数组变化":["7.0"],"defineproperty":["7.1"],"对数组的每一项进行拦截":["7.1"],"数组的缺点":["7.2"],"中如何进行依赖收集":["8.0"],"存放它所依赖的":["8.1"],"watcher":["8.1"],"当属性变化后会通知自己对应的":["8.1"],"中会通过":["8.2"],"map":["8.2","31.2"],"结构将属性和":["8.2"],"array":["9.0"],"调用我们重写的":["9.0"],"splcie":["9.0"],"这样可以更新视图":["9.0"],"isarray":["9.0","62.17"],"isvalidarrayindex":["9.0"],"length":["9.0"],"math":["9.0","67.50"],"max":["9.0","67.50"],"if和":["10.0"],"v":["10.1","10.3","29.1","30.0","55.2","80.5","80.8","80.9","80.17","80.18"],"if":["10.1","21.3","62.9","67.35","67.58","73.65"],"template":["10.2","31.0","79.1","79.2","79.21","81.1","83.1","83.2","87.8"],"如何选择":["10.3"],"渲染":["11.0"],"计算属性":["11.0"],"computed":["11.1","15.0","52.0"],"计算属性仅当用户取值时才会执行对应的方法":["11.1"],"则是监控值的变化":["11.2"],"源码剖析":["11.3"],"reactive":["12.0","12.1"],"vue3":["12.1"],"源码实现":["12.2"],"effect":["13.0"],"reactiveeffect":["13.0"],"scheduler":["13.0"],"编译为":["14.0"],"中可执行的":["14.0"],"watch":["15.0","52.0"],"method":["15.0"],"同时也初始化了":["15.0"],"provide":["15.0"],"inject":["15.0"],"vue2":["16.0","87.0"],"避免在同一个标签中使用":["17.0"],"如果遇到需要同事使用时可以考虑写成计算属性的方式":["17.0"],"html":["17.0","37.3","55.2","66.1","66.4"],"应当避免这种写法":["17.0"],"li":["17.0","67.40","77.16"],"实例已经创建完成之后被调用":["18.1"],"在这一步":["18.1"],"实例已经完成以下配置":["18.1"],"属性和方法等":["18.1"],"但是这里没有":["18.1"],"el":["18.1"],"beforemount":["18.2","69.2"],"组件挂载之前":["18.2"],"mounted":["18.2","69.9"],"组件挂在实例上去之后":["18.2"],"beforeupdate":["18.2"],"组件数据发生变化":["18.2"],"中":["19.0","73.8"],"基于虚拟":["19.1"],"dom":["19.1","19.2","20.1","55.2"],"复用给新的虚拟节点":["19.2"],"比较儿子节点":["19.2"],"考虑老节点和新节点儿子的情况":["19.2"],"的虚拟":["20.1"],"算法":["20.1"],"在新旧":["20.1"],"nodes":["20.1"],"在":["20.2","22.1","57.1","73.8","73.52"],"patch":["20.2"],"use":["21.0","54.3"],"插件":["21.1","73.13"],"如果插件是一个对象":["21.1"],"添加全局指令":["21.2"],"全局过滤器":["21.2"],"indexof":["21.3"],"如果已经有插件":["21.3"],"直接返回":["21.3"],"return":["21.3","34.2","54.3","55.1","62.6","73.27"],"extend":["22.0","23.0"],"需要注意":["22.1"],"中它必须是函数":["22.1"],"所有的组件创建时都会调用":["22.2"],"function":["23.0","62.9","67.17","67.31","67.32","67.34","67.54","73.28","73.53"],"options":["23.0","55.1","73.96"],"sub":["23.0"],"会将data":["23.0"],"this":["24.0","52.0","73.44","73.65","73.77","87.3"],"但是性能高":["24.0"],"正常组件是一个类继承了":["24.0"],"filter":["25.0"],"once":["26.0"],"概念":["26.1"],"h1":["26.2","63.3","65.1"],"comment":["26.2"],"p":["26.2","55.2","63.3","65.1","76.2","79.3","79.4","79.9","79.10","79.12","79.13","79.16","79.17","84.2","85.2"],"组件":["26.2","69.8"],"my":["26.2"],"mixin的使用场景和原理":["27.0"],"mixin可以用来扩展组件":["27.1"],"将公共逻辑进行抽离":["27.1"],"在需要该逻辑时进行":["27.1"],"混入方式":["27.2"],"在vue中我们可以":["27.2"],"对象的合并处理":["27.3"],"props":["27.3","55.1","69.11"],"methods":["27.3","69.3"],"中的":["28.0"],"插槽设计来源于":["28.1"],"web":["28.1","62.13"],"什么时候使用它":["28.2"],"通过插槽可以让用户更好地对组件进行扩展和定制化":["28.2"],"内容":["28.3"],"编译后结果":["28.3"],"with":["28.3","72.1"],"attrs":["28.3"],"以及它的实现原理":["29.0"],"中双向绑定靠的是指令":["29.1"],"model":["29.1","30.0","56.4"],"内部会根据标签的不同解析出不同的语法":["29.2"],"并且这里有":["29.2"],"额外":["29.2"],"的语法糖":["29.3"],"可用于组件中的数据的双向绑定":["29.3"],"名字也可以修改为":["29.3"],"component":["29.3","77.9","77.10"],"base":["29.3"],"checkbox":["29.3"],"默认只能双向绑定一个属性":["30.0"],"这里就可以通过":["30.0"],"submenu":["31.0"],"slot":["31.0","36.3"],"title":["31.0"],"id":["31.1","73.36","73.39","73.40","73.136","82.1","82.2"],"child":["31.2","67.43","67.44","67.45","67.46","79.21"],"children":["31.2"],"components":["32.0","61.4"],"属性中增加组件本身":["32.0"],"实现组件的递归调用":["32.0"],"可以表示组件的具体名称":["32.0"],"trim":["33.0"],"number":["33.0","62.2","67.27","73.22","73.28","73.36","73.39","73.40","73.43","73.46"],"事件修饰符":["33.0"],"stop":["33.0"],"中异步组件的作用和原理":["34.0"],"允许你以一个工厂函数的方式定义你的组件":["34.1"],"div":["34.2","37.3","55.2","63.3","63.12","79.1","79.2","79.16","79.17","79.23","79.24","81.1","83.1","83.2","84.2","86.1","87.8"],"promise":["34.2","69.15"],"写法":["34.2"],"异步组件原理":["34.3"],"nexttick":["35.0"],"中视图更新是异步的":["35.1"],"使用":["35.1"],"alive":["36.0","36.1"],"keep":["36.1","69.6"],"在路由器中使用keep":["36.2"],"val":["36.3"],"prunecache":["36.3"],"matches":["36.3"],"render":["36.3"],"slots":["36.3"],"每次进入路由的时候":["36.4"],"都会执行":["36.4"],"除了内置指令之外":["37.1"],"inserted":["37.2"],"被绑定元素插入父节点时调用":["37.2"],"仅保证父节点存在":["37.2"],"但不一定已被插入文档中":["37.2"],"drop":["37.3"],"可视化拖拽编辑器":["37.3"],"点击事件处理":["37.3"],"click":["37.3","78.5","79.4","79.6","79.7","80.11","80.12","81.5"],"outside":["37.3"],"createelement":["38.0"],"发布订阅模式":["38.0"],"订阅者把自己想订阅的事件注册到调度中心":["38.0"],"当该事件触发的时候":["38.0"],"发布者发布该事件到调度中心":["38.0"],"缓存值的结果":["39.0"],"不频繁取值":["39.0"],"合理设置":["39.0"],"进行代码分割":["40.0"],"组件加载采用按需加载的方式":["40.0"],"静态资源缓存":["40.0"],"http":["40.0"],"缓存":["40.0"],"服务端和服务端之间进行通信是没有跨域问题的":["41.0"],"跨域的实现方案有很多种":["41.0"],"不过一般常用的就那么几中":["41.0"],"cors":["41.0"],"主要是封装哪方面的":["42.0"],"设置请求超时时间":["42.0"],"根据项目环境设置请求路径":["42.0"],"要做权限管理该怎么做":["43.0"],"每次发送请求时会携带":["43.1"],"后端会对":["43.1"],"进行验证":["43.1"],"守卫":["44.0"],"在重用的组件里调用":["44.0"],"beforerouteupdate":["44.0"],"abstract":["45.0"],"模式是在不支持浏览器":["45.0"],"api":["45.0","79.20"],"环境使用":["45.0"],"项目本地开发完后部署到服务器后报":["46.0"],"vuex":["47.0","47.2"],"是一个专门为":["47.2"],"commit":["47.3"],"mutation":["47.3","51.0"],"只有一份":["47.4"],"复杂的数据需要依赖于模块":["47.4"],"vuex3":["47.5"],"核心就是通过":["47.5"],"中数据的变化":["48.0"],"通过":["48.0"],"每次获取数据前检测":["49.0"],"数据是否存在":["49.0"],"可以获取数据后将结果提交给":["50.0"],"中则是修改":["50.0"],"state":["50.0","51.0","73.65"],"允许我们将":["51.0"],"分割成模块":["51.0"],"每个模块拥有自己的":["51.0"],"等属性":["52.0"],"用户编写复杂业务逻辑会出现反复横跳的问题":["52.0"],"中所有的属性都是通过":["52.0"],"中的模块之间耦合度低":["53.0"],"模块可以独立使用":["53.0"],"拆分模块":["53.0"],"中很多方法挂遭到了实例中导致没有使用也会被打包":["53.0"],"还有很多组件也是一样":["53.0"],"通过构建工具":["53.0"],"tree":["53.0"],"shaking":["53.0"],"项目中的错误如何处理的":["54.0"],"如果全局的":["54.1"],"config":["54.1","54.2"],"errorhandler":["54.1","54.2"],"res":["54.3"],"中模板编译优化":["55.0"],"cache":["55.1"],"setup":["55.1","87.2"],"data":["55.1","77.16"],"text":["55.1","67.1","69.5","73.110","73.136","80.6"],"生成的虚拟":["55.1"],"树层级的":["55.2"],"树的结构可能会发生变化":["55.3"],"不稳定结构有哪些呢":["55.3"],"createelementvnode":["55.4"],"openblock":["55.4","55.5"],"createelementblock":["55.4","55.5"],"createcommentvnode":["55.4"],"fragment":["55.5"],"远远不限于":["56.1"],"ecma":["56.1"],"描述":["56.3","73.83","73.92"],"的对象和方法":["56.5"],"domlevel2":["56.5"],"新增了以下模块":["56.5"],"视图":["56.5"],"描述追踪文档不同视图":["56.5"],"如应用":["56.5"],"不过人们通常会把任何特定于浏览器的扩展都归在":["56.6"],"的范畴内":["56.6"],"比如":["56.6"],"弹出新浏览器窗口的能力":["56.6"],"设置凭据标志":["57.1"],"意味着出站请求会包含凭据":["57.1"],"defer":["57.1"],"表示脚本可以延迟到文档完全被解析和显示之后再执行":["57.1"],"ie7":["57.1"],"及更早版本中":["57.1"],"对行内脚本也可以指定这个属性":["57.1"],"integrity":["57.1"],"允许比对接收到的资源和指定的加密签名已验证子资源完整性":["57.1"],"sri":["57.1"],"subresource":["57.1"],"加入以下内容":["59.0"],"typescript":["59.0","60.3","60.5","60.7","60.9","60.10","73.9","73.10","73.31","73.40","73.128"],"import":["59.0","60.2","60.3","60.5","60.7","60.9","60.10","73.54","73.128"],"pinia":["60.1","60.5","60.7"],"createpinia":["60.2"],"from":["60.2","60.5","60.7","60.9","60.10","73.54","73.128"],"definestore":["60.3","60.5","60.7","60.9","60.10"],"json":["60.4"],"stringify":["60.4"],"parse":["60.4"],"string":["60.6","60.8","73.20","73.28","73.36","73.39","73.43","73.46","73.110"],"setitem":["60.6"],"statetree":["60.8"],"deserialize":["60.8"],"这可用于在恢复数据之前强制地执行特定的操作":["60.9"],"这可用于在恢复数据之后强制地执行特定的操作":["60.10"],"当设置为":["60.11"],"vite":["61.1"],"plugin":["61.1"],"svg":["61.1"],"pics":["61.2"],"raw":["61.2","84.1"],"master":["61.2"],"images":["61.2"],"20240204101235373":["61.2"],"png":["61.2"],"alt":["61.2"],"class":["61.3","63.12","73.38","73.40"],"svgicon":["61.4"],"index":["61.4","80.14","80.15"],"中引入":["61.5"],"symbol":["62.1","67.2"],"bigint引用数据类型":["62.1"],"prototype":["62.2","67.16","67.18","67.41"],"找到相同的原型对象":["62.2"],"返回":["62.2"],"验证一下自己实现的":["62.2"],"是否":["62.2"],"ok":["62.2"],"1a":["62.3"],"0x11":["62.3"],"方法的强制转换规则":["62.3"],"除了":["62.3"],"包括":["62.3"],"转换出来是":["62.3"],"其他均为":["62.3"],"注意":["62.5","63.22","67.6"],"是对象就再次调用该函数递归":["62.6"],"else":["62.6"],"基本类型的话直接复制值":["62.6"],"obj2":["62.6","67.13","67.52"],"这个深拷贝函数不能复制不可枚举的属性以及":["62.6"],"类型":["62.6","73.82"],"这种方法只是针对普通的引用类型的值做递归复制":["62.6"],"对象的属性里面成环":["62.6"],"即循环引用没有解决":["62.6"],"改进版":["62.6"],"改进后递归实现":["62.6"],"针对能够遍历对象对象的不可枚举属性以及":["62.6"],"我们可以使用":["62.6"],"缩短开发的周期":["62.7"],"child3":["62.8"],"第二次调用parent3":["62.8"],"第一次调用parent3":["62.8"],"手动挂上构造器":["62.8"],"指向自己的构造函数":["62.8"],"constructor":["62.8","73.39","73.44"],"s3":["62.8"],"s4":["62.8"],"互不影响":["62.8"],"正常输出":["62.8"],"构造函数返回的最后结果是引用数据类型":["62.9"],"的实现":["62.9"],"ctor":["62.9"],"args":["62.9"],"typeof":["62.9","67.9"],"throw":["62.9"],"must":["62.9"],"be":["62.9"],"a":["62.9","67.8","67.59"],"指变量能够被访问到的范围":["62.10"],"一个函数和对其周围状态的引用捆绑在一起":["62.11"],"或者说函数被引用包围":["62.11"],"代码解释器会首先在当前的作用域查找":["62.12"],"ajax":["62.13"],"请求":["62.13"],"方法用来解析":["62.14"],"字符串":["62.14"],"构造有字符串描述的":["62.14"],"不是数值时":["62.16"],"处理同上":["62.16"],"返回一个只包含":["62.16"],"元素一项的数组":["62.16"],"为数值时":["62.16"],"最大不能超过":["62.16"],"位无符号整型":["62.16"],"即需要小于":["62.16"],"的":["62.16","87.0"],"es6":["62.18"],"新增的方法":["62.18"],"copywithin和":["62.18"],"fill不改变自身的方法":["62.18"],"concat":["62.18","62.23"],"join":["62.18"],"20240117153246144":["62.19"],"利用":["62.19"],"reduce":["62.19"],"函数迭代":["62.19"],"从上面普通的递归函数中可以看出":["62.19"],"其实就是对数组的每一项进行处理":["62.19"],"其实也可以用reduce":["62.19"],"来实现数组的拼接":["62.19"],"从而简化第一种方法的代码":["62.19"],"prev":["62.19","62.23"],"nlogn":["62.21"],"result":["62.23"],"插入排序":["62.23"],"插入排序算法描述的是一种简单直观的排序方法":["62.23"],"它的工作原理是通过构建有序序列":["62.23"],"对于未排序数据":["62.23"],"在已排序序列中从后向前扫描":["62.23"],"找到相应的值并插入":["62.23"],"从而达到排序的效果":["62.23"],"insertsort":["62.23"],"current":["62.23"],"while":["62.23"],"会被排列在":["62.24"],"之前":["62.24"],"等于":["62.24"],"margin":["63.1"],"border":["63.1","63.5","63.6"],"padding":["63.1"],"的区别":["63.2","67.67"],"相邻选择器":["63.3"],"后代":["63.3"],"权重计算":["63.4"],"第一":["63.4"],"style":["63.4"],"300px":["63.6"],"height":["63.6"],"5px":["63.6"],"solid":["63.6"],"ccc":["63.6"],"display":["63.6"],"此元素前后会带有换行符":["63.7"],"inline":["63.7"],"默认":["63.7"],"此元素会被显示为内联元素":["63.7"],"了解":["63.8"],"创建一个盒子":["63.9"],"添加样式":["63.9"],"css":["63.9","63.20","66.6"],"说明":["63.10"],"absolute":["63.11"],"绝对定位":["63.11"],"相对于第一个有":["63.11"],"的父元素定位":["63.11"],"脱离文档流":["63.11"],"body":["63.12","66.4","77.2"],"container":["63.12"],"文件":["63.13"],"用来重置":["63.13"],"样式":["63.13"],"把多个小图标合并成一张大图片":["63.14"],"又称精灵图":["63.14"],"取值范围":["63.16"],"之间":["63.16"],"区别":["63.17"],"一个冒号":["63.17"],"是伪类":["63.17"],"chorme":["63.18"],"浏览器默认字体大小是":["63.18"],"相对于":["63.19"],"font":["63.19"],"size":["63.19"],"的颜色值能改变吗":["63.20"],"width":["63.21","73.77","73.140"],"1000px":["63.21"],"可以排除不支持媒体查询的浏览器":["63.21"],"设备类型":["63.21"],"移动端应该做什么样的布局方案":["63.22"],"访问量还可以或者比较大":["63.22"],"例如淘宝网":["63.22"],"端是一套":["63.22"],"会加入一点点响应式":["63.22"],"移动端是一套":["63.22"],"footer":["65.1"],"header":["65.1"],"section":["65.1"],"现有":["65.2"],"后有":["65.2"],"是显示在网页标题上":["65.3"],"显示在网页内容上":["65.3"],"比":["65.3","67.51"],"更加的重要":["65.3"],"的了解":["65.3"],"鼠标移入到图片显示的值":["65.4"],"jpeg":["65.5"],"的大":["65.5"],"适合做小图标":["65.5"],"易读性和维护性更好":["65.6"],"input":["66.2","79.27","79.28","80.1","80.2","80.8","80.9","80.17","80.18","81.4"],"textarea":["66.2"],"user":["66.5"],"select":["66.5"],"用户选中文字":["66.6"],"type":["67.1","73.96","73.112","80.1","80.2"],"src":["67.1","87.7"],"bigint":["67.2"],"的时候借鉴了":["67.3"],"java":["67.3"],"语言":["67.3"],"都会隐式转换":["67.4"],"事件循环":["67.5"],"同步执行完了":["67.5"],"才会执行事件循环的内容":["67.5"],"进入事件循环":["67.5"],"内部可以访问外部的变量":["67.6"],"但是外部不能访问内部的变量":["67.6"],"如果内部有":["67.6"],"注意变量提升":["67.7"],"操作符构建出来的":["67.11"],"所以对象之间不相等":["67.11"],"除了引用外":["67.11"],"c":["67.14"],"指向":["67.15","67.48"],"fn":["67.17","79.25"],"geta":["67.18"],"obj":["67.19"],"test1":["67.19"],"arr":["67.21","67.22","67.23","67.24"],"是否会改变原数组":["67.26"],"start":["67.27"],"end":["67.27"],"t":["67.28"],"unique":["67.31","67.32"],"str":["67.34"],"char":["67.35"],"charat":["67.35"],"将空对象的原型指向于构造函数的原型":["67.36"],"闭包是一个函数加上到创建函数的作用域的连接":["67.38"],"lis":["67.39","67.40"],"document":["67.39","67.40"],"getelementsbytagname":["67.40"],"for":["67.40","67.63","69.13"],"函数拥有":["67.41"],"对象拥有":["67.41"],"extends":["67.43","73.39"],"call":["67.46","67.64"],"bind":["67.47","67.49"],"可以立即执行":["67.49"],"不会立即执行":["67.49"],"的数组使用":["67.51"],"b":["67.52"],"assign":["67.52"],"深拷贝":["67.52"],"浏览器关了就没了":["67.53"],"始终有效":["67.53"],"窗口或者浏览器关闭了也一直存在":["67.53"],"所以是持久化存储":["67.53"],"resize":["67.54"],"setremunit":["67.54"],"没有变量提升的机制":["67.55"],"区别二":["67.55"],"obj1":["67.61","67.62"],"而且是不能修改的":["67.64"],"apply":["67.64"],"pending":["67.65"],"返回的内容不同":["67.66"],"系统自带有8个":["69.2"],"beforecreated":["69.2","69.7"],"如果请求是在":["69.3"],"中封装好的":["69.3"],"只要写异步代码":["69.4"],"获取":["69.4"],"次进入组件会执行哪些生命周期":["69.6"],"如果当前组件加入了":["69.6"],"父":["69.7"],"当前的组件会额外新增":["69.8"],"单组件请求":["69.9"],"str1":["69.11"],"子组件通过":["69.11"],"单向绑定":["69.12"],"的优先级":["69.13"],"then":["69.15"],"lastedittime":["71.0"],"demonstrates":["72.0"],"some":["72.0"],"additional":["72.1"],"features":["72.1"],"like":["72.1"],"line":["72.1"],"danger":["72.2"],"documentation":["72.3"],"鸿蒙应用开发快速体验":["73.0"],"准备开发环境":["73.1"],"调试以及发布应用的各项功能":["73.2"],"img":["73.2","73.8","73.13","73.67","73.80","87.7"],"以下是具体的安装步骤":["73.2"],"获取deveco":["73.2"],"studio安装包":["73.2"],"官方下载地址为":["73.2"],"https":["73.2","87.7"],"developer":["73.2"],"ohpm":["73.3"],"选择合适的安装路径":["73.3"],"完成后点击":["73.3"],"next":["73.3"],"即可":["73.3","73.4","73.7"],"注":["73.3"],"用于为鸿蒙应用的自动化构建工具提供运行环境":["73.3"],"openharmony":["73.3"],"此处选择第一个":["73.4"],"empty":["73.4"],"ability":["73.4"],"运行项目":["73.5"],"预览":["73.6"],"previewer":["73.6"],"后":["73.7"],"会首先下载模拟器相关的sdk":["73.7"],"下载完成后点击":["73.7"],"finish":["73.7"],"打开手机的开发者模式":["73.8"],"连续多次点击系统版本号":["73.8"],"直至出现":["73.8"],"您正处在开发者模式":["73.8"],"的提示信息":["73.8"],"arkts":["73.9","73.56","73.99"],"它由":["73.9"],"线上playground":["73.12"],"typescript提供了一个线上的":["73.12"],"安装code":["73.13"],"runner":["73.13"],"runner是一款在vscode中使用的插件":["73.13"],"它提供了简便的代码执行功能":["73.13"],"使开发者能够快速运行和调试代码片段":["73.13"],"常量声明":["73.16"],"用于声明变量":["73.16"],"如果一个变量或常量的声明包含了初始值":["73.17"],"ts":["73.17"],"表示字符串":["73.20"],"表示布尔值":["73.21"],"元素类型":["73.22"],"表示数字数组":["73.22"],"姓名":["73.23"],"张三":["73.23"],"年龄":["73.23"],"性别":["73.23"],"男":["73.23"],"未知":["73.27"],"p1":["73.27"],"printnumberorstring":["73.28"],"特殊类型":["73.30"],"若函数没有返回值":["73.30"],"函数的返回值类型可根据函数内容推断出来":["73.31"],"因此可以省略不写":["73.31"],"面向对象编程":["73.34"],"oriented":["73.34"],"programming":["73.34"],"简称oop":["73.34"],"age":["73.36","73.43","73.46"],"person":["73.37","73.39","73.40","73.46"],"zhangsan":["73.37"],"定义静态成员需要使用":["73.38"],"static":["73.38"],"关键字":["73.38"],"constants":["73.38"],"count":["73.38","79.6","79.7","79.12","79.13"],"student":["73.39"],"classnumber":["73.39"],"private":["73.40"],"protected":["73.40"],"概述":["73.42","73.73","73.76","73.102"],"introduce":["73.43"],"接口实现":["73.43"],"接口的实现需要用到":["73.43"],"很容易预想到":["73.45"],"这个系统将来可能需要支持其他的支付方式":["73.45"],"为了方便代码支持新的支付方式":["73.45"],"我们可以对代码进行如下改造":["73.45"],"首先定义一个支付策略的接口":["73.45"],"接口中声明一个":["73.45"],"用来规范实现类必须实现支付逻辑":["73.45"],"interface":["73.45"],"paymentstrategy":["73.45"],"amount":["73.45"],"gender":["73.46"],"枚举":["73.48"],"enumeration":["73.48"],"是编程语言中常见的一种数据类型":["73.48"],"枚举值的类型":["73.49"],"枚举值的类型为":["73.49"],"的名称":["73.49"],"等值的类型都是":["73.49"],"left":["73.50"],"right":["73.50"],"除了使用默认的数字作为属性的值":["73.50"],"模块化是指将复杂的程序拆解为多个独立的文件单元":["73.52"],"每个文件被称为一个模块":["73.52"],"同时引入":["73.54"],"modulea":["73.54"],"的内容":["73.54"],"如下":["73.54","73.80","73.128"],"显然就会出命名冲突":["73.54"],"默认导出":["73.55"],"默认导出允许一个模块指定一个":["73.55"],"最多一个":["73.55"],"默认的导出项":["73.55"],"语法如下":["73.55","87.8"],"快速入门":["73.56"],"声明式ui":["73.57"],"当前案例中":["73.58"],"界面共有两个状态":["73.58"],"分别是":["73.58","73.82"],"开灯":["73.58"],"若我们将":["73.60"],"ison":["73.60","73.65"],"的值改为":["73.60"],"那么界面上就会显示":["73.60"],"总结":["73.61"],"以上就是声明式ui开发范式的大致流程":["73.61"],"在鸿蒙开发中":["73.62"],"组件是构成界面的最小单元":["73.62"],"我们所看到的界面":["73.62"],"lightpage":["73.65"],"build":["73.65","73.69"],"column":["73.65"],"space":["73.65"],"声明组件的完整语法如下图所示":["73.67"],"各部分语法说明如下":["73.67"],"组件参数":["73.67"],"如果组件的定义包含参数":["73.67"],"可在组件名称后面的":["73.67"],"中配置相应参数":["73.67"],"可包含属性和方法":["73.69"],"方法用于声明自定义组件的ui结构":["73.69"],"组件属性":["73.69"],"组件属性可用作自定义组件的参数":["73.69"],"使得自定义组件更为通用":["73.69"],"现在需要对前文的开":["73.70"],"关灯的案例做出如下改造":["73.70"],"由于两个按钮的结构十分相似":["73.70"],"条件渲染可根据应用的不同状态渲染不同的ui界面":["73.73"],"例如前文的开":["73.73"],"关灯案例":["73.73"],"循环渲染可使用":["73.76"],"foreach":["73.76"],"数组中的数据项":["73.77"],"可选":["73.77"],"数组中的数据项的索引":["73.77"],"button":["73.77","73.99","77.6","78.5","82.1","82.2"],"backgroundcolor":["73.77","73.124"],"color":["73.77"],"green":["73.77","73.91"],"onclick":["73.77"],"answer":["73.77"],"图片":["73.78"],"类型的参数用于引入":["73.80"],"resources":["73.80","73.87"],"目录下的图片":["73.80"],"resources目录用于统一存放应用所需的各种资源":["73.80"],"包括图片":["73.80"],"音频":["73.80"],"视频":["73.80"],"文本等等":["73.80"],"下面简要介绍":["73.80"],"目录的用法":["73.80"],"首先需要了解":["73.80"],"的目录结构":["73.80"],"用于存放资源的子目录有":["73.80"],"element":["73.80","73.87"],"profile":["73.80"],"和rawfile":["73.80"],"下面分别介绍":["73.80"],"类型的参数可为百分比":["73.82"],"或者为具体尺寸":["73.82"],"100px":["73.82","73.89"],"具体尺寸的单位":["73.82"],"常用的有两个":["73.82"],"px":["73.82"],"vp":["73.82"],"下面逐个介绍":["73.82"],"前置知识":["73.82"],"屏幕参数":["73.82"],"pixel":["73.82"],"物理像素":["73.82"],"以像素个数来定义图像尺寸":["73.82"],"none":["73.83"],"保持原有尺寸显示":["73.83"],"不做任何缩放":["73.83"],"超出显示区域的部分不显示":["73.83"],"使图片显示得更清晰":["73.84"],"该方法的参数为":["73.84","73.112"],"imageinterpolation":["73.84"],"枚举类型":["73.84"],"可选的值有":["73.84"],"名称":["73.84","73.92"],"文本":["73.85"],"类型的参数用于引用":["73.87"],"目录中定义的字符串":["73.87"],"同样需要使用":["73.87"],"r":["73.87"],"引用":["73.87"],"string类型":["73.89","73.91"],"类型的参数可用于指定字体大小的具体单位":["73.89"],"字体大小的单位支持":["73.89"],"取值间隔为":["73.90"],"默认为":["73.90"],"取值越大":["73.90"],"字体越粗":["73.90"],"fontweight类型":["73.90"],"为枚举类型":["73.90","73.91"],"color类型":["73.91"],"其中包含了多种常用颜色":["73.91"],"可选的枚举值如下":["73.92"],"方法处理超出部分":["73.93"],"该方法的参数类型为":["73.93"],"overflow":["73.93"],"其中":["73.93","73.124"],"按钮":["73.94"],"buttontype":["73.96"],"stateeffect":["73.96"],"为按钮上显示的文字内容":["73.96"],"背景颜色":["73.98"],"按钮的颜色可使用":["73.98"],"方法进行设置":["73.99","73.124"],"方法为按钮绑定点击事件":["73.100"],"该方法的参数为一个回调函数":["73.100"],"当按钮被点击时":["73.100"],"就会触发该回调函数":["73.100"],"切换按钮":["73.101"],"属性用于设置":["73.103"],"组件的类型":["73.103"],"可通过":["73.103","73.114"],"选中状态背景色":["73.105"],"可使用设置":["73.106"],"switchpointcolor":["73.106"],"方法设置switch类型的toggle组件中的圆形滑块颜色":["73.106"],"开发者可通过":["73.107"],"onchange":["73.107"],"方法为":["73.107"],"组件绑定change事件":["73.107"],"该方法参数为一个回调函数":["73.107"],"文本输入":["73.108"],"placeholder":["73.110"],"resource":["73.110"],"方法设置输入框的类型":["73.112"],"placeholderfont":["73.114"],"输入文本的样式可通过":["73.115"],"fontsize":["73.115"],"fontweight":["73.115"],"就会触发":["73.117"],"change":["73.117"],"事件":["73.117","73.118"],"开发者可使用":["73.117"],"会触发":["73.118"],"focus":["73.118"],"失去焦点时":["73.118"],"blur":["73.118"],"进度条":["73.119"],"属性用于设置当前进度值":["73.121"],"属性用于设置总值":["73.121"],"scalecount":["73.123"],"scalewidth":["73.123"],"属性用于设置进度条的宽度":["73.123"],"弹窗":["73.125"],"弹窗是移动应用中常见的一种用户界面元素":["73.125"],"模块":["73.128"],"警告对话框":["73.130"],"用于向用户发出警告或确认操作的提示":["73.130"],"确保用户在敏感操作前进行确认":["73.130"],"操作列表弹窗":["73.133"],"用于提供一组选项给用户选择":["73.133"],"用户从中选择后":["73.133"],"可执行相应的操作":["73.133"],"summary":["73.136"],"ucbbb1a17":["73.136"],"strong":["73.136"],"span":["73.136","79.3","79.4","80.5"],"ne":["73.136"],"textpickerdialog":["73.136"],"使用说明":["73.137"],"具体用法可参考相关案例或者官方文档":["73.137"],"各选择器的官方文档地址如下":["73.137"],"可考虑自定义弹窗":["73.139"],"自定义弹窗允许开发者自定义弹窗内容和样式":["73.139"],"中使用":["76.3"],"单文件组件设置全局css样式":["76.5"],"该怎么设置呢":["76.5"],"转化为全局作用域":["76.7"],"local":["76.7"],"将其插槽内容渲染到另一个dom":["77.1"],"成为该dom的一部分":["77.1"],"的子元素":["77.2"],"将内容渲染到":["77.3"],"使它只接收":["77.5"],"primary":["77.5"],"ghost":["77.5"],"你应该确保参数被正确传递":["77.12"],"事件被正常触发和插槽内容正常渲染":["77.12"],"让我们开始吧":["77.12","77.15"],"default":["77.13"],"on":["78.1","78.2"],"mouse":["78.9","78.10"],"position":["78.9","78.10"],"update":["79.6","79.7"],"调整回调函数的刷新时机":["79.14"],"参考回调的刷新时机及":["79.14"],"watcheffect":["79.14"],"默认情况下":["79.14"],"用户创建的侦听器回调":["79.14"],"ref":["79.18","87.5"],"依赖注入":["79.20"],"track":["79.29"],"trigger":["79.29"],"以便只渲染一次元素和组件":["80.4"],"并且跳过以后的更新":["80.4"],"组件及其所有子项将被当作静态内容并跳过渲染":["80.6"],"这可以用来优化更新时的性能":["80.6"],"debounce":["80.11","80.12"],"item":["80.14","80.15"],"list":["80.14","80.15"],"指令":["80.16"],"click2":["81.2"],"enter":["81.4"],"时调用":["81.4"],"vm":["81.4"],"submit":["81.4"],"keyup":["81.4"],"onclick1":["81.5"],"xx":["84.1"],"来完成它":["84.1"],"根据一个":["84.3"],"until":["85.1"],"数据":["87.1"],"计算属性等":["87.1"],"可直接在模板中使用":["87.3"],"中访问":["87.3"],"函数会在":["87.3"],"beforecreate":["87.3"],"之前调用":["87.3"],"初始值":["87.4"],"返回值":["87.4"],"一个":["87.4"],"refimpl":["87.4"],"的实例对象":["87.4"],"简称":["87.4"],"基本类型不要用它":["87.5"],"要用":["87.5"],"其实":["87.6"],"可以使用":["87.7"],"volar":["87.7"],"插件自动添加":["87.7"],"gitee":["87.7"],"com":["87.7"],"xuchp":["87.7"],"但":["87.8"],"可以批量转换":["87.8"]},{"0":["0.73","0.79","0.82","0.83","58.73","58.79","58.82","58.83","67.3","67.31","67.40","73.91"],"1":["0.27","0.33","0.65","0.67","0.74","0.75","14.0","58.27","58.33","58.65","58.67","58.74","58.75","63.11","67.24","67.35","73.15","73.25","73.38","73.64","79.4","79.6","79.7"],"2":["0.22","0.24","1.1","56.5","58.22","58.24","63.14","67.12","67.21","67.22","67.24","69.8","73.2","81.2"],"3":["0.24","0.63","0.84","0.90","1.1","9.0","56.5","58.24","58.63","58.84","58.90","62.5","62.24","63.22","67.3","67.5","67.6","67.11","67.16","67.23","67.25","67.36","67.41","73.29"],"4":["0.60","0.79","1.1","58.60","58.79","67.60","73.50"],"5":["0.20","0.82","1.1","58.20","58.82","67.30"],"6":["0.43","0.82","57.1","58.43","58.82"],"7":["0.83","58.83"],"8":["69.8"],"9":["73.19"],"10":["0.34","58.34","73.27","73.46"],"12":["62.3"],"13":["62.3"],"14":["87.3"],"15":["73.27","87.3"],"18":["0.65","58.65","73.36"],"23":["87.3"],"25":["0.66","58.66"],"26":["0.16","58.16"],"30":["87.3"],"32":["0.70","58.70"],"33":["61.2"],"87":["87.7"],"123":["67.14"],"200":["80.11","80.12"],"857":["67.33"],"1000":["63.4","67.33"],"1001":["67.33"],"1234":["0.34","58.34"],"1920":["63.22"],"2024":["87.3"],"test":["0.2","58.2","73.31"],"和变量":["0.2","58.2"],"或美元符号":["0.3","58.3"],"剩下的其他字符可以是":["0.3","58.3"],"如":["0.4","0.65","57.1","58.4","58.65"],"js":["0.4","0.5","0.13","0.18","0.26","0.39","0.80","3.1","30.0","47.2","51.0","54.2","58.4","58.5","58.13","58.18","58.26","58.39","58.80","72.1"],"use":["0.5","58.5"],"strict":["0.5","58.5"],"虽然看起来像个没有赋值给任何变量的字符串":["0.5","58.5"],"class":["0.7","58.7","73.43","87.8"],"extends":["0.7","58.7"],"return":["0.7","9.0","55.4","58.7","67.34"],"while":["0.7","58.7","62.19"],"这些关键字有特殊用途":["0.8","58.8"],"package":["0.10","58.10","73.3"],"其中":["0.12","58.12","73.89"],"在":["0.12","58.12","65.4","69.3"],"即标识符":["0.13","58.13"],"不过":["0.14","58.14"],"在函数内定义变量时省去":["0.14","58.14"],"操作符":["0.14","58.14"],"可以创建一个全局变量":["0.14","58.14"],"没有":["0.14","24.0","58.14"],"会被挂载到":["0.14","58.14"],"运行时把它看成等价于如下代码":["0.15","58.15"],"age":["0.16","0.17","0.25","58.16","58.17","58.25","73.40"],"matt":["0.17","58.17"],"不会被提升":["0.17","58.17"],"声明的变量则会":["0.18","58.18"],"name":["0.18","58.18","67.44","67.46","73.23","73.37","77.13","87.8"],"let":["0.19","1.1","54.3","58.19","67.54","73.19","73.49","87.5"],"settimeout":["0.20","58.20"],"console":["0.20","0.25","0.45","58.20","58.25","58.45","67.13","67.18","67.23","67.25","67.58","73.27","73.28","73.31","73.32","73.37","73.44","73.55"],"log":["0.20","0.25","0.45","58.20","58.25","58.45","67.8","67.17","67.18","67.58","73.27","73.28","73.32","73.37","73.44"],"声明的作用域也是块":["0.21","58.21"],"if":["0.21","0.26","10.3","36.3","37.3","39.0","55.2","58.21","58.26","77.16"],"true":["0.21","0.45","55.1","58.21","58.45","60.11","73.21"],"null":["0.23","58.23"],"boolean":["0.24","29.3","58.24","73.58","73.107"],"表示值为布尔值":["0.24","58.24"],"uncaught":["0.25","58.25"],"只要检查这个变量的值是不是":["0.26","58.26"],"就可以知道这个变量是否在后面被重新赋予了一个对象的引用":["0.26","58.26"],"比如":["0.26","0.47","58.26","58.47"],"car":["0.26","58.26"],"不等于":["0.27","58.27"],"string":["0.28","0.44","58.28","58.44","62.2","69.11","73.22","73.23","73.40","73.128"],"非空字符串":["0.28","58.28"],"空字符串":["0.28","58.28"],"ieee":["0.29","58.29"],"就回忽略前缀的":["0.30","58.30"],"后面的数字被当做十进制":["0.30","58.30"],"的情况下":["0.31","58.31"],"就会变成整数":["0.31","58.31"],"floatnum1":["0.31","58.31"],"小数点后面没有数字":["0.31","58.31"],"当成整数":["0.31","58.31"],"负无穷大":["0.32","58.32"],"表示":["0.32","0.87","58.32","58.87"],"任何无法表示的正数以":["0.32","58.32"],"注意":["0.32","58.32","67.7"],"一旦得到":["0.32","58.32"],"就不能再进一步用于任何计算":["0.32","58.32"],"因为":["0.32","58.32","62.6","67.49"],"独特属性":["0.33","58.33"],"任何涉及":["0.33","58.33"],"的操作始终返回":["0.33","58.33"],"在连续多步计算时这可能是个问题":["0.33","58.33"],"则继续依次检测每一个字符":["0.34","58.34"],"直到字符串末尾":["0.34","58.34"],"或碰到非数值字符":["0.34","58.34"],"假设字符串中第一个字符是数值字符":["0.34","58.34"],"函数也能识别不同的整数格式":["0.34","58.34"],"十进制":["0.34","58.34"],"八进制":["0.34","58.34"],"十六进制":["0.34","58.34"],"换句话说":["0.34","58.34"],"如果字符串以":["0.34","58.34"],"0x":["0.34","58.34"],"开头":["0.34","58.34"],"就会被解释为十六进制":["0.34","58.34"],"且紧跟着数值字符":["0.34","58.34"],"在非严格模式下会被某些实现解释为八进制":["0.34","58.34"],"1234blue":["0.34","58.34"],"0xa":["0.34","58.34"],"解释为十六进制":["0.34","58.34"],"位":["0.35","58.35"],"unicode":["0.35","58.35"],"要修改某个变量中的字符串值":["0.37","58.37"],"数值调用":["0.38","58.38"],"可以夸行定义字符串":["0.39","58.39"],"模板字面量在定义时立即求值并转换为字符串实例":["0.40","58.40"],"任何插入的变量也会从它们最接近的作用域中取值":["0.40","58.40"],"字符串插值通过在":["0.40","58.40"],"中使用一个":["0.40","58.40"],"会接收被插值记号分隔后的模板和对每个表达式求值的结果":["0.41","58.41"],"标签函数本身是一个常规函数":["0.41","58.41"],"而不是被转":["0.42","58.42"],"换后的字符表示":["0.42","58.42"],"或":["0.44","58.44","87.4"],"number":["0.44","58.44","73.38"],"那样":["0.44","58.44"],"它们都支持构造函数且可用于初始化包含原":["0.44","58.44"],"始值的包装对象":["0.44","58.44"],"全局注册表中的符号必须使用字符串键来创建":["0.45","58.45"],"因此作为参数传给":["0.45","58.45"],"defineproperty":["0.46","6.3","15.0","58.46","62.5"],"我们知道":["0.47","58.47"],"for":["0.47","26.2","58.47","67.31","67.32","67.39","72.3"],"of":["0.47","58.47","62.16","72.0"],"循环会在相关对象上使用":["0.47","58.47"],"ispropertyof":["0.60","58.60"],"用于判断当前对象是否为另一个对象的原型":["0.60","58.60"],"propertyisenumerable":["0.60","58.60"],"一元操作符是":["0.62","58.62"],"nan":["0.63","0.86","58.63","58.86"],"变量类型从字符串变为数值":["0.63","58.63"],"对于布尔值":["0.63","58.63"],"如果是":["0.63","0.77","0.78","58.63","58.77","58.78"],"false":["0.63","58.63"],"则转换成":["0.63","58.63"],"放在变量前头":["0.64","58.64"],"对数值没有任何影响":["0.64","58.64"],"个步骤计算":["0.65","58.65"],"得到":["0.65","58.65"],"确定绝对值的二进制表示":["0.65","58.65"],"对于":["0.65","58.65"],"二进制00000000000000000000000000011001":["0.66","58.66"],"第二个数值的位":["0.67","58.67"],"结果":["0.67","58.67"],"按位异或":["0.68","58.68"],"对于负数":["0.71","58.71"],"有时候差异会非常大":["0.71","58.71"],"与有符号右移不同":["0.71","58.71"],"如果操作数是非空字符串":["0.73","58.73"],"如果操作数是数值":["0.73","58.73"],"则逻辑与并不一定会返回布尔值":["0.74","58.74"],"而是遵循如下规则":["0.74","58.74"],"如果第一个操作数是对象":["0.74","0.75","58.74","58.75"],"则返回第二个操作数":["0.74","58.74"],"如果第二个操作数是对象":["0.74","58.74"],"则只有第一个操作数求值为":["0.74","58.74"],"那么逻辑或操作符也不一定返回布尔值":["0.75","58.75"],"它遵循如":["0.75","58.75"],"下规则":["0.75","58.75"],"则返回第一个操作数":["0.75","58.75"],"个乘性操作符":["0.76","58.76"],"乘以":["0.77","58.77"],"除以":["0.78","58.78"],"如果被除数是":["0.79","58.79"],"指数操作符也有自己的指数赋值操作符":["0.80","58.80"],"该操作符执行指数运算和结果的赋值操作":["0.80","58.80"],"如果有任一操作数是数值":["0.84","58.84"],"则将另一个操作数转换为数值":["0.84","58.84"],"执行数值比较":["0.84","58.84"],"它们在比较之前不执行转换":["0.85","58.85"],"undefined":["0.86","58.86","67.8","67.57"],"相等":["0.86","58.86"],"不能转换为其他类型的值在进行比较":["0.86","58.86"],"如果有任一操作数是":["0.86","58.86"],"则相等操作符返回":["0.86","58.86"],"不相等操作符返回":["0.86","58.86"],"的值决定将哪个值赋给变量":["0.88","58.88"],"如果":["0.88","58.88"],"除后赋值":["0.89","58.89"],"也可以使用逗号操作符来辅助":["0.90","58.90"],"赋值":["0.90","58.90"],"官方":["1.0"],"vue是一套用于构架用户界面的":["1.0"],"numbers":["1.1"],"backbone":["1.2"],"underscore":["1.2"],"jquery":["1.2"],"对于前端而言":["1.2"],"数据变化无法同步到视图中":["1.2"],"后":["1.3"],"的渲染核心就是调用渲染":["1.4"],"render":["1.4","3.2","3.3","18.1","55.4","55.5","77.13"],"方法将虚拟":["1.4"],"低耦合":["1.5"],"的理解":["2.0","35.0"],"切换页面时通过监听路由变化":["2.1"],"渲染对应的页面client":["2.1"],"side":["2.1"],"rendering":["2.1"],"客户端渲染":["2.1"],"csr":["2.1"],"mpa":["2.1"],"搜索引擎优化":["2.2"],"无法实现":["2.2"],"容易实现":["2.2"],"页面切换":["2.2"],"速度快":["2.2"],"html":["2.3","63.5","67.1","80.6"],"页面":["2.3"],"就是在打包的时候":["2.3"],"就是用":["3.1"],"对象来描述真实":["3.1"],"是对真实":["3.1"],"template":["3.2","15.0","22.1","29.3","77.1","77.12","81.4"],"这个模板会被编译器编译为渲染函数":["3.2"],"将会引起组件刷新":["3.3"],"此时就会生成新的":["3.3"],"事件":["4.0","56.5","67.5"],"插槽":["4.0"],"或者":["4.1","62.3"],"内部设计原因导致":["5.0"],"设计的是每个组件一个":["5.0"],"使用":["6.1"],"object":["6.1","9.0","62.8","62.9","67.2"],"setter":["6.2"],"性能差":["6.2"],"当新增属性和删除属性时无法边控变化":["6.2"],"需要通过":["6.2"],"get":["6.3","79.29"],"记录渲染":["6.3"],"watcher":["6.3","38.0"],"set":["6.3"],"newvalue":["6.3"],"让记录的":["6.3"],"重新执行一下即可":["6.3"],"而是选择重写数组":["7.1"],"push":["7.1"],"数组的索引和长度变化是无法监控的":["7.2"],"去更新":["8.1"],"默认在初始化时会调用":["8.1"],"effect":["8.2"],"映射起来":["8.2"],"splice":["9.0"],"如果是对象本身的属性":["9.0"],"则直接添加即可":["9.0"],"in":["9.0","17.0","73.67"],"prototype":["9.0","67.44"],"如果条件不成立不会渲染当前指令所在节点的":["10.1"],"dom":["10.1","35.1","55.1","69.9"],"explorer":["10.2"],"vuejs":["10.2"],"用户":["11.0"],"computed属性是具备缓存的":["11.1"],"当值发生变化时调用对应的回调函数":["11.2"],"经常用于监控某个值的变化":["11.2"],"区别":["12.0"],"数据响应式中非常重要的两个概念":["12.1"],"用于处理对象类型的数据响应":["12.1"],"run":["13.0"],"函数":["13.0","67.48","73.24"],"app":["13.0"],"innerhtml":["13.0"],"state":["13.0","60.4","79.16","79.17"],"将":["14.0"],"模板转换成":["14.0"],"内哦不会对数据进行劫持":["15.0"],"对象采用":["15.0"],"数组采用方法重写":["15.0"],"再看一下用户是否传入了":["15.0"],"el":["15.0"],"属性和":["15.0"],"新增的一个":["16.0"],"api":["16.0","53.0","73.67"],"i":["17.0","67.31","67.32","67.40","73.44"],"arr":["17.0"],"一般也不咋用":["18.1"],"beforemount再挂载之前被调用":["18.1"],"相关的":["18.1"],"函数首次被调用":["18.1"],"mounted":["18.1"],"被新创建的":["18.1"],"更新之前":["18.2"],"updated":["18.2","69.2"],"组件数据更新之后":["18.2"],"beforedestroy":["18.2","69.2"],"beforeunmount":["18.2"],"组件实例销毁之前":["18.2"],"destroyed":["18.2"],"unmounted":["18.2"],"diff":["19.0"],"做更新":["19.1"],"老的没儿子":["19.2"],"现在有儿子":["19.2"],"直接插入新的儿子":["19.2"],"老的有儿子":["19.2"],"新的没儿子":["19.2"],"中":["20.0","69.13","73.52"],"对比时辨识":["20.1"],"vnode":["20.1","37.2"],"如果不使用":["20.1"],"过程中通过":["20.2"],"是干什么的":["21.0"],"必须提供":["21.1"],"install":["21.1"],"方法":["21.1","60.8","62.6"],"全局组件":["21.2"],"通过全局混入来添加一些组件选项":["21.2"],"additional":["21.3"],"parameters":["21.3"],"args":["21.3"],"toarray":["21.3"],"arguments":["21.3"],"除了第一项":["21.3"],"方法的作用":["22.0"],"var":["22.1","67.16","67.57"],"profile":["22.1"],"p":["22.1","79.1","79.2","79.23","79.24","83.1","83.2"],"firstname":["22.1"],"extend":["22.2"],"方法进行创建":["22.2"],"存起来":["23.0"],"this":["23.0","67.17","73.39"],"constructor":["23.0","73.36","73.40"],"函数式组件就是普通的函数":["24.0"],"new":["24.0","47.5","73.7"],"function":["25.0","55.4","55.5","67.33","73.31","73.32","73.55","79.25"],"value":["25.0","30.0","60.6","62.5"],"返回处理后的值":["25.0"],"filterb":["25.0"],"的使用场景有哪些":["26.0"],"是":["26.1","36.1","55.1"],"compoent":["26.2"],"指令":["26.2"],"混入":["27.1"],"采用策略模式针对不同的属性进行合并":["27.1"],"如果混入的数据和本身组件中的数据冲突":["27.1"],"局部混入":["27.2"],"inject":["27.3"],"computed同名时会被替换":["27.3"],"slot":["28.0","31.2"],"components":["28.1"],"规范草案":["28.1"],"可以通过具名插槽指定渲染的位置":["28.2"],"v":["28.3","39.0","55.1","55.3","76.3","79.27","79.28"],"作用域插槽":["28.3"],"可以绑定一个动态值到视图上":["29.1"],"同时修改视图能改变数据对应的值":["29.1"],"的处理逻辑":["29.2"],"例如":["29.2","69.4","73.17","73.20","73.48","73.50","73.87","73.100","73.106"],"checked":["29.3"],"event":["29.3"],"change":["29.3"],"props":["29.3","55.4","55.5"],"修饰符绑定多个属性":["30.0"],"my":["30.0"],"编写递归组件":["31.1"],"在组件中调用自己":["31.1"],"submenu":["31.1"],"elsubmenu":["31.2"],"div":["31.2","63.9"],"title":["31.2","77.16"],"方便调试和查找对应组件":["32.0"],"children":["32.0","55.1"],"filter":["32.0"],"item":["32.0"],"prevent":["33.0"],"self":["33.0"],"once":["33.0","80.5"],"这个工厂函数会异步解析你的组件定义":["34.1"],"import":["34.2","60.8","61.2","61.5"],"webpackchunkname":["34.2"],"b4":["34.2"],"默认渲染异步占位符节点":["34.3"],"方法可以保证用户定义的逻辑在更新之后执行":["35.1"],"可用于获取更新后的":["35.1"],"平时在哪里使用":["36.0"],"vue":["36.1","47.2","47.5","53.0","55.4","55.5","77.12","77.15","79.14","84.1","84.3","87.3"],"router":["36.2","59.0"],"view":["36.2"],"getfirstcomponentchild":["36.3"],"获得第一个组组件":["36.3"],"componentoptions":["36.3"],"check":["36.3"],"pattern":["36.3"],"getcomponentname":["36.3"],"获取组件名":["36.3"],"看是否需要缓存":["36.3"],"不需要缓存则直接返回":["36.3"],"not":["36.3"],"included":["36.3"],"to":["36.4","77.2"],"from":["36.4","55.4","55.5","60.3","60.8"],"next":["36.4","62.19","73.7"],"同时":["37.1"],"update":["37.2","79.3","79.4"],"所在组件的":["37.2"],"更新时调用":["37.2"],"hide":["37.3"],"input":["37.3","63.20","66.1","72.1"],"type":["37.3","55.1","69.11","73.99"],"text":["37.3","66.6","80.1","80.2"],"focus":["37.3","80.8","80.9"],"show":["37.3","39.0","73.67"],"有调度中心统一调度订阅者注册到调度中心的处理代码":["38.0"],"观察者模式":["38.0"],"和":["38.0","39.0","62.24","63.11","67.50","73.80"],"dep":["38.0"],"强制缓存":["40.0"],"对比缓存":["40.0"],"localstorage":["40.0"],"实现缓存资源":["40.0"],"cross":["41.0"],"origin":["41.0"],"resource":["41.0"],"sharing":["41.0"],"设置拦截请求":["42.0"],"自动添加":["42.0"],"如果控制到按钮级别的权限怎么做":["43.0"],"当页面刷新时我们可以使用token":["43.1"],"来获得用户权限":["43.1"],"访问权限":["43.1"],"根据用户是否登录判断能否访问一个页面":["43.1"],"通过路由守卫实现判断用户是否有此权限":["43.1"],"在路由配置里调用":["44.0"],"beforeenter":["44.0"],"解析异步路由组件":["44.0"],"在被激活的组件里调用":["44.0"],"不依赖于浏览器历史":["45.0"],"模式":["45.0"],"是什么原因呢":["46.0"],"的个人理解":["47.0"],"修改状态":["47.3"],"状态是一个树状结构":["47.4"],"最终会将模块的状态挂载到根模块上":["47.4"],"模块和状态的名字冲突":["47.4"],"watch":["48.0"],"监控":["48.0"],"不存在则发请求重新拉去数据":["49.0"],"存储到":["49.0"],"中可以多次进行":["50.0"],"commit":["50.0"],"action":["51.0"],"getter":["51.0"],"甚至是嵌套子模块":["51.0"],"const":["51.0","60.5","60.7","60.9","60.10","62.6","73.16","73.53"],"modulea":["51.0"],"访问":["52.0"],"存在指向明确问题":["52.0"],"中很多未使用的方法或者属性依旧会被打包":["52.0"],"并且所有全局":["52.0"],"机制实现按需引入":["53.0"],"减少用户打包后的体积":["53.0"],"重写":["53.0"],"允许自定义渲染器":["53.0"],"扩展能力强":["53.0"],"不会发生以前的事情":["53.0"],"改写":["53.0"],"被定义":["54.1"],"所有的错误仍会发送给它":["54.1"],"因此这些错误仍然会向单一的分析服务的地方进行汇报":["54.1"],"配置函数":["54.2"],"data":["54.3","55.4","87.1"],"err":["54.3"],"json":["55.1","73.87"],"isvnode":["55.1"],"key":["55.1","80.14","80.15"],"symbol":["55.1","62.5"],"nu1l":["55.1"],"flag":["55.2"],"span":["55.2"],"a":["55.2","67.62","73.19","73.28","73.44","73.53","81.5"],"export":["55.4","55.5","60.3","60.5","60.9","60.10","73.55"],"ctx":["55.4","55.5"],"cache":["55.4","55.5"],"setup":["55.4"],"options":["55.4","73.128"],"todisplaystring":["55.5"],"所定义的那样":["56.1"],"完整的":["56.1"],"包含以下几个部分":["56.1"],"包含如下几个部分":["56.3"],"语法":["56.3","67.48","87.5"],"是一个应用编程接口":["56.4"],"css":["56.5"],"样式前后的文档":["56.5"],"的接口":["56.5"],"描述事件及事件处理的接口":["56.5"],"移动":["56.6"],"缩放和关闭浏览器窗口的能力":["56.6"],"对象":["56.6"],"提供关于浏览器的详尽信息":["56.6"],"如果接收到的资源的签名与这个属性指定的签名不匹配":["57.1"],"则页面会报错":["57.1"],"脚本不会执行":["57.1"],"这个属性可以用于确保内容分发网络":["57.1"],"cdn":["57.1"],"content":["57.1","63.1","63.6"],"delivery":["57.1"],"network":["57.1"],"不会提供恶意内容":["57.1"],"language":["57.1"],"废弃":["57.1"],"最初用于表示代码块中的脚本语言":["57.1"],"javascript":["57.1","62.14"],"javascript1":["57.1"],"declare":["59.0"],"module":["59.0","73.53"],"npm":["60.1"],"pinia":["60.2","60.3","60.8","60.9","60.10"],"piniapluginpersistedstate":["60.2"],"进行序列化":["60.4"],"反序列化":["60.4"],"整个":["60.4"],"默认将被持久化":["60.4"],"如何你不想使用默认的配置":["60.4"],"usestore":["60.5","60.7","60.9","60.10"],"void":["60.6","73.30","73.44","73.45"],"store":["60.7","60.9","60.10"],"save":["60.7"],"typescript":["60.8","61.2","61.5","73.13","73.52"],"definestore":["60.8"],"时":["60.11","73.77"],"icons":["61.1"],"d":["61.1"],"style":["61.2"],"zoom":["61.2"],"path":["61.2"],"resolve":["61.2"],"svgclass":["61.3"],"aria":["61.3"],"hidden":["61.3"],"svg":["61.4"],"component":["61.4","73.69"],"array":["62.1"],"regexp":["62.1","62.6"],"date":["62.1","87.3"],"call":["62.2","67.45"],"同上结果":["62.2"],"加上call也ok":["62.2"],"的隐式转换规则":["62.3"],"如果类型相同":["62.3"],"无需进行转换":["62.3"],"如果一个操作值是":["62.3"],"那么另一个操作符必须是":["62.3"],"才会返回":["62.3"],"否则都返回":["62.3"],"如果其中有一个是":["62.3"],"类型":["62.3","73.23","73.137"],"那么返回":["62.3"],"两个操作值如果都为":["62.3"],"那么就会将字符串转换为":["62.3"],"它不会拷贝对象的继承属性":["62.5"],"它不会拷贝对象的不可枚举属性":["62.5"],"可以拷贝":["62.5"],"类型的属性":["62.5"],"obj1":["62.5"],"sym":["62.5"],"innumerable":["62.5"],"不可枚举属性":["62.5"],"reflect":["62.6"],"ownkeys":["62.6"],"当参数是":["62.6"],"则直接生成一个新的实例返回":["62.6"],"利用":["62.6"],"的":["62.6","73.45"],"getownpropertydescriptors":["62.6"],"方法可以获得对象的所有属性":["62.6"],"以及对应的特性":["62.6"],"顺便结合":["62.6"],"create":["62.6","62.8","62.9"],"方法创建一个新对象":["62.6"],"并继承传入源对象的原型链":["62.6"],"weakmap":["62.6"],"类型作为":["62.6"],"hash":["62.6"],"表":["62.6"],"是弱引用类型":["62.6"],"可以有效防止内存泄漏":["62.6"],"作为检测循环引用很有帮助":["62.6"],"如果存在循环":["62.6"],"则引用直接返回":["62.6"],"存储的值":["62.6"],"iscomplexdatatype":["62.6"],"提升开发效率":["62.7"],"20240117094228124":["62.8"],"四":["62.8"],"原型式继承":["62.8"],"一是用作新对象原型的对象":["62.8"],"二是为新对象定义额外属性的对象":["62.8"],"可选参数":["62.8"],"parent4":["62.8"],"friends":["62.8"],"p1":["62.8"],"p2":["62.8","73.27"],"p3":["62.8"],"person4":["62.8"],"tom":["62.8"],"jerry":["62.8"],"person5":["62.8"],"lucy":["62.8"],"obj":["62.9"],"proto":["62.9","67.41"],"res":["62.9"],"isobject":["62.9"],"这样的组合就是闭包":["62.11"],"也就是说":["62.11"],"如果没找到":["62.12"],"workers":["62.13"],"或者任何异步中":["62.13"],"只要使用了回调函数":["62.13"],"值或对象":["62.14"],"第一个参数是需要解析处理的":["62.14"],"次方":["62.16"],"最大为":["62.16"],"math":["62.16"],"pow":["62.16"],"否则将抛出":["62.16"],"rangeerror":["62.16"],"用于将参数依次转化为数组中的一项":["62.16"],"然后返回这个新数组":["62.16"],"用来判断一个变量是否为数组类型":["62.17"],"slice":["62.18"],"tostring":["62.18"],"tolocalstring":["62.18"],"indexof":["62.18"],"lastindexof":["62.18"],"扩展运算符实现":["62.19"],"以及":["62.21"],"选择排序":["62.23"],"选择排序是一种简单直观的排序方法":["62.23"],"首先将最小的元素存放在序列的起始位置":["62.23"],"再从剩余未排序元素中继续寻找最小元素":["62.23"],"然后放到已排序的序列后面":["62.23"],"以此类推":["62.23"],"直到所有元素均排序完毕":["62.23"],"selectsort":["62.23"],"minindex":["62.23"],"的相对位置不变":["62.24"],"是每一行文字的高":["63.2"],"子元素":["63.3"],"ul":["63.3"],"li":["63.3","67.39"],"子元素选择器":["63.3"],"权重值":["63.4"],"第二":["63.4"],"flex":["63.6"],"justify":["63.6"],"center":["63.6","73.92"],"align":["63.6"],"items":["63.6"],"元素前后没有换行符":["63.7"],"行内块元素":["63.7"],"的原则":["63.8"],"一个元素具有":["63.8"],"那么内部元素再怎么弄":["63.8"],"都不会影响到外面的元素":["63.8"],"clear":["63.9"],"both":["63.9"],"ui":["63.10","63.22"],"给前端设计图一般都是偶数":["63.10"],"的区别":["63.11","67.47"],"c":["63.12"],"normalize":["63.13"],"为了增强跨浏览器渲染的一致性":["63.13"],"优缺点":["63.14"],"占用位置区别":["63.15"],"是不占位置的":["63.15"],"虽然隐藏了":["63.15"],"但是占用位置":["63.15"],"表示完全透明":["63.16"],"表示不透明":["63.16"],"两个冒号":["63.17"],"是伪元素":["63.17"],"是为了做区分":["63.17"],"16px":["63.18"],"每个浏览器默认字体大小不一定一样":["63.18"],"是针对于父元素的":["63.19"],"height":["63.21","73.65","73.140"],"min":["63.21"],"会使用自适应的布局方式":["63.22"],"的设计图":["63.22"],"笔记本电脑":["63.22"],"h6":["65.1"],"空元素":["65.1"],"br":["65.1"],"hr":["65.1"],"元素之间的转换问题":["65.1"],"所以在兼容性上":["65.2"],"场景":["65.3"],"网站的":["65.3"],"logo":["65.3"],"都是用":["65.3"],"标签包裹的":["65.3"],"图片无法加载时显示的值":["65.4"],"区别二":["65.4"],"采用压缩算法":["65.5"],"有一点失真":["65.5"],"成分会更好":["65.6"],"蜘蛛抓取更好":["65.6"],"webkit":["66.2"],"tap":["66.2"],"touch":["66.4"],"none":["66.5","73.84"],"textarea":["66.6"],"等":["67.1"],"全部解析完成":["67.1"],"引用类型":["67.2","67.11"],"字符串和其他类型相加":["67.2"],"会被隐式转化成":["67.3"],"很不容易发现错误":["67.3"],"现有":["67.3"],"通过":["67.4"],"valueof":["67.4"],"请求":["67.5"],"定时器":["67.5"],"优先查找内部":["67.6"],"如果内部没有就查找外部的":["67.6"],"注意声明变量是用":["67.6"],"b":["67.9","67.60"],"对象注意":["67.11"],"world":["67.13"],"原型考题":["67.15"],"test2":["67.19"],"t":["67.27"],"newarr":["67.31","67.32"],"else":["67.35"],"max":["67.35"],"闭包":["67.38"],"getelementsbytagname":["67.39"],"对象查找属性或者方法的顺序":["67.41"],"super":["67.43","73.39"],"张三":["67.44","67.46","73.46"],"返回的是一个函数":["67.49"],"bind":["67.50","67.64"],"btn":["67.50"],"h1s":["67.50"],"大的数组则使用":["67.51"],"之前的版本是":["67.51"],"插入排序和快排":["67.51"],"是复制真正的值":["67.52"],"不同引用":["67.52"],"只在设置的":["67.53"],"过期时间之前有效":["67.53"],"即时窗口或者浏览器关闭":["67.53"],"也不会失效":["67.53"],"fontsize":["67.54"],"可以多次声明同一个变量":["67.55"],"str":["67.57","73.38"],"箭头函数的":["67.64"],"进行中":["67.65"],"返回的是数组":["67.66"],"如果有一项匹配":["67.67"],"beforeupdate":["69.2"],"destoryed":["69.2"],"调用的时候":["69.3"],"阶段是拿不到":["69.3"],"是在异步中获取的":["69.4"],"就可以了":["69.4"],"beforecreated":["69.5"],"alive":["69.6"],"只会执行一个生命周期":["69.6"],"created":["69.7"],"beforemount":["69.7"],"个生命周期":["69.8"],"系统":["69.8"],"同步可以获取":["69.9"],"如果子组件请求后父组件请求":["69.9"],"来接收":["69.11"],"default":["69.11","73.55"],"双向绑定":["69.12"],"vue2":["69.13"],"setimmediate":["69.15"],"mutationobserver":["69.15"],"宏任务":["69.15"],"the":["72.0"],"md":["72.1"],"dangerous":["72.2"],"details":["72.2"],"com":["73.2"],"consumer":["73.2"],"cn":["73.2","73.80"],"解压之后双击":["73.2"],"manager":["73.3"],"是鸿蒙生态第三方库的包管理工具":["73.3"],"支持共享包的发布":["73.3"],"安装和依赖管理":["73.3"],"为":["73.3"],"harmonyos":["73.3"],"sdk":["73.3"],"配置项目":["73.4"],"可能需要调整的配置项如下":["73.4"],"其余保持默认即可":["73.4"],"配置完成后":["73.4"],"deveco":["73.5"],"预览用于查看应用的ui界面效果":["73.6"],"方便随时调整界面ui布局":["73.6"],"选择模拟的安装目录":["73.7"],"完成后点击":["73.7"],"emulator":["73.7"],"选择设备类型":["73.7"],"phone":["73.7","73.80"],"开启usb调试":["73.8"],"系统与更新":["73.8"],"开发人员选项":["73.8"],"打开":["73.8"],"usb调试":["73.8"],"开关":["73.8","73.103"],"使用usb数据线将手机和电脑相连":["73.8"],"简称ts":["73.9"],"扩展而来":["73.9"],"快速入门":["73.10"],"运行环境说明":["73.11"],"playground":["73.12"],"供练习使用":["73.12"],"安装ts":["73.13"],"node":["73.13"],"node是一个":["73.13"],"它允许我们直接运行":["73.13"],"代码":["73.13"],"node的安装和运行依赖于node":["73.13"],"声明":["73.14"],"而":["73.16"],"便可以根据初始值进行类型推断":["73.17"],"此时我们就可以不显式指定其类型":["73.17"],"常用数据类型":["73.18"],"你好":["73.20"],"可选值为":["73.21"],"表示字符串数组":["73.22"],"数组类型的变量可由数组字面量":["73.22"],"对象类型的声明需要包含所有属性的":["73.23"],"名称":["73.23","73.93"],"及":["73.23"],"zhagnsan":["73.27"],"男":["73.27","73.46"],"lisi":["73.27"],"则可以使用":["73.30"],"foreach":["73.32"],"类":["73.33"],"是一种编程范式":["73.34"],"其核心理念在于将程序中的数据与操作数据的方法有机地组织成对象":["73.34"],"从而使程序结构更加模块化和易于理解":["73.34"],"通过对象之间的协同合作":["73.34"],"对象属性的访问":["73.37"],"utils":["73.38"],"tolowercase":["73.38"],"public":["73.40"],"接口":["73.41","73.42"],"implements":["73.43"],"关键字":["73.43"],"实现类中":["73.43"],"需要包含接口属性的赋值逻辑":["73.43"],"以及接口方法的实现逻辑":["73.43"],"student":["73.43","73.44"],"introduce":["73.44"],"hello":["73.44","73.55","76.2"],"am":["73.44"],"然后分别创建一个":["73.44"],"然后在订单类中增加一个":["73.45"],"的属性":["73.45"],"并且在订单类中的":["73.45"],"方法中调用":["73.45"],"可以看到变量的值为一个一般对象":["73.46"],"枚举":["73.47"],"其主要功能是定义一组有限的选项":["73.48"],"方向":["73.48"],"使用场景":["73.49"],"现需要编写一个函数":["73.49"],"move":["73.49"],"其功能是根据输入的方向":["73.49"],"上":["73.49"],"下":["73.49"],"左":["73.49"],"我们还能手动为每个属性赋值":["73.50"],"enum":["73.50"],"模块化":["73.51"],"默认情况下":["73.52"],"有多种方式可以用来解决命名冲突":["73.54"],"下面逐一介绍":["73.54"],"导入重命名":["73.54"],"语法如下":["73.54"],"关灯":["73.58","73.60"],"状态":["73.58"],"所以我们可以使用一个":["73.58"],"描述界面显示效果":["73.59"],"开灯":["73.60"],"的图片":["73.60"],"否则就会显示":["73.60"],"下面为大家总结一下声明式ui的核心思想":["73.61"],"声明式描述":["73.61"],"都是由众多组件组合而成的":["73.62"],"所以编写界面其实就是组合组件的过程":["73.62"],"入门案例":["73.63"],"image":["73.65"],"images":["73.65","87.7"],"img":["73.65","73.70","73.76","73.96","73.103","73.106","73.130","73.133","73.139"],"png":["73.65"],"语法说明":["73.66","73.74"],"各组件支持的参数":["73.67"],"可查看":["73.67"],"文档":["73.67"],"查看方式如下":["73.67"],"首先将鼠标在相应组件悬停":["73.67"],"点击":["73.67"],"自定义组件":["73.68"],"除去系统预置的组件外":["73.68"],"compnent":["73.69"],"装饰器":["73.69"],"装饰器用于装饰":["73.69"],"关键字声明的数据结构":["73.69"],"所以可考虑自定义一个按钮组件":["73.70"],"然后进行复用":["73.70"],"以及以下的播放":["73.73"],"暂停案例":["73.73"],"均可使用条件渲染实现":["73.73"],"条件渲染的语法如下":["73.74"],"语句基于一个数组来快速渲染一个组件列表":["73.76"],"例如以下案例中的选项列表就可通过循环渲染实现":["73.76"],"key生成函数":["73.77"],"数组中的每个数据项生成唯一的key":["73.77"],"key的作用":["73.77"],"在数组发生变化":["73.77"],"修改数组元素或者向数组增加或删除元素":["73.77"],"需要重新渲染组件列表":["73.77"],"在重新渲染时":["73.77"],"它会尽量复用原来的组件对象":["73.77"],"而不是为每个元素都重新创建组件对象":["73.77"],"key的作用就是辅助":["73.77"],"完成组件对象的复用":["73.77"],"具体逻辑如下":["73.77"],"在进行初次渲染时":["73.77"],"会使用keygenerator为数组中的每个元素生成一个唯一的key":["73.77"],"并将key作为组件对象的标识":["73.77"],"当数组发生变化导致":["73.77"],"概述":["73.79","73.86","73.95","73.109","73.120","73.127"],"可存在多种版本":["73.80"],"用于适配不同的环境":["73.80"],"例如语言环境":["73.80"],"zh":["73.80"],"cn和en":["73.80"],"us":["73.80"],"系统主题":["73.80"],"dark和light":["73.80"],"设备类型":["73.80"],"tablet":["73.80"],"等等":["73.80"],"我们可以为上述每种环境各自准备一套资源文件":["73.80"],"每种环境对应":["73.80"],"下的一个目录":["73.80"],"例如上述的":["73.80"],"en":["73.80"],"我们在使用resources下的资源时":["73.80"],"无需指定具体的环境版本":["73.80"],"系统会根据设备所处的环境自动选择匹配的版本":["73.80"],"例如当设备系统语言为中文时":["73.80"],"常用属性":["73.81","73.88","73.97","73.104","73.111","73.122"],"这种方式的弊端是":["73.82"],"在不同像素密度的屏幕上":["73.82"],"相同的像素个数对应的物理尺寸是不同的":["73.82"],"这样一来就会导致我们的应用在不同设备上显示的尺寸可能不同":["73.82"],"如下图所示":["73.82"],"virtual":["73.82"],"为了保证一致的观感":["73.82"],"我们可以使用虚拟像素作为单位":["73.82"],"虚拟像素是一种可根据屏幕像素密度灵活缩放的单位":["73.82"],"1vp相当于像素密度为160ppi的屏幕上的1px":["73.82"],"harmonyos会根据如下公式将虚拟像素换算为对应的物理像素":["73.82"],"根据上述公式":["73.82"],"不难看出":["73.82"],"使用虚拟像素作为单位时":["73.82"],"同一尺寸":["73.82"],"在像素密度低的屏幕上":["73.82"],"contain":["73.83"],"保持宽高比进行缩小或者放大":["73.83"],"使得显示区域刚好包含整个图片":["73.83"],"cover":["73.83"],"使得图片刚好完全覆盖显示区域":["73.83"],"描述":["73.84","73.93"],"不使用图片插值":["73.84"],"high":["73.84"],"base":["73.87"],"目录中有一个":["73.87"],"px":["73.89"],"fp":["73.89"],"font":["73.89"],"pixel":["73.89"],"与":["73.89"],"可选枚举值如下":["73.90"],"名称描述":["73.90"],"lighter":["73.90"],"字体较细":["73.90"],"normal":["73.90","73.99"],"字体粗细正常":["73.90"],"类型的参数可用于设置":["73.91"],"rgb":["73.91"],"格式的颜色":["73.91"],"具体写法可以为":["73.91"],"start":["73.92"],"首部对齐":["73.92"],"居中对齐":["73.92"],"为枚举类型":["73.93"],"可用枚举值有":["73.93"],"clip":["73.93"],"为按钮形状":["73.96"],"该属性的类型":["73.96"],"可选的枚举值有":["73.96","73.112"],"名称描述效果":["73.96","73.103","73.121"],"capsule":["73.96"],"胶囊形状":["73.96"],"backgroundcolor":["73.98"],"方法进行设置":["73.98"],"圆角按钮":["73.99"],"buttontype":["73.99"],"arkts":["73.100","73.107"],"button":["73.100"],"点击事件":["73.100"],"toggle":["73.102"],"枚举类型进行设置":["73.103","73.121"],"可选的枚举值如下":["73.103","73.121"],"switch":["73.103"],"可使用":["73.105"],"selectedcolor":["73.105"],"相关案例见":["73.106","73.115","73.130","73.133","73.139"],"具体定义如下":["73.107"],"callback":["73.107"],"ison":["73.107"],"属性用于设置无输入时的提示文本":["73.110"],"效果如下":["73.110","73.123"],"inputtype":["73.112"],"枚举类型":["73.112"],"光标样式":["73.113"],"placeholdercolor":["73.114"],"方法设置":["73.114"],"placeholder":["73.114"],"fontcolor":["73.115"],"等通用属性方法进行设置":["73.115"],"常用事件":["73.116"],"onchange":["73.117"],"方法为":["73.117","73.118"],"textinput":["73.117"],"开发者可使用":["73.118"],"onfocus":["73.118"],"onblur":["73.118"],"属性用于设置进度条类型":["73.121"],"可通过":["73.121"],"linear":["73.121","73.123"],"默认值为":["73.123"],"4vp":["73.123"],"该属性可用于":["73.123"],"ring":["73.123"],"scalering":["73.123"],"三种类型":["73.123"],"用于设置前景色":["73.124"],"用于设置背景色":["73.124"],"常用于显示一些重要的信息":["73.125"],"消息提示":["73.126"],"toast":["73.127"],"方法的参数定义如下":["73.128"],"message":["73.128"],"警告对话框":["73.129"],"具体效果如下":["73.130","73.133"],"使用说明":["73.131","73.134"],"操作列表弹框":["73.132"],"选择器弹窗":["73.135"],"文本滑动选择器弹窗":["73.136"],"文档地址":["73.137"],"自定义弹窗":["73.138"],"demos":["73.139"],"让我们开始吧":["76.5","81.4"],"可以将对应的":["76.7"],"teleport":["77.2"],"body":["77.3"],"dashed":["77.5"],"link":["77.5"],"mybutton":["77.13"],"treecomponent":["77.16"],"off":["78.1","78.2"],"inc":["78.5"],"加":["78.5"],"is":["78.9","78.10"],"click":["79.3","81.1","85.2"],"count":["79.3","79.4","79.9","79.10"],"都会在":["79.14"],"组件更新":["79.14"],"之前":["79.14"],"被调用":["79.14"],"的副作用":["79.18"],"来完成它":["79.20"],"以下是你要实现的内容":["79.20","84.1"],"更新元素的文本内容":["80.6"],"onclick":["80.11","80.12"],"oh":["80.17","80.18"],"click1":["81.1"],"me":["81.2"],"在这个挑战中":["81.4"],"我们将尝试它":["81.4"],"添加按键修饰符让有且只有":["81.5"],"counter":["82.1","82.2"],"reactivestate":["84.2"],"函数在这种场景下非常有用":["85.1"],"id":["86.1"],"设计是":["87.0"],"是分散在":["87.1"],"领先":["87.3"],"所有钩子执行的":["87.3"],"01":["87.3"],"lastedittime":["87.3"],"ref对象":["87.4"],"对象的":["87.4"],"否则报错":["87.5"],"接收的数据可以是":["87.6"],"基本类型":["87.6"],"typora":["87.7"],"pics":["87.7"],"raw":["87.7"],"master":["87.7"],"e8":["87.7"],"aa":["87.7"],"e5":["87.7"],"8a":["87.7"],"person":["87.8"],"h2":["87.8"],"姓名":["87.8"]},{"0":["0.27","0.28","0.63","0.67","0.71","0.77","0.78","1.1","55.4","58.27","58.28","58.63","58.67","58.71","58.77","58.78","67.32","67.39","73.2"],"1":["56.1","62.16","63.7","67.18","73.28","73.44","73.53","73.72","79.3"],"2":["14.0","63.11","63.17","67.8","67.49","67.53","67.64"],"3":["0.80","58.80","62.13","62.16","63.8","63.21","65.6","67.12","67.21","67.22","67.24","67.27","73.2"],"4":["0.24","0.63","0.84","0.86","9.0","19.2","56.5","56.6","58.24","58.63","58.84","58.86","67.6","67.16","72.1"],"5":["0.34","0.79","56.6","58.34","58.79","67.16"],"7":["0.82","57.1","58.82"],"8":["0.83","58.83"],"9":["0.83","58.83"],"10":["0.31","58.31","73.99"],"15":["0.34","58.34"],"16":["0.34","58.34"],"17":["87.3"],"22":["0.34","58.34"],"28":["87.3"],"36":["71.0"],"70":["0.34","58.34"],"85":["87.7"],"111":["67.9"],"120":["73.123"],"123":["62.3"],"128":["73.91"],"175":["0.34","58.34"],"300":["73.65"],"456":["67.14"],"501":["73.2"],"754":["0.29","58.29"],"1111":["67.59"],"1280":["63.22"],"是两个不同的变量":["0.2","58.2"],"类似地":["0.2","58.2"],"美元符号或数字":["0.3","58.3"],"单行注释":["0.4","58.4"],"块注释以一个斜杠和一个星号":["0.4","58.4"],"但它其实是一个预处理指令":["0.5","58.5"],"任何支持的":["0.5","58.5"],"引擎看到它都会切换到严格模式":["0.5","58.5"],"选择这种语法形式的目的是不破坏":["0.5","58.5"],"const":["0.7","0.22","9.0","34.2","55.1","58.7","58.22","60.3","60.8"],"finally":["0.7","58.7"],"super":["0.7","58.7"],"with":["0.7","30.0","58.7"],"try":["0.7","58.7"],"比如表示控制语句的开始和结束":["0.8","58.8"],"或者执行特定的操作":["0.8","58.8"],"protected":["0.10","58.10"],"private":["0.10","58.10"],"的所有版本中都可以使用":["0.12","58.12"],"而":["0.12","58.12"],"message":["0.13","58.13"],"window":["0.14","58.14","67.6"],"上":["0.14","58.14","73.48"],"变成全局变量":["0.14","58.14"],"去掉之前的":["0.14","58.14"],"操作符后":["0.14","58.14"],"这个就是所谓的提升":["0.15","58.15"],"hoist":["0.15","58.15"],"referenceerror":["0.16","0.17","0.25","58.16","58.17","58.25"],"uncaught":["0.17","58.17"],"cannot":["0.17","58.17"],"access":["0.17","58.17"],"matt":["0.18","58.18"],"console":["0.18","0.21","58.18","58.21","67.9","67.10","67.14","67.19","67.21","67.22","67.24","67.34","73.38","73.100"],"log":["0.18","0.21","58.18","58.21","67.9","67.10","67.13","67.19","67.23","67.25","73.31","73.38","73.55","73.100"],"是块级作用域":["0.19","58.19"],"所以不可能检查前面是否声明过同名变量":["0.19","58.19"],"声明的限制只适用于它指向的变量的引用":["0.21","58.21"],"换句话说":["0.21","0.65","58.21","58.65"],"如果":["0.21","58.21"],"优先":["0.22","58.22"],"boolean":["0.23","58.23","62.2"],"number":["0.23","0.24","0.28","58.23","58.24","58.28","73.23","73.128"],"string":["0.24","58.24","73.38"],"表示值为字符串":["0.24","58.24"],"表示值为数值":["0.24","58.24"],"is":["0.25","0.44","58.25","58.44"],"not":["0.25","58.25","60.7"],"defined":["0.25","58.25"],"对未声明的变量":["0.25","58.25"],"只能执行一个有用的操作":["0.25","58.25"],"就是对它调用":["0.25","58.25"],"是一个对象的引用":["0.26","58.26"],"undefined":["0.26","58.26","62.2"],"值是由":["0.26","58.26"],"派生而来的":["0.26","58.26"],"注意":["0.27","58.27","73.32"],"布尔值字面量":["0.27","58.27"],"非零数值":["0.28","58.28"],"包括无穷值":["0.28","58.28"],"格式表示正式和浮点数":["0.29","58.29"],"十六进制":["0.30","58.30"],"要创建十六进制字面量":["0.30","58.30"],"必须让真正的数值前缀":["0.30","58.30"],"处理":["0.31","58.31"],"floatnum2":["0.31","58.31"],"小数点后面是零":["0.31","58.31"],"没有可用于计算的数值表示形式":["0.32","58.32"],"要确定一个值是不是有限大":["0.32","58.32"],"介于":["0.32","58.32"],"javascript":["0.32","58.32"],"能表示的最小值和最大值之间":["0.32","58.32"],"可以使用":["0.32","16.0","58.32"],"isinfinite":["0.32","58.32"],"函数":["0.32","0.33","3.2","8.1","8.2","58.32","58.33","62.14"],"js":["0.32","0.40","37.3","58.32","58.40","67.7","67.51","73.13","87.4"],"不等于包括":["0.33","58.33"],"在内的任何值":["0.33","58.33"],"提供了":["0.33","58.33"],"isnan":["0.33","58.33"],"该函数接受一个参数":["0.33","58.33"],"可以是任意数据类型":["0.33","58.33"],"然后判断这个参数是否":["0.33","58.33"],"把一个值传给":["0.33","58.33"],"num5":["0.34","58.34"],"解释为十进制":["0.34","58.34"],"num6":["0.34","58.34"],"函数还有第二个参数":["0.34","58.34"],"用于指定底数":["0.34","58.34"],"进制数":["0.34","58.34"],"默认是":["0.34","58.34"],"通过第二个参数":["0.34","58.34"],"可以极大扩展转换后获得的结果类型":["0.34","58.34"],"af":["0.34","58.34"],"字符序列":["0.35","58.35"],"字符串可以使用双引号":["0.35","58.35"],"xnn":["0.36","58.36"],"以十六进制编码":["0.36","58.36"],"nn":["0.36","58.36"],"表示的字符":["0.36","58.36"],"其中":["0.36","58.36","73.114"],"必须先销毁原始的字符串":["0.37","58.37"],"let":["0.39","0.40","0.80","23.0","58.39","58.40","58.80","67.18","67.43","67.44","67.45","67.58","73.17","73.20","73.21","73.44"],"str":["0.39","58.39","73.53"],"表达式实现":["0.40","58.40"],"通过前缀到模板字面量来应用自定义行为":["0.41","58.41"],"如下例所示":["0.41","58.41"],"为此":["0.42","58.42"],"可以使用默认的":["0.42","58.42"],"新增的数据类型":["0.43","58.43"],"符号是原始值":["0.43","58.43"],"mysymbol":["0.44","58.44"],"typeerror":["0.44","58.44"],"的任何值都会被转化成字符串":["0.45","58.45"],"还可以使用":["0.45","58.45"],"keyfor":["0.45","58.45"],"来查询全局注册表":["0.45","58.45"],"这个方法接收符号":["0.45","58.45"],"返回该全局符号对应的字":["0.45","58.45"],"符串键":["0.45","58.45"],"如果查询的不是全局符号":["0.45","58.45"],"iterator":["0.47","58.47"],"属性":["0.47","55.1","58.47","73.69"],"那么就可以通过在自定义对象上重新定义":["0.47","58.47"],"用于判断给定属性是否可用":["0.60","58.60"],"for":["0.60","1.1","58.60"],"in":["0.60","26.2","58.60","67.35","72.0"],"语句枚举":["0.60","58.60"],"属性名必须是字符串":["0.60","58.60"],"ecmascript":["0.62","58.62"],"再应用改变":["0.63","58.63"],"变量类型从布尔值变成数值":["0.63","58.63"],"true":["0.63","0.87","55.5","58.63","58.87","61.3","73.58","73.107"],"一元减由一个减号":["0.64","58.64"],"先确定":["0.65","58.65"],"的二进制表示":["0.65","58.65"],"找到数值的一补数":["0.65","58.65"],"或反码":["0.65","58.65"],"num2":["0.66","58.66"],"按位异或用脱字符":["0.68","58.68"],"下面是按位异或的真值表":["0.68","58.68"],"位都向右移":["0.70","58.70"],"同时保留符号":["0.70","58.70"],"无符号右移会给空位补":["0.71","58.71"],"而不管符号位是":["0.71","58.71"],"什么":["0.71","58.71"],"如果操作数是非":["0.73","58.73"],"数值":["0.73","58.73"],"包括":["0.73","50.0","58.73"],"才会返回该对象":["0.74","58.74"],"如果两个操作数都是对象":["0.74","0.75","0.86","58.74","58.75","58.86"],"如果有一个操作数是":["0.74","58.74"],"null":["0.74","28.3","55.4","55.5","58.74","62.9"],"如果第一个操作数求值为":["0.75","58.75"],"则返回第二个操作数":["0.75","58.75"],"乘法":["0.76","58.76"],"乘以非":["0.77","58.77"],"除数不是":["0.79","58.79"],"squared":["0.80","58.80"],"如果有任一操作数是对象":["0.84","58.84"],"则调用其":["0.84","58.84"],"valueof":["0.84","58.84"],"方法":["0.84","58.84"],"记住":["0.86","58.86"],"即使两个操作数都是":["0.86","58.86"],"相等操作符也是返回":["0.86","58.86"],"因为按照规则":["0.86","58.86"],"不等于":["0.86","58.86"],"则比较他们是不是同一个对象":["0.86","58.86"],"如果两个操作数都指向同一个对象":["0.86","58.86"],"只有两个操作数在不转换的前提下相等才返回":["0.87","58.87"],"是":["0.88","58.88"],"则赋值":["0.88","58.88"],"取模后赋值":["0.89","58.89"],"加后赋值":["0.89","58.89"],"在赋值时使用逗号操作符分隔值":["0.90","58.90"],"最终会返回表达式中最后一个值":["0.90","58.90"],"渐进式框架":["1.0"],"total":["1.1"],"i":["1.1","26.2","67.39","73.39"],"需要将逻辑聚拢在":["1.2"],"controller":["1.2"],"层":["1.2"],"映射关系的简化":["1.2"],"可以比较新旧虚拟节点":["1.3"],"找到变化再进行更新":["1.3"],"虚拟":["1.3"],"dom":["1.4","18.1","24.0","79.14"],"渲染成真实":["1.4"],"单向数据流":["1.5"],"组件化开发能大幅提高应用开发效率":["1.5"],"multi":["2.1"],"多页引用":["2.1"],"多个":["2.1"],"用户体验良好":["2.2"],"切换加载资源":["2.2"],"速度慢":["2.2"],"用户体验差":["2.2"],"维护成本":["2.2"],"先将页面放到浏览器中运行一下":["2.3"],"将":["2.3"],"保存起来":["2.3"],"的抽象":["3.1"],"由于直接操作dom":["3.1"],"性能低但是":["3.1"],"在接下来的挂载过程中会调用":["3.2"],"newvnode":["3.3"],"使用":["3.3","41.0"],"和":["3.3","43.1","62.19","67.53"],"生命周期":["4.0"],"组件化好处":["4.0"],"高聚合":["4.0"],"组件要合理的划分":["4.1"],"如果不拆分组件":["4.1"],"watcher":["5.0"],"渲染":["5.0"],"没有采用一个属性对应一个":["5.0"],"defineproperty":["6.1","53.0"],"将属性进行劫持":["6.1"],"set":["6.2"],"delete":["6.2"],"实现":["6.2"],"数组不采用":["6.2"],"shift":["7.1","81.4"],"pop":["7.1"],"splice":["7.1"],"render":["8.1","8.2","15.0"],"此时会触发属性依赖收集":["8.1"],"默认在初始化时会调用":["8.2"],"如果是":["9.0"],"实例":["9.0","47.5"],"或者根数据":["9.0"],"data":["9.0","55.5","72.1"],"时":["9.0"],"报错":["9.0","67.59"],"更新":["9.0"],"无意义":["9.0"],"ob":["9.0"],"isvue":["9.0"],"show的怎么理解":["10.0"],"元素":["10.1","18.1"],"org":["10.2"],"可以阻断内部代码是否执行":["10.3"],"如果条件不成立不会执行内部逻辑":["10.3"],"vue3":["11.0"],"中有三种":["11.0"],"依赖的值不发生变化":["11.1"],"对其取值时计算属性方法不会重新执行":["11.1"],"进行一些操作":["11.2"],"异步要注意静态问题":["11.2"],"底层采用的是":["12.1"],"new":["12.1","62.6","67.44","67.46","73.44"],"proxy":["12.1"],"name":["13.0","23.0","67.43","67.45","73.4","73.87"],"数据变化后":["13.0"],"会调用":["13.0"],"schduler":["13.0"],"内部都会再次触发":["13.0"],"ast":["14.0"],"语法树":["14.0"],"parsehtml":["14.0"],"或者":["15.0","61.1","73.91"],"优先级更高":["15.0"],"如果用户写的是":["15.0"],"会做模板编译":["15.0"],"三部曲":["15.0"],"用于讲一个数据变成响应式的":["16.0"],"在父子组件通信时":["16.0"],"exists":["17.0"],"在":["17.0"],"vue2":["17.0","38.0"],"vm":["18.1","36.4"],"el替换":["18.1"],"并挂载到实例上去之后调用该钩子":["18.1"],"可以用于获取":["18.1"],"beforeupdate":["18.1"],"数据更新时调用":["18.1"],"发生在虚拟":["18.1"],"组件实例销毁之后":["18.2"],"activated":["18.2","36.4","69.6","69.8","69.9"],"keep":["18.2"],"alive":["18.2"],"缓存的组件激活时调用":["18.2"],"deactivated":["18.2","69.8"],"算法原理":["19.0"],"的核心就比较两个虚拟节点的差异":["19.1"],"直接删除页面节点":["19.2"],"老的儿子是文本":["19.2"],"新的文字是文本":["19.2"],"直接更新文本节点即可":["19.2"],"key":["20.0","55.4","67.11","67.35"],"会使用一种最大限度减少动态元素并且尽可能地尝试就地修改":["20.1"],"复用相同类型元素的算法":["20.1"],"当":["20.1","73.107"],"正在更新使用":["20.1"],"可以判断两个虚拟节点是否是相同节点":["20.2"],"可以复用老节点":["20.2"],"如果插件是一个函数":["21.1"],"它会被作为":["21.1"],"添加":["21.2"],"vue":["21.2","26.1","34.2","37.3","52.0","79.20"],"其他的参数整合成数组":["21.3"],"unshift":["21.3"],"typeof":["21.3"],"install":["21.3"],"lastname":["22.1"],"aka":["22.1"],"alias":["22.1"],"function":["22.1","62.1","67.30","67.40","67.52"],"return":["22.1","23.0","36.3","55.5","62.9","67.18","67.63","73.38","73.39","77.13"],"有了此方法我们可以用于手动挂载组件":["22.2"],"后端存储的字符串模板我们可以通过":["22.2"],"child":["23.0","79.20"],"xxxx":["23.0","30.0","32.0"],"的过程":["24.0"],"最终就是将返回的虚拟":["24.0"],"变成真实":["24.0"],"常见场景":["25.0"],"单位转换":["25.0"],"千分符":["25.0"],"文本格式化":["25.0"],"时间格式化等操作":["25.0"],"的内置指令":["26.1"],"li":["26.2"],"list":["26.2","63.7","72.3"],"会采用":["27.1"],"就近原则":["27.1"],"以组件的数据为准":["27.1"],"跟":["27.2"],"data会被合并":["27.3"],"生命周期和watch方法会被合并成队列":["27.3"],"components":["27.3"],"是怎样实现的":["28.0"],"利用":["28.1"],"slot":["28.1","31.1"],"常用的组件例如":["28.2"],"弹窗组件":["28.2"],"article":["28.3"],"编译后的结果":["28.3"],"default":["28.3","72.1","77.5"],"能修改的视图就是表单组件":["29.1"],"经常会听到一句话":["29.1"],"文本框会被解析成":["29.2"],"value":["29.2","62.3","73.87","79.29","80.17","87.4"],"input":["29.2"],"type":["29.3","57.1","66.1"],"bind":["29.3","37.3","76.3"],"on":["29.3","80.11","80.12"],"emit":["29.3"],"编译后结果是":["30.0"],"this":["30.0","62.16","67.34","73.36","73.40","77.13"],"if":["31.1","54.3","55.3","67.31","67.32","73.74"],"children":["31.1","77.16"],"options":["32.0","55.5"],"capture":["33.0"],"passive":["33.0"],"native":["33.0"],"推荐的做法是将异步组件和":["34.1"],"webpack":["34.1"],"对象写法":["34.2"],"asynccomponernt":["34.2"],"需要加载的组件":["34.2"],"应该是一个":["34.2"],"组件加载完毕后调用":["34.3"],"多次调用":["35.1"],"会被合并":["35.1"],"中的内置组件":["36.1"],"能在组件切换过程中会缓存组件的实例":["36.1"],"也可以通过meta属性指定哪些页面需要缓存":["36.2"],"哪些不要":["36.2"],"div":["36.2","63.5","84.1"],"id":["36.2","67.50","69.9"],"excluded":["36.3"],"same":["36.3"],"constructor":["36.3","62.6","73.43"],"may":["36.3"],"get":["36.3"],"getdata":["36.4"],"获取数据":["36.4"],"也允许用户注册自定义指令来对":["37.1"],"但是可能发生在其子":["37.2"],"更新之前":["37.2"],"指令的值可能发生了改变":["37.2"],"isshow":["37.3"],"显示面板":["37.3"],"directive":["37.3"],"clickoutside":["37.3"],"el":["37.3"],"的关系":["38.0"],"代理模式":["38.0"],"代理模式给某一个对象提供一个代理对象":["38.0"],"并有代理对象控制对原对象的引用":["38.0"],"装饰模式":["38.0"],"的选取":["39.0"],"控制组件力粒度":["39.0"],"采用组件级更新":["39.0"],"采用函数式组件":["39.0"],"图片资源的压缩":["40.0"],"雪碧图":["40.0"],"对小图片进行":["40.0"],"base64":["40.0"],"减少":["40.0"],"跨域资源共享":["41.0"],"有服务端设置":["41.0"],"允许指定的客户端访问服务器":["41.0"],"构建工具中设置反向代理":["41.0"],"token":["42.0"],"设置响应拦截":["42.0"],"对响应的状态码或者数据进行格式化":["42.0"],"页面权限":["43.1"],"前端配置的路由分为两部分":["43.1"],"通用路由配置":["43.1"],"需要权限的路由配置":["43.1"],"在权限路由中增加访问权限":["43.1"],"beforerouteenter":["44.0"],"beforeresolve":["44.0"],"popstate":["45.0"],"hashchange":["45.0"],"兼容性好但是不够美观":["45.0"],"服务端无法获取":["45.0"],"history":["46.0"],"模式刷新时会向服务器发起请求":["46.0"],"应用程序开发的":["47.2"],"状态管理模式":["47.2"],"dispatch":["47.3"],"action":["47.3"],"数据不够扁平化":["47.4"],"调用的时候过长":["47.4"],"更改状态":["47.4"],"mutation":["47.4"],"创建了一个":["47.5"],"中状态变化":["48.0"],"中":["49.0","63.12"],"采用":["49.0"],"操作":["50.0"],"中也可以调用":["50.0"],"mutations":["51.0"],"actions":["51.0"],"getters":["51.0"],"moduleb":["51.0"],"api":["52.0","56.4"],"都在":["52.0"],"对象上公开":["52.0"],"对":["52.0"],"tree":["52.0"],"源码改造渲染方式":["53.0"],"扩展更方便":["53.0"],"的时候使用":["53.0"],"来进行数据的劫持":["53.0"],"需要对属性进行重写添加":["53.0"],"getter":["53.0"],"及":["53.0"],"父组件":["54.1"],"子组件":["54.1","73.67"],"err":["54.2"],"dynamicchildren":["55.1"],"patchflag":["55.1"],"此时生成的虚拟节点多出一个dynamicchildren":["55.1"],"这个就是":["55.1"],"block":["55.1","72.2"],"作用":["55.1","63.17"],"可以收集所有后代动态节点":["55.1"],"这样后续更新时可以直接跳过静态节点":["55.1"],"实现靶向更新":["55.1"],"typescript":["55.1","60.4","60.6","73.17","73.30","73.74","73.118"],"else":["55.2","73.65"],"setup":["55.5"],"核心":["56.1"],"有":["56.1"],"类型":["56.3","57.1"],"语句":["56.3"],"用于在":["56.4"],"样式":["56.5"],"描述处理元素":["56.5"],"样式的接口":["56.5"],"遍历和范围":["56.5"],"location":["56.6"],"提供浏览器加载页面的详尽信息":["56.6"],"screen":["56.6"],"或":["57.1","81.4"],"vbscript":["57.1"],"大多数浏览器都会忽略这个值":["57.1"],"不应该再使用它":["57.1"],"表示包含要指向的代码的外部文件":["57.1"],"代替":["57.1"],"表示代码中脚本语言的内容类型":["57.1"],"也成":["57.1"],"mime":["57.1"],"按照惯例":["57.1"],"interface":["59.0","73.41","73.42"],"routemeta":["59.0"],"plugin":["60.2"],"usestore":["60.3","60.8"],"那么你可以将一个对象传递给":["60.4"],"的":["60.4","67.50"],"persist":["60.4","60.5","60.9","60.10"],"属性来配置持久化":["60.4"],"state":["60.5","60.9","60.10","80.8","80.9"],"somestate":["60.5","60.9","60.10"],"你好":["60.5","60.9","60.10","67.57","73.87"],"两个方法":["60.6"],"import":["60.6"],"definestore":["60.6"],"from":["60.6","61.2","61.5","62.16"],"pinia":["60.6"],"me":["60.7"],"saved":["60.7"],"notme":["60.7"],"savemetoo":["60.7"],"zipson":["60.8"],"export":["60.8","72.1"],"ctx":["60.9","60.10"],"持久化":["60.11"],"恢复":["60.11"],"yarn":["61.1"],"createsvgiconsplugin":["61.2"],"use":["61.3"],"virtual":["61.4"],"icons":["61.4"],"register":["61.4"],"usesvgicon":["61.5"],"math":["62.1"],"存储方式":["62.1"],"基础类型存储在栈内存中":["62.1"],"g":["62.2","63.16"],"regexp":["62.2"],"如果有一个操作值是":["62.3"],"那么转换成":["62.3"],"object":["62.3","67.23"],"且另一方为":["62.3"],"就会把":["62.3"],"转为原始类型再进行判断":["62.3"],"true规则2":["62.3"],"false规则2":["62.3"],"true规则4字符串转隐式转换成number之后再对比":["62.3"],"e规则布尔型隐式转换成number之后再对比":["62.3"],"var":["62.3","67.6"],"a":["62.3","63.3","67.61","73.20"],"enumerable":["62.5"],"false":["62.5","73.21","77.12"],"obj2":["62.5"],"image":["62.5","73.79"],"20240115102506908":["62.5"],"日期对象直接返回一个新的日期对象":["62.6"],"正则对象直接返回一个新的正则对象":["62.6"],"如果循环引用了就用":["62.6"],"来解决":["62.6"],"has":["62.6"],"继承可以使得子类别具有父类的各种方法和属性":["62.7"],"20240117094250912":["62.8"],"五":["62.8"],"寄生式继承":["62.8"],"使用原型式继承可以获得一份目标对象的浅拷贝":["62.8"],"然后利用这个浅拷贝的能力再进行增强":["62.8"],"添加一些方法":["62.8"],"寄生式继承相比于原型式继承":["62.8"],"还是在父类基础上添加了更多的方法":["62.8"],"parent5":["62.8"],"isfunction":["62.9"],"bind原理介绍":["62.9"],"bind是挂在":["62.9"],"闭包让你可以在一个内层函数访问到起外层函数的作用域":["62.11"],"基本概念":["62.11"],"就去腹肌作用域查找":["62.12"],"实际上就是在使用闭包":["62.13"],"作为函数参数传递的形式":["62.13"],"第二个参数是可选参数":["62.14"],"提供可选的":["62.14"],"reviver":["62.14"],"而不管这个参数是数字还是其他":["62.16"],"设计初衷是快速便捷地基于其他对象创建新数组":["62.16"],"准确来说就是从一个类似数组的可迭代对象中创建换一个新的数组实例":["62.16"],"三个参数":["62.16"],"类似数组的对象":["62.16"],"必选":["62.16"],"加工函数":["62.16"],"新生成的数组会经过该函数的加工再返回":["62.16"],"作用域":["62.16"],"未形成标准的":["62.18"],"tosource":["62.18"],"以及":["62.18"],"es7":["62.18"],"includes数组遍历的方法":["62.18"],"some":["62.19"],"item":["62.19","63.7"],"split":["62.19"],"tostring":["62.19"],"共同处理":["62.19"],"n":["62.21","62.24"],"等来衡量":["62.21"],"堆排序":["62.23"],"堆排序是指利用堆这种数据结构所设计的一种排序算法":["62.23"],"堆积":["62.23"],"是一个近似完全二叉树的结构":["62.23"],"并同时满足堆积的性质":["62.23"],"即子节点的键值或索引总是小于":["62.23"],"或者大于":["62.23"],"它的父节点":["62.23"],"堆的底层":["62.23"],"实际上就是一棵完全二叉树":["62.23"],"可以用数组实现":["62.23"],"heap":["62.23"],"sort":["62.23"],"k":["62.23"],"swap":["62.23"],"max":["62.23"],"heapify":["62.23"],"start":["62.23"],"end":["62.23","73.92"],"dad":["62.23"],"son":["62.23"],"大于":["62.24"],"源码分析":["62.24"],"通过":["63.1","65.1"],"如果文字换行":["63.2"],"则整个盒子的高度会增大":["63.2"],"属性选择器":["63.3"],"href":["63.3"],"属性哪些可以继承":["63.3"],"选择器":["63.4"],"0100":["63.4"],"第三":["63.4"],"类选择器":["63.4"],"body":["63.5","77.1"],"background":["63.6"],"red":["63.6","80.14","80.15"],"方式二":["63.6"],"position":["63.6"],"relative":["63.6"],"css2":["63.7"],"新增":["63.7"],"如何触发":["63.8"],"float":["63.8"],"的值非":["63.8"],"方式三":["63.9"],"创建一个虚拟标签":["63.9"],"after":["63.9"],"最常用":["63.9"],"这样不管是布局也好":["63.10"],"转换":["63.10","67.4"],"是相对于自身":["63.11"],"main":["63.12","73.130","73.139"],"我们使用了":["63.13"],"优点":["63.14"],"减少了":["63.14"],"http":["63.14"],"重绘和回流的问题":["63.15"],"重绘并回流":["63.15"],"只重绘不回流":["63.15"],"产生回流一定会造成重绘":["63.15"],"r":["63.16"],"表示红色":["63.16"],"表示绿色":["63.16"],"b":["63.16","67.62","73.19"],"是什么":["63.17"],"解决办法":["63.18"],"css":["63.18"],"响应式图片":["63.21"],"性能优化":["63.21"],"html":["63.21"],"picture":["63.21"],"source":["63.21"],"srcset":["63.21"],"图的宽度和电脑的宽度不对应":["63.22"],"怎么办":["63.22"],"把":["63.22"],"display":["65.1"],"进行转换":["65.1"],"inline":["65.1"],"比":["65.2","65.5"],"好":["65.2"],"区别二":["65.2","67.66"],"是一个实体标签":["65.3"],"用来给文字加粗":["65.3"],"逻辑标签":["65.3"],"用来加强字符语气的":["65.3"],"标签只有加粗的样式":["65.3"],"没有实际的含义":["65.3"],"标签表示标签内字符比较重要":["65.3"],"用于强调的":["65.3"],"seo":["65.4"],"的层面上":["65.4"],"蜘蛛抓取不到图片的内容":["65.4"],"体积小":["65.5"],"适合做":["65.5"],"ie8":["65.6"],"不兼容":["65.6"],"text":["66.1","73.62","73.86","77.5"],"highlight":["66.2"],"color":["66.2","80.14","80.15"],"android":["66.3"],"callout":["66.4"],"none":["66.4"],"webkit":["66.5"],"user":["66.6"],"select":["66.6"],"才会指向":["67.1"],"代码":["67.1"],"按顺序执行":["67.1"],"变成链接的形式":["67.2"],"nan":["67.2"],"是一个数值类型":["67.2"],"但是不是一个具体的数字":["67.2"],"后有":["67.3"],"出来":["67.3"],"事件循环包含":["67.5"],"宏任务":["67.5"],"微任务":["67.5"],"promise":["67.5","69.4"],"还是没有写":["67.6"],"对象的":["67.11"],"都是字符串类型":["67.11"],"参数可以写":["67.27"],"items":["67.28"],"unique":["67.30"],"length":["67.31","67.32","67.40"],"fnarr":["67.33"],"newarr":["67.33"],"将空对象作为构造函数的上下文":["67.36"],"改变":["67.36"],"关闭":["67.38"],"查找规则":["67.41"],"现在对象本身找":["67.41"],"构造函数中找":["67.41"],"张三":["67.43","67.45"],"o":["67.44","67.45"],"prototype":["67.46"],"call":["67.48"],"所以需要加":["67.49"],"执行":["67.49"],"是带":["67.50"],"button":["67.50","73.95","73.103","77.13","81.4"],"h1":["67.50"],"现在是冒泡排序":["67.51"],"原理实现链接":["67.51"],"src":["67.51","73.70","73.76","73.106","73.115","73.130","73.133","73.139","87.3"],"json":["67.52","73.80"],"parse":["67.52"],"stringify":["67.52"],"copyobj":["67.52"],"不可以设置过期时间":["67.53"],"document":["67.54"],"documentelement":["67.54"],"clientwidth":["67.54"],"不可以多次声明同一个变量":["67.55"],"区别三":["67.55"],"声明变量的":["67.55"],"指向定义时候外层第一个普通函数的":["67.64"],"箭头函数不能":["67.64"],"fulfilled":["67.65"],"已成功":["67.65"],"返回的是具体的内容":["67.66"],"则返回":["67.67"],"这个问题具体要看项目和业务的情况了":["69.2"],"因为组件的加载顺序是":["69.2"],"里面的方法的":["69.3"],"会报错了":["69.3"],"settimeout":["69.4","69.15"],"请求":["69.4"],"created":["69.5"],"如果没有加入":["69.6"],"子":["69.7","69.11"],"如果当前组价加入了":["69.8"],"判断":["69.9"],"这种方式":["69.11"],"父传子很方便":["69.11"],"但是父传给孙子辈分的组件很麻烦":["69.11"],"父":["69.11"],"v":["69.12","80.1","80.2"],"model":["69.12","79.27","79.28","80.2","80.17","80.18"],"的优先级大于":["69.13"],"callback":["69.15"],"built":["72.0"],"output":["72.2"],"full":["72.3"],"exe":["73.2"],"进入安装向导":["73.2"],"点击":["73.2"],"next":["73.2"],"选择安装目录":["73.3"],"阅读相关协议":["73.3"],"勾选":["73.3"],"accept":["73.3"],"finish":["73.4"],"项目名称":["73.4"],"bundle":["73.4"],"studio提供了多种方式用于运行项目":["73.5"],"包括预览":["73.5"],"只需打开需要预览的页面文件":["73.6"],"例如下图中的":["73.6"],"index":["73.6","77.9","77.10"],"下载系统镜像":["73.7"],"注意选择":["73.7"],"api9":["73.7"],"版本":["73.7"],"等待下载完成后":["73.7"],"手机会弹框提示选择":["73.8"],"usb":["73.8"],"连接方式":["73.8"],"需要选择":["73.8"],"传输文件":["73.8"],"之后会弹窗询问":["73.8"],"是否允许usb调试":["73.8"],"可勾选":["73.8"],"始终允许使用这台计算机进行调试":["73.8"],"然后点击":["73.8"],"确定":["73.8"],"在继承typescript语法的基础上进行了一系列优化":["73.9"],"使开发者能够以更简洁":["73.9"],"更自然的方式开发应用":["73.9"],"地址为https":["73.12"],"www":["73.12"],"js环境":["73.13"],"因此在安装ts":["73.13"],"node之前":["73.13"],"我们需要准备好node":["73.13"],"准备node":["73.13"],"js环境需要完成以下两步操作":["73.13"],"安装node":["73.13"],"配置环境变量":["73.13"],"在配置完node":["73.13"],"js环境后":["73.13"],"变量声明":["73.15"],"用于声明常量":["73.16"],"两者的区别是变量在赋值后可以修改":["73.16"],"c":["73.17"],"hello":["73.20","73.31"],"isopen":["73.21"],"item1":["73.22"],"item2":["73.22"],"item3":["73.22"],"进行初始化":["73.22"],"age":["73.23","87.8"],"gender":["73.23"],"对象类型的变量可以通过对象字面量":["73.23"],"函数声明语法":["73.25"],"参数详解":["73.26"],"注":["73.27","73.69"],"调用函数时":["73.27"],"未传递可选参数":["73.27"],"则该参数的值为":["73.27"],"默认参数":["73.27"],"可在函数的参数列表为参数指定默认值":["73.27"],"任意类型":["73.28"],"若函数需要处理任意类型的值":["73.28"],"则可以使用":["73.28"],"any":["73.28"],"返回值详解":["73.29"],"作为返回值类型":["73.30"],"其含义为空":["73.30"],"匿名函数能够根据上下文推断出参数类型":["73.32"],"因此参数类型可以省略":["73.32"],"箭头函数":["73.32"],"匿名函数的语法还可以进一步的简化":["73.32"],"只保留参数列表和函数体两个核心部分":["73.32"],"class":["73.33"],"实现更为复杂的程序功能":["73.34"],"是对象的蓝图或模板":["73.34"],"语法说明":["73.35"],"读":["73.37"],"lisi":["73.37"],"写":["73.37"],"introduce":["73.39"],"and":["73.39"],"am":["73.39"],"是面向对象编程中的另一个重要概念":["73.42"],"对象和一个":["73.44"],"对象":["73.44"],"注意两个对象的类型均可以设置":["73.44"],"p1":["73.44"],"zhangsan":["73.44"],"变量的类型为":["73.46"],"下":["73.48"],"左":["73.48"],"右":["73.49"],"进行移动":["73.49"],"此时就可以先使用枚举定义好所有可能的输入选项":["73.49"],"direction":["73.49"],"up":["73.49"],"bottom":["73.49","73.128"],"left":["73.49"],"right":["73.49"],"函数的实现如下":["73.49"],"再例如":["73.50"],"每个模块都拥有自己的作用域":["73.52"],"这意味着在一个模块中声明的任何内容":["73.52"],"如变量":["73.52"],"world":["73.53"],"num":["73.53"],"as":["73.54"],"hellofroma":["73.54"],"strfroma":["73.54"],"hellofromc":["73.54"],"strfromc":["73.54"],"modulea":["73.55"],"默认导入":["73.55"],"由于每个模块最多有一个默认导出":["73.55"],"因此默认导入无需关注导入项的原始名称":["73.55"],"并且无需使用":["73.55"],"在继承了typescript语法的基础上":["73.56"],"是一种编写用户界面的范式":["73.57"],"类型的变量来表示这两个状态":["73.58"],"表示":["73.58"],"在分析完界面状态后":["73.59"],"我们需要准确的描述界面在不同状态下的显示效果":["73.59"],"为了实现点击按钮开":["73.60"],"关灯的效果":["73.60"],"我们可以为按钮绑定点击事件":["73.60"],"当用户点击":["73.60"],"开灯按钮":["73.60"],"开发者只需描述在界面在不同状态下要呈现的最终效果":["73.61"],"而无需关注界面变化的具体过程":["73.61"],"arkts提供了很多的内置组件":["73.62"],"例如":["73.62","73.98","73.124"],"案例效果":["73.64"],"width":["73.65"],"borderradius":["73.65"],"reference":["73.67"],"就会弹出":["73.67"],"如果组件支持子组件配置":["73.67"],"可在":["73.67"],"后的":["73.67"],"arkts":["73.68","73.98"],"还支持自定义组件":["73.68"],"被":["73.69"],"装饰后才具备组件化的能力":["73.69"],"装饰器是typescript中的一种特殊语法":["73.69"],"常用于装饰类":["73.69"],"案例的完整代码见":["73.70","73.73","73.76"],"demos":["73.70","73.73","73.76","73.99","73.106","73.115","73.124","73.130","73.133"],"entry":["73.70","73.73","73.76","73.106","73.115","73.130","73.133","73.139"],"渲染控制":["73.71"],"img":["73.73","73.92","73.110","73.121","73.123","73.124"],"ui描述":["73.74"],"需要重新渲染时":["73.77"],"会再次使用keygenerator为每个元素重新生成一遍key":["73.77"],"然后":["73.77"],"会检查新生成的key在上次渲染时是否已经存在":["73.77"],"若存在":["73.77"],"就会认为这个key对应的数组元素没有发生变化":["73.77"],"那它就会直接复用这个key所对应的组件对象":["73.77"],"若不存在":["73.77"],"就会认为这个key对应的元素发生了变化":["73.77"],"或者该元素为新增元素":["73.77"],"此时":["73.77"],"就会为该元素重新创建一个组件对象":["73.77"],"开发者可以通过keygenerator函数自定义key的生成规则":["73.77"],"如果开发者没有定义keygenerator函数":["73.77"],"则系统会使用默认的key生成函数":["73.77"],"即":["73.77"],"则会使用zh":["73.80"],"cn目录下的资源":["73.80"],"为英文时":["73.80"],"则会使用en":["73.80"],"us目录下的资源":["73.80"],"若没有与当前所处环境相对应的版本":["73.80"],"则使用":["73.80"],"base":["73.80"],"目录下资源":["73.80"],"各目录存储的具体资源如下":["73.80"],"存放媒体资源":["73.80"],"视频等文件":["73.80"],"存放用于描述页面元素的尺寸":["73.80"],"颜色":["73.80"],"样式等的各种类型的值":["73.80"],"每种类型的值都定义在一个相应的":["73.80"],"文件中":["73.80"],"存放自定义配置文件":["73.80"],"rawfile":["73.80"],"用于存储任意格式的原始文件":["73.80"],"需要注意的是rawfile不会根据设备所处的环境去匹配不同的资源":["73.80"],"总结":["73.80"],"resources目录下可用于存放图片的目录有":["73.80"],"单个像素的物理尺寸大":["73.82"],"对应的物理像素会更少":["73.82"],"相反在像素密度高的屏幕上":["73.82"],"单个像素的物理尺寸小":["73.82"],"对应的物理像素会更多":["73.82"],"因此就能在不同像素密度的屏幕上":["73.82"],"获得基本一致的观感了":["73.82"],"类型的参数":["73.82","73.89"],"默认以":["73.82","73.89"],"作为单位":["73.82"],"类型参数用于引用resources下的element目录中定义的数值":["73.82"],"引用element目录中的数值":["73.82"],"fill":["73.83"],"不保持宽高比进行放大缩小":["73.83"],"使得图片充满显示区域":["73.83"],"scaledown":["73.83"],"保持宽高比进行缩小或不变":["73.83"],"不会放大":["73.83"],"高质量插值":["73.84"],"可能会影响图片渲染的速度":["73.84"],"medium":["73.84","73.90"],"中等质量插值":["73.84"],"low":["73.84"],"文件":["73.87"],"内容如下":["73.87"],"greeting":["73.87"],"vp":["73.89"],"类似":["73.89"],"具体大小也会随屏幕的像素密度变化而变化":["73.89"],"number类型":["73.89","73.91"],"regular":["73.90"],"字体粗细适中":["73.90"],"bold":["73.90"],"字体较粗":["73.90"],"bolder":["73.90"],"008000":["73.91"],"类型的参数用于使用16进制的数字设置":["73.91"],"尾部对齐":["73.92"],"各选项效果如下":["73.92"],"文本超长时":["73.93"],"进行裁剪显示":["73.93"],"ellipsis":["73.93"],"显示不下的文本用省略号代替":["73.93"],"circle":["73.96"],"圆形":["73.96"],"normal":["73.96"],"普通形状":["73.96"],"相关案例见":["73.99","73.100","73.124"],"我被点击了":["73.100"],"为切换按钮组件":["73.102"],"checkbox":["73.103"],"复选框":["73.103"],"按钮":["73.103"],"方法设置":["73.105"],"toggle":["73.105"],"void":["73.107"],"组件的状态由关闭切换为打开时":["73.107"],"为":["73.107"],"textinput":["73.109","73.118"],"用于设置输入框当前的文本内容":["73.110"],"名称":["73.112"],"描述":["73.112"],"可通过":["73.113"],"caretcolor":["73.113"],"的样式":["73.114"],"组件绑定":["73.117"],"该方法的参数定义如下":["73.117"],"组件绑定相关事件":["73.118"],"两个方法的参数定义如下":["73.118"],"event":["73.118"],"progress":["73.120"],"线性样式":["73.121"],"ring":["73.121"],"环形无刻度样式":["73.121"],"eclipse":["73.121"],"属性用于设置":["73.123"],"的刻度数":["73.123"],"提示用户进行操作或收集用户输入":["73.125"],"消息提示":["73.127"],"常用于显示一些简短的消息或提示":["73.127"],"resource":["73.128"],"duration":["73.128"],"可使用全局方法":["73.131","73.134"],"alertdialog":["73.131"],"actionsheet":["73.134"],"u8ed6fe33":["73.136"],"textpickerdialog":["73.137"],"文本滑动选择器弹窗":["73.137"],"官方文档":["73.137"],"可以将":["76.3"],"template":["76.5","77.15","80.4","84.1"],"p":["76.5"],"转换为局部作用域":["76.7"],"去掉":["76.7"],"将以下元素渲染成":["77.1"],"span":["77.2","80.4"],"的子元素中":["77.3"],"且默认值为":["77.5"],"active":["77.9","77.10","80.14","80.15"],"mybutton":["77.12"],"disabled":["77.12"],"do":["77.15"],"click":["78.1","78.2","81.4","82.1","82.2"],"dec":["78.5"],"减":["78.5"],"at":["78.9","78.10"],"component":["79.1","79.2","83.1","83.2"],"plusone":["79.9","79.10"],"ref":["79.12","79.13"],"eleref":["79.12","79.13"],"这意味着你在侦听器回调中访问的":["79.14"],"将是被":["79.14"],"更新之前的状态":["79.14"],"count":["79.16","79.17","84.2"],"这通常在对浅引用的内部值进行深度变更后使用":["79.18"],"doubled":["79.23","79.24"],"调用":["79.25"],"使它从不更新":["80.5"],"更新元素的":["80.6"],"innerhtml":["80.6"],"it":["80.11","80.12"],"style":["80.14","80.15"],"vatltexue":["80.18"],"click2":["81.1"],"原生阻止冒泡":["81.2"],"e":["81.2"],"stoppropagation":["81.2"],"添加按键修饰符让即使":["81.4"],"alt":["81.4","87.7"],"被一同按下时也会触发":["81.4"],"被按下的时候才触发":["81.5"],"increment":["82.1","82.2"],"创建的代理返回其原始对象":["84.3"],"你能实现它吗":["85.1"],"increase":["85.2"],"app":["86.1"],"option":["87.0"],"配置":["87.0"],"风格的":["87.0"],"methods":["87.1"],"computed":["87.1"],"中的":["87.1"],"description":["87.3"],"filepath":["87.3"],"ts":["87.3"],"md":["87.3"],"属性是响应式的":["87.4"],"注意点":["87.4"],"中操作数据需要":["87.4"],"源对象":["87.5"],"返回值":["87.5"],"一个":["87.5"],"对象类型":["87.6"],"若":["87.6"],"a8":["87.7"],"a1":["87.7"],"a5":["87.7"],"85value":["87.7"],"png":["87.7"],"自动补充value":["87.7"],"年龄":["87.8"],"性别":["87.8"]},{"0":["0.36","58.36","66.2"],"1":["13.0","55.4","67.27","73.39","77.16"],"2":["0.34","0.80","13.0","55.1","56.1","58.34","58.80","67.60","69.4"],"3":["55.1","63.11","67.7","67.53","67.64","69.2"],"4":["55.1","62.5","62.13","63.22","67.11"],"5":["0.24","0.60","0.63","0.86","0.90","44.0","58.24","58.60","58.63","58.86","58.90","69.8"],"6":["0.60","56.6","58.60"],"8":["0.34","58.34"],"10":["0.33","0.83","58.33","58.83","62.24","67.54"],"17":["73.44"],"35":["73.44"],"43":["71.0"],"50":["87.7"],"60":["73.17"],"100":["67.10"],"262":["0.26","58.26"],"400":["54.3"],"1500":["73.128"],"3269":["36.3"],"10000":["73.128"],"typeof":["0.2","0.25","58.2","58.25","67.2"],"不能作为函数名":["0.2","58.2"],"关键字":["0.3","56.3","58.3"],"保留字":["0.3","56.3","58.3"],"true":["0.3","0.33","58.3","58.33","67.67"],"以它们的反向组合":["0.4","58.4"],"结尾":["0.4","58.4"],"语法":["0.5","58.5","62.19"],"也可以单独指定一个函数在严格模式下执行":["0.5","58.5"],"continue":["0.7","58.7"],"for":["0.7","20.1","55.3","58.7","67.52"],"switch":["0.7","58.7"],"yield":["0.7","58.7"],"按照规定":["0.8","58.8"],"public":["0.10","58.10"],"hi":["0.13","58.13"],"就变成了全局变量":["0.14","58.14"],"只要调用了一次函数":["0.14","58.14"],"就会定义这个变量":["0.14","58.14"],"并且可以在函数外部访问到":["0.14","58.14"],"虽然可以通过省略":["0.14","58.14"],"操作符定义全局变量":["0.14","58.14"],"但不推荐这么做":["0.14","58.14"],"在局部作用域中定义的全局变量基恩男维护":["0.14","58.14"],"也会造成困惑":["0.14","58.14"],"这是因为不能一下子断定省略":["0.14","58.14"],"也就是把所有变量声明都拉到函数作用域的顶部":["0.15","58.15"],"此外反复多次使用":["0.15","58.15"],"声明同一个变量也没有问题":["0.15","58.15"],"没有定义":["0.16","58.16"],"在这里":["0.16","58.16"],"变量之所以不能在":["0.16","58.16"],"块外部被引用":["0.16","58.16"],"是因为它的作用域仅限于该块内部":["0.16","58.16"],"before":["0.17","58.17"],"initialization":["0.17","58.17"],"age":["0.18","58.18","79.12","79.13"],"同时也就不可能在没有声明的情况下去声明它":["0.19","58.19"],"变量引用的是一个对象":["0.21","58.21"],"那么修改对象内部的属性并不违反":["0.21","58.21"],"的限制":["0.21","58.21"],"person":["0.21","58.21","87.3"],"let":["0.22","0.32","58.22","58.32","67.46","67.63","73.22","73.23","73.39"],"string":["0.23","0.42","58.23","58.42","79.29"],"symbol":["0.23","58.23"],"object":["0.24","0.28","0.44","58.24","58.28","58.44"],"表示值为对象":["0.24","58.24"],"而不是函数":["0.24","58.24"],"对未声明的变量调用":["0.25","58.25"],"delete":["0.25","53.0","58.25"],"也不会报错":["0.25","58.25"],"但是这个操作没什么用":["0.25","58.25"],"实际上在严格模式下会抛出错误":["0.25","58.25"],"因此在":["0.26","58.26"],"ecma":["0.26","58.26"],"将他们定义为表面上相等":["0.26","58.26"],"如":["0.26","58.26"],"console":["0.26","0.32","0.66","1.1","54.2","58.26","58.32","58.66","60.9","60.10","62.3","67.43","67.44","67.45","67.61","67.62","73.17","73.49"],"是区分大小写的":["0.27","58.27"],"nan":["0.28","0.74","0.75","58.28","58.74","58.75"],"任意对象":["0.28","58.28"],"在某些语言中也叫双精度值":["0.29","58.29"],"0x":["0.30","58.30"],"区分大小写":["0.30","58.30"],"然后是十六进制数字":["0.30","58.30"],"对于非常大或者非常小的数值":["0.31","58.31"],"浮点值可以用科学计数法来表示":["0.31","58.31"],"科学计数法用于表示一个应该乘以":["0.31","58.31"],"的给定次幂的数值":["0.31","58.31"],"中科学计数法的格式要求是一个数值":["0.31","58.31"],"整数或者浮点数":["0.31","58.31"],"result":["0.32","58.32"],"log":["0.32","1.1","58.32","60.9","60.10","62.3","67.14","67.21","67.22","67.24","67.34","67.62","73.49"],"后":["0.33","58.33"],"该函数会尝试把它转换为数值":["0.33","58.33"],"某些非数值的值可以直接转换成数值":["0.33","58.33"],"如字符串":["0.33","58.33"],"或布尔值":["0.33","58.33"],"任何不能转换为数值的值都会导致这个函数返回":["0.33","58.33"],"按二进制解析":["0.34","58.34"],"按八进制解析":["0.34","58.34"],"按十进制解析":["0.34","58.34"],"按十六进制解析":["0.34","58.34"],"函数的工作方式和":["0.34","58.34"],"函数相似":["0.34","58.34"],"都是从位置":["0.34","58.34"],"开始检测每个字符":["0.34","58.34"],"同样":["0.34","58.34"],"单引号":["0.35","58.35"],"或反引号":["0.35","58.35"],"是十六进制的":["0.36","58.36"],"x41":["0.36","58.36"],"等于":["0.36","58.36"],"然后将包含新值的另一个字符串保存到该变量":["0.37","58.37"],"时":["0.38","58.38","62.24","73.60"],"可以传入一个参数作为底数":["0.38","58.38"],"first":["0.39","58.39"],"line":["0.39","58.39","63.3"],"title":["0.40","31.1","58.40"],"aaa":["0.40","58.40"],"接收到的参数依次是原始字符串数组和对每个表达式求值的结果":["0.41","58.41"],"且符号实例是唯一":["0.43","58.43"],"不可变的":["0.43","58.43"],"not":["0.44","58.44"],"a":["0.44","9.0","51.0","58.44","62.16","63.16","73.22","73.31","73.39","81.4"],"constructor":["0.44","58.44"],"如果你确实想使用符号包装对象":["0.44","58.44"],"可以借用":["0.44","58.44"],"函数":["0.44","15.0","58.44","73.52","73.82"],"则返回":["0.45","0.74","0.75","58.45","58.74","58.75"],"undefined":["0.45","0.83","58.45","58.83"],"创建全局符号":["0.45","58.45"],"s":["0.45","58.45"],"defineproperties":["0.46","58.46"],"定义的属性":["0.46","58.46"],"的值":["0.47","58.47","62.16"],"来改变":["0.47","58.47"],"在迭代该对象时的行为":["0.47","58.47"],"tolocalstring":["0.60","58.60"],"返回对象的字符串表示":["0.60","58.60"],"该字符串反应对象所在的本地化执行环境":["0.60","58.60"],"中最简单的操作符":["0.62","58.62"],"对于浮点数":["0.63","58.63"],"加":["0.63","58.63"],"主要用于把数值变成负值":["0.64","58.64"],"如把":["0.64","58.64"],"就是每个":["0.65","58.65"],"都变成":["0.65","58.65"],"每个":["0.65","58.65"],"二进制11111111111111111111111111100110":["0.66","58.66"],"正或负":["0.70","58.70"],"对正数来说":["0.71","58.71"],"这跟有符号右移效果相同":["0.71","58.71"],"但对负数来说":["0.71","58.71"],"infinity":["0.73","0.79","58.73","58.79"],"如果操作数是":["0.73","58.73"],"null":["0.73","0.75","0.83","58.73","58.75","58.83"],"如果两个操作数都是":["0.75","58.75"],"除法和取模":["0.76","58.76"],"的有限数值":["0.77","58.77"],"则根据第二个操作数的符号返回":["0.77","0.78","58.77","58.78"],"除以任何数值":["0.78","58.78"],"如果是":["0.79","58.79"],"除以":["0.79","58.79"],"有一个是字符串的规则":["0.82","58.82"],"如果两个操作数都是字符串":["0.82","58.82"],"则将第二个字符串拼接到第一个字符串后面":["0.82","58.82"],"如果只有一个操作数是字符串":["0.82","58.82"],"则将另一个操作数转换为字符串":["0.82","58.82"],"如果有任一操作数是字符串":["0.83","58.83"],"布尔值":["0.83","58.83"],"或":["0.83","58.83"],"则先在后台使用":["0.83","58.83"],"number":["0.83","58.83","73.31"],"取得结果后再根据前面的规则执行比较":["0.84","58.84"],"如果没有":["0.84","58.84"],"操作符":["0.84","58.84"],"否则":["0.86","58.86"],"两者不不相等":["0.86","58.86"],"特殊情况":["0.86","58.86"],"表达式":["0.86","58.86"],"结果":["0.86","58.86"],"不全等操作符用一个叹号和两个等于号":["0.87","58.87"],"减后赋值":["0.89","58.89"],"左移后赋值":["0.89","58.89"],"num":["0.90","58.90","67.57"],"的核心库只关注视图层":["1.0"],"length":["1.1","62.16","67.39","77.16"],"关注了过程":["1.1"],"隐藏":["1.2"],"20240313104458974":["1.2"],"虽然没有完成遵循":["1.2"],"就是一个对象":["1.3"],"用来描述真实":["1.3"],"缺点就是虚拟":["1.4"],"编写麻烦":["1.4"],"测试性":["1.5"],"每个页面必须重新加载js":["2.1"],"css等相关资源":["2.1"],"服务端返回完整的":["2.1"],"同时数据也可以在后端进行获取一并返回":["2.1"],"模板引擎":["2.1"],"相对容易":["2.2"],"相对复杂":["2.2"],"用户体验好":["2.2"],"快":["2.2"],"内容的改变不需要重新加载整个页面":["2.2"],"仅适合静态页面网站":["2.3"],"变化率不高的网站":["2.3"],"ssr":["2.3"],"层的操作效率高":["3.1"],"可以将":["3.1"],"操作转化成对象操作":["3.1"],"最终通过":["3.1"],"返回的对象就是虚拟":["3.2"],"dom":["3.2"],"做":["3.3"],"操作":["3.3"],"可重用":["4.0"],"可组合":["4.0"],"组件化开发能大幅提高应用的开发效率":["4.0"],"那更新的时候整个页面都要重新更新":["4.1"],"如果过分的拆分组件会导致":["4.1"],"这样会导致大量":["5.0"],"只会劫持已经存在的属性":["6.1"],"数组则是通过重写数组的方法来实现":["6.1"],"多层对象是通过递归来实现劫持":["6.1"],"来进行劫持":["6.2"],"浪费性能":["6.2"],"对所有索引进行劫持会造成性能浪费":["6.2"],"handler":["6.3","37.3"],"temp":["6.3"],"unshift":["7.1"],"sort":["7.1"],"depend":["8.1"],"当属性发生修改时会触发":["8.1"],"此时会触发依赖收集":["8.2"],"track":["8.2"],"vmcount":["9.0"],"avoid":["9.0"],"adding":["9.0"],"properties":["9.0"],"to":["9.0"],"instance":["9.0"],"its":["9.0"],"root":["9.0"],"at":["9.0","67.51"],"runtime":["9.0"],"declare":["9.0"],"it":["9.0"],"show":["10.1","73.131","73.134"],"只是切换当前":["10.1"],"如果页面逻辑在第一次加载的时候已经被确认后续不会频繁更改则采用":["10.3"],"effect":["11.0"],"计算属性可以简化模板中的复杂表达式":["11.1"],"vue3提供了":["11.2"],"oncleanup":["11.2"],"通常用于处理单值的响应式":["12.1"],"重新运行":["13.0"],"将静态语法做静态标记":["14.0"],"markup":["14.0"],"diff":["14.0"],"来做优化":["14.0"],"静态节点跳过":["14.0"],"最终就拿到了":["15.0"],"内部挂在的时候会产生一个":["15.0"],"watcher":["15.0"],"会调用":["15.0"],"函数会触发依赖收集":["15.0"],"eventbus":["16.0"],"或者使用状态管理工具":["16.0"],"中解析时":["17.0"],"先解析":["17.0"],"再解析":["17.0"],"重新渲染和打补丁之前":["18.1"],"此时修改数据不会再次触发更新方法":["18.1"],"updated":["18.1"],"由于数据更改导致的虚拟":["18.1"],"重新渲染和打补丁":["18.1"],"在这之后会调用该钩子":["18.1"],"beforedestroy":["18.1"],"缓存的组件停用时调用":["18.2"],"errorcaptured":["18.2"],"捕获一个来自子孙组件的错误时被调用":["18.2"],"rendertracked":["18.2"],"dev":["18.2"],"调试钩子":["18.2"],"响应式依赖被收集时调用":["18.2"],"的":["19.1","34.1","73.44","79.14"],"算法是平级比较":["19.1"],"老的儿子是一个列表":["19.2"],"新的儿子也是一个列表":["19.2"],"updatechildren":["19.2"],"列表优化比较":["19.2"],"头头":["19.2"],"尾尾":["19.2"],"的作用和原理":["20.0"],"v":["20.1","36.2"],"渲染的元素列表时":["20.1"],"他默认使用":["20.1"],"就地更新":["20.1"],"无":["20.2","67.3"],"会导致更新的时候出问题":["20.2"],"方法调用时":["21.1"],"会将":["21.1"],"实例方法":["21.2"],"通过把它们添加到":["21.2"],"调用":["21.3","62.19"],"方法":["21.3","62.19","67.11","73.34"],"apply":["21.3","67.48"],"walter":["22.1"],"white":["22.1"],"heisenberg":["22.1"],"两个组件就是两个实例":["23.0"],"希望数据不干扰":["23.0"],"child1":["23.0"],"new":["23.0","67.18","67.43","67.45","67.64","69.15","73.39"],"替换对应组件":["24.0"],"函数式组件不会被记录在组件的父子关系中":["24.0"],"这个写个方法":["25.0"],"不行吗":["25.0"],"vue3":["25.0","26.2","69.13","87.0"],"果断废弃了过滤器":["25.0"],"p":["25.0","84.1"],"只渲染元素和组件一次":["26.1"],"随后的重新渲染":["26.1"],"之后":["26.2","79.14"],"增加了":["26.2"],"memo":["26.2"],"通过依赖列表的方式控制页面渲染":["26.2"],"mixin有很多缺陷":["27.1"],"命名冲突问题":["27.1"],"数据来源问题":["27.1"],"全局混入":["27.2"],"一般情况下全局混入用于编写组件":["27.2"],"directives":["27.3"],"filters会在原型链上叠加":["27.3"],"什么时候使用它":["28.0"],"进行占位":["28.1"],"在使用组件时":["28.1"],"布局组件":["28.2"],"template":["28.3","35.1","77.5","79.20","87.3"],"是":["29.1"],"事件":["29.2"],"会解决中文输入问题":["29.2"],"target":["29.3"],"那组件中如果有多个数据想要做双向数据绑定怎么办":["29.3"],"很遗憾在":["29.3"],"vue2":["29.3"],"中不支持使用多个":["29.3"],"return":["30.0","60.3","62.3","67.30","69.15","72.1","73.36","73.77"],"c":["30.0","62.16","73.19"],"attrs":["30.0","77.13"],"elmenuitem":["31.2"],"nativeonclick":["31.2"],"alert":["31.2","67.40"],"js":["32.0","62.16"],"sub":["32.0"],"鼠标按键修饰符":["33.0"],"left":["33.0","63.11"],"right":["33.0"],"middle":["33.0"],"code":["34.1"],"对象":["34.2"],"mycomponent":["34.2"],"异步组件加载时使用的组件":["34.2"],"loading":["34.2","42.0"],"loadingcomponent":["34.2"],"forceupdate":["34.3"],"html":["35.1","56.4","63.19"],"div":["35.1","87.3"],"而不是销毁他们":["36.1"],"在组建再次重新激活时可以通过缓存的实例拿到之前渲染的":["36.1"],"app":["36.2","73.80","73.87"],"需要缓存的视图组件":["36.2"],"if":["36.2","73.49"],"route":["36.2"],"registered":["36.3"],"as":["36.3"],"different":["36.3"],"local":["36.3"],"components":["36.3","87.3"],"so":["36.3"],"cid":["36.3"],"alone":["36.3"],"is":["36.3"],"enough":["36.3"],"ctor":["36.3"],"tag":["36.3"],"生成缓存的key":["36.3"],"如果有key":["36.3"],"在":["36.4"],"alive":["36.4"],"缓存组件被激活的时候":["36.4"],"进行扩展":["37.1"],"指令的目的在于可以将操作":["37.1"],"也可能没有":["37.2"],"componentupdated":["37.2"],"指令所在组件的":["37.2"],"bindings":["37.3"],"vnode":["37.3"],"function":["37.3","62.3","67.13","67.39","73.30","73.49"],"e":["37.3"],"contains":["37.3"],"装饰器的用法":["38.0"],"对功能进行增强":["38.0"],"中介者模式":["38.0"],"中介者是一个行为设计模式":["38.0"],"通过提供一个统一的接口让系统的不同部分进行通信":["38.0"],"函数式组件开销低":["39.0"],"采用异步组件":["39.0"],"借助":["39.0"],"webpack":["39.0"],"分包的能力":["39.0"],"请求":["40.0"],"打包时开启":["40.0"],"gzip":["40.0"],"压缩处理":["40.0"],"compression":["40.0"],"nginx":["41.0"],"做反向代理":["41.0"],"websocket":["41.0"],"增添请求队列":["42.0"],"实现":["42.0","53.0"],"meta":["43.1"],"备注":["43.1"],"用户登录后可得到对应的权限列表":["43.1"],"通过权限列表筛查出对应符合的路由信息":["43.1"],"最后通过":["43.1"],"导航被确认":["44.0"],"aftereach":["44.0"],"不利于":["45.0"],"seo":["45.0"],"优化":["45.0"],"服务端无法响应到对应的资源":["46.0"],"采用集中存储管理应用的所有组件的状态":["47.2"],"核心就是解决数据的共享":["47.2"],"为了解决接口的复用问题":["47.3"],"封装公共的逻辑":["47.3"],"和":["47.4","57.1","63.13","73.44"],"action":["47.4"],"的选取":["47.4"],"进行数据共享":["47.5"],"store":["48.0","60.3","60.6","60.11"],"持久化插件":["49.0"],"非":["50.0"],"中修改数据":["50.0"],"createstore":["51.0"],"modules":["51.0"],"shaking":["52.0"],"更加友好":["52.0"],"代码也更容易压缩":["52.0"],"组件逻辑共享问题":["52.0"],"采用":["52.0"],"mixins":["52.0"],"setter":["53.0"],"的性能差":["53.0"],"当新增属性和删除属性时无法监控变化":["53.0"],"需要通过":["53.0"],"set":["53.0","62.6","79.29"],"数组不采用":["53.0"],"孙子组件出错时":["54.1"],"错误会一直向上抛":["54.1"],"vm":["54.2"],"info":["54.2"],"status":["54.3"],"handleqerror":["54.3"],"enum":["55.1"],"动态文本节点":["55.1"],"class":["55.1","73.42","87.3"],"动态c1ass":["55.1"],"style":["55.1","76.7","87.7"],"动态sty1e":["55.1"],"除了c1ass":["55.1"],"sty1e动态属性":["55.1"],"full":["55.1"],"有key":["55.1"],"这里我们知道默认根节点是一个":["55.2"],"节点":["55.2"],"如果要是按照之前的套路来搞":["55.2"],"text":["55.4","57.1","79.27","79.28","80.8","80.9"],"定义并提供核心功能":["56.1"],"描述遍历和操作":["56.5"],"树的接口":["56.5"],"domlevel3":["56.5"],"进一步扩展了":["56.5"],"增加了统一的方式加载和保存文档的方法":["56.5"],"包含在一个叫":["56.5"],"提供关于用户屏幕分辨率的详尽信息":["56.6"],"performance":["56.6"],"提供浏览器占用内存":["56.6"],"导航行为和时间统计的详尽信息":["56.6"],"这个值始终都是":["57.1"],"尽管":["57.1"],"ecmascript":["57.1"],"都已经废弃了":["57.1"],"文件的":["57.1"],"类型通常是":["57.1"],"application":["57.1"],"x":["57.1","78.9","78.10"],"不过给":["57.1"],"hidden":["59.0"],"boolean":["59.0"],"noshowingchildren":["59.0"],"yarn":["60.1"],"persistedstate":["60.2"],"const":["60.2","60.6","61.4","67.52"],"state":["60.3","60.8"],"import":["60.4","73.53","73.55"],"definestore":["60.4"],"from":["60.4","73.55"],"pinia":["60.4"],"export":["60.4","60.6","61.2","61.4"],"my":["60.5"],"custom":["60.5","77.12"],"这个":["60.5"],"usestore":["60.6"],"persist":["60.7","60.8"],"该":["60.7"],"somestate":["60.8"],"你好":["60.8"],"即将恢复":["60.9"],"id":["60.9","60.10"],"刚刚恢复完":["60.10"],"时可能发生的任何错误都将使用":["60.11"],"add":["61.1"],"plugin":["61.2"],"icons":["61.2","61.5"],"default":["61.2"],"defineconfig":["61.2"],"command":["61.2"],"usesvgicon":["61.4"],"被引用或者拷贝时":["62.1"],"会创建一个完全相等的变量":["62.1"],"引用类型存储在堆内存中":["62.1"],"date":["62.2"],"array":["62.2","67.21","67.24","67.51","67.52"],"document":["62.2","67.50"],"htmldocument":["62.2"],"window":["62.2"],"gettype":["62.2"],"obj":["62.2","62.5","62.16","67.52"],"type":["62.2","80.8","80.9","80.17","80.18"],"this":["62.3","67.36","73.43"],"注意这里a又可以等于1":["62.3"],"f规则object隐式转换":["62.3"],"注":["62.3","73.13"],"但是执行过3遍之后":["62.3"],"再重新执行a一3或之前的数字就是false":["62.3"],"因为valuei已经加上去了":["62.3"],"这里需要注意一下":["62.3"],"号操作符":["62.3"],"不仅可以用作数字相加":["62.3"],"还可以用作字符串拼接":["62.3"],"如果其中有一个是字符串":["62.3"],"另外一个是":["62.3"],"或布尔型":["62.3"],"则调用":["62.3"],"方法进行字符串拼接":["62.3"],"如果是纯对象":["62.3"],"数组":["62.3"],"正则等":["62.3"],"扩展运算符方式":["62.5"],"利用":["62.5"],"的扩展预算符":["62.5"],"在构造对象的同时完成浅拷贝的功能":["62.5"],"扩展预算符的语法为":["62.5"],"cloneobj":["62.5"],"concat":["62.5"],"拷贝数组":["62.5"],"数组的":["62.5"],"方法其实也是浅拷贝":["62.5"],"slice":["62.5"],"方法仅仅针对数组类型":["62.5"],"get":["62.6"],"alldesc":["62.6"],"遍历传入参数所有键的特性":["62.6"],"getprototypeof":["62.6"],"继承原型链":["62.6"],"of":["62.6","72.3"],"clone":["62.8"],"original":["62.8"],"getfriends":["62.8"],"20240117094316990":["62.8"],"六":["62.8"],"寄生组合式继承":["62.8"],"在前面这几种继承方式的优缺点基础上进行改造":["62.8"],"得出了寄生组合式的继承方法":["62.8"],"这也是所有继承方式里面相对最优的继承方式":["62.8"],"parent":["62.8"],"这里改用":["62.8"],"就可以减少组合继承中多进行一次构造的过程":["62.8"],"对象上的个方法":["62.9"],"调用这三个方法的必须是一个函数":["62.9"],"func":["62.9"],"thisarg":["62.9"],"param1":["62.9"],"param2":["62.9"],"bind":["62.9"],"共同点":["62.9"],"闭包其实就是一个可以访问其他函数内部变量的函数":["62.11"],"通常情况下":["62.11"],"直到找到该变量或者不存在父级作用域中":["62.12"],"iife":["62.13"],"立即执行函数":["62.13"],"方法是将一个":["62.14"],"表示加工函数执行时":["62.16"],"var":["62.16"],"b":["62.16","67.61"],"foreach":["62.18","67.33"],"every":["62.18"],"some":["62.18"],"filter":["62.18"],"map":["62.18"],"es6":["62.19"],"中的":["62.19"],"flat":["62.19"],"直接调用":["62.19"],"可以直接实现数组扁平化":["62.19"],"depth":["62.19"],"表示展开深度":["62.19"],"其实大多数时候我们对此并未建立形象的认知":["62.21"],"归并排序":["62.23"],"归并排序是建立在归并操作上的一种有效的排序算法":["62.23"],"该算法是采用分治法的一个非常典型的应用":["62.23"],"将已有序的子序列合并":["62.23"],"得到完全有序的序列":["62.23"],"先使每个子序列有序":["62.23"],"再使子序列段间有序":["62.23"],"若将两个有序表合并成一个有序表":["62.23"],"称为":["62.23"],"二路归并":["62.23"],"归并排序是一种稳定的排序方法":["62.23"],"归并排序的性能不收输入数据的影响":["62.23"],"为排序个数":["62.24"],"当":["62.24"],"采用插入排序":["62.24"],"如何转换盒子模型":["63.1"],"box":["63.1"],"sizing":["63.1"],"行数":["63.2"],"行高":["63.2"],"文字系列":["63.3"],"font":["63.3"],"size":["63.3"],"color":["63.3"],"权重":["63.4"],"0010":["63.4"],"第四":["63.4"],"此元素会作为列表展示":["63.7"],"https":["63.7"],"www":["63.7"],"w3school":["63.7"],"none":["63.8","66.6"],"overflow":["63.8"],"visible":["63.8"],"display":["63.8"],"px":["63.10"],"是相对于第一个有":["63.11"],"的父元素定位的":["63.11"],"如果有":["63.11"],"l":["63.12"],"左":["63.12"],"这是由":["63.13"],"nicolas":["63.13"],"gallagher":["63.13"],"请求的次数":["63.14"],"提升了性能":["63.14"],"但是重绘不一定会造成回流":["63.15"],"产生回流的情况":["63.15"],"改变元素的位置":["63.15"],"表示蓝色":["63.16"],"取值可以在正整数或者百分数":["63.16"],"表示透明度":["63.16"],"在元素之前":["63.17"],"webkit":["63.18","66.4","66.6"],"transform":["63.18"],"是针对于根":["63.19"],"jpg":["63.21"],"meida":["63.21"],"图进行等比缩放":["63.22"],"缩放成和电脑一样的尺寸":["63.22"],"换":["63.22"],"的电脑":["63.22"],"移动端的设计图":["63.22"],"把某元素转化成行内元素":["65.1"],"不独占一行":["65.1"],"不能设置宽高":["65.1"],"题外话":["65.3"],"为了符合":["65.3"],"css3":["65.3"],"的规范":["65.3"],"标签尽量少用":["65.3"],"改用":["65.3"],"就可以了":["65.3"],"所以前端在写":["65.4"],"标签的时候":["65.4"],"banner":["65.5"],"等中大图片":["65.5"],"一般是做动图的":["65.5"],"html5":["65.6"],"标签的":["65.6"],"解决":["65.6"],"autocapitalize":["66.1"],"rgba":["66.2"],"长按时下载图片":["66.3"],"脚本":["67.1"],"会阻塞":["67.1"],"结果是":["67.2"],"就是为了填补之前的坑":["67.3"],"具体区别":["67.3"],"是一个表示":["67.3"],"的对象":["67.3"],"方法通常由":["67.4"],"javascript":["67.4"],"在后台自动调用":["67.4"],"then":["67.5"],"settimeout":["67.5"],"要执行宏任务的前提是清空了所有的微任务":["67.5"],"有变量提升的":["67.6"],"变量悬挂声明":["67.6"],"除了函数外没有块级作用域":["67.7"],"else":["67.9","73.49","73.74"],"对象如何找属性":["67.11"],"查找规则":["67.11"],"tostring":["67.23","67.25"],"call":["67.23"],"功能有插入":["67.28"],"删除":["67.28"],"item":["67.33"],"index":["67.33"],"push":["67.33"],"world":["67.34","73.38"],"指向":["67.36"],"了函数的自由变量":["67.38"],"onclick":["67.40","77.12","77.13"],"对象原型中找":["67.41"],"构造函数原型中找":["67.41"],"对象上一层原型中找":["67.41"],"o":["67.43","67.46"],"参数不同":["67.49"],"第二个参数是数组":["67.49"],"getelementbyid":["67.50"],"ad82a40509c5b5b4680d4299c8f08d6c6d31af3c":["67.51"],"newobj":["67.52"],"isarray":["67.52"],"key":["67.52"],"in":["67.52"],"有过期时间":["67.53"],"可以设置过期时间":["67.53"],"把时间调整到之前的时间":["67.53"],"就过期了":["67.53"],"声明常量":["67.55"],"声明的变量可以再次赋值":["67.55"],"obj1":["67.63"],"不能当做构造函数":["67.64"],"rejected":["67.65"],"返回整体":["67.66"],"父组件引入了子组件":["69.2"],"那么先执行父的前":["69.2"],"个生命周期":["69.2"],"再执行子组件的":["69.2"],"中没有":["69.3"],"data":["69.3"],"xxx":["69.4"],"等等":["69.4"],"beforemount":["69.5"],"beforecreated":["69.6"],"第一次进入这个组件会执行":["69.8"],"是否相等":["69.9"],"如果不相同发起请求":["69.9"],"孙子":["69.11"],"子组件不能直接修改父组件的数据":["69.11"],"子组件直接使用父组件的数据":["69.11"],"description":["71.0"],"filepath":["71.0"],"extensions":["72.0"],"msg":["72.1","77.2"],"highlighted":["72.1"],"output":["72.1"],"即可":["73.2"],"image":["73.2","73.62"],"png":["73.2"],"选择安装路径":["73.2"],"完成后点击":["73.2"],"浏览配置汇总页":["73.3"],"确认无误后点击":["73.3"],"等待下载":["73.3"],"下载完成后":["73.3"],"包名":["73.4"],"通常为公司域名倒置":["73.4"],"save":["73.4"],"location":["73.4"],"项目目录":["73.4"],"模拟器和真机运行":["73.5"],"ets":["73.6","73.70","73.73","73.76","73.99","73.106","73.115","73.124","73.130","73.133","73.139"],"然后点击ide右侧的":["73.6"],"系统镜像下载完毕后":["73.7"],"配置模拟器":["73.7"],"可选":["73.7"],"至此模拟器安装完毕":["73.7"],"回到ide":["73.8"],"在右上角的设备列表中选择连接的手机":["73.8"],"默认已选中":["73.8"],"最后点击运行按钮":["73.8"],"即可将项目运行到真机中":["73.8"],"首次运行会提示缺少签名信息":["73.8"],"点击":["73.8"],"open":["73.8"],"值得注意的是":["73.9"],"本身也是由另一门语言":["73.9"],"typescriptlang":["73.12"],"org":["73.12"],"便可在终端执行以下命令来安装ts":["73.13"],"node了":["73.13"],"npm":["73.13"],"install":["73.13"],"g":["73.13"],"完成后需要重新启动vscode":["73.13"],"另其重新加载环境变量和相关依赖":["73.13"],"img":["73.15","73.61","73.83","73.93"],"而常量在赋值后便不能再修改":["73.16"],"typescript":["73.16","73.22","73.23","73.58","73.117"],"进行初始化":["73.23"],"声明函数的基础语法如下":["73.25"],"类型":["73.28"],"print":["73.28"],"test":["73.30"],"sum":["73.31"],"两者用":["73.32"],"符号连接":["73.32"],"它定义了对象的属性":["73.34"],"数据":["73.34"],"和行为":["73.34"],"通过类可以创建多个具有相似结构和行为的对象":["73.34"],"introduce":["73.36"],"hello":["73.36","73.38","76.5"],"i":["73.36"],"对象方法的调用":["73.37"],"对象创建后":["73.37"],"xiaoming":["73.39"],"三年二班":["73.39"],"student":["73.40"],"extends":["73.40"],"接口通常会作为一种契约或规范让类":["73.42"],"p2":["73.44"],"lisi":["73.44","73.77"],"最后分别调用":["73.44"],"这样改造完之后":["73.45"],"就可以很容易的在不改变现有代码的情况下":["73.45"],"支持新的支付方式了":["73.45"],"比如现在需要支持":["73.45"],"那我们就可以创建":["73.45"],"这个类":["73.45"],"并实现":["73.45"],"implement":["73.45"],"此时就可以声明一个接口来描述该对象的类型":["73.46"],"如下":["73.46","73.58"],"interface":["73.46"],"右":["73.48"],"或季节":["73.48"],"春":["73.48"],"向上移动":["73.49"],"类等":["73.52"],"在该模块外部是不可见的":["73.52"],"导入":["73.53"],"导入须使用":["73.53"],"创建模块对象":["73.54"],"上述导入重命名的方式能够很好的解决命名冲突的问题":["73.54"],"但是当冲突内容较多时":["73.54"],"这种写法会比较冗长":["73.54"],"除了导入重命名外":["73.54"],"hellofroma":["73.55"],"由于默认导入时无需关注导入项的名称":["73.55"],"主要扩展了":["73.56"],"声明式ui开发":["73.56"],"下面通过一个具体案例来学习这种开发范式":["73.57"],"假如现在要实现如下界面":["73.57"],"false":["73.58","73.107"],"在当前案例中":["73.59"],"我们就将":["73.60"],"状态数据驱动界面更新":["73.61"],"button":["73.62","73.98","87.8"],"案例的最终效果如下图所示":["73.64"],"dark":["73.65"],"row":["73.65"],"中添加子组件":["73.67"],"若不支持子组件":["73.67"],"则不需要写":["73.67"],"属性方法":["73.67"],"属性方法用于配置组件的样式和其他属性":["73.67"],"可以在组件声明的末尾进行链式调用":["73.67"],"各组件支持的属性可查看":["73.67"],"使用自定义组件":["73.68"],"用于修改或扩展其原有的行为":["73.69"],"在学完自定义组件的语法之后":["73.69"],"我们会发现前文案例中的每个页面实际上都是一个自定义组件":["73.69"],"但是和自定义组件的语法相比":["73.69"],"前边的每个案例还会多出一个":["73.69"],"entry":["73.69","73.84","73.92","73.93","73.99","73.100","73.110","73.124"],"main":["73.70","73.73","73.76","73.92","73.99","73.100","73.106","73.115","73.124","73.133"],"pages":["73.70","73.76","73.106","73.115","73.130","73.133","73.139"],"条件渲染":["73.72"],"src":["73.73","73.92","73.93","73.99","73.100","73.110","73.124"],"循环渲染":["73.75"],"json":["73.77","73.82"],"stringify":["73.77"],"在某些情况下默认的key生成函数":["73.77"],"会导致界面渲染效率低下":["73.77"],"此时可考虑通过keygenerator函数自定义生成逻辑":["73.77"],"例如如下场景":["73.77"],"状态变量数组定义如下":["73.77"],"zhangsan":["73.77"],"wangwu":["73.77"],"foreach语句如下":["73.77"],"column":["73.77"],"为图片组件":["73.79"],"以及":["73.80"],"两个目录下图片的使用方式有所不同":["73.80"],"下面逐一介绍":["73.80"],"media目录":["73.80"],"该目录下的资源":["73.80"],"需要使用":["73.80"],"r":["73.80"],"filename":["73.80"],"的方式引用":["73.80"],"无需指定具体版本":["73.80"],"系统会自动根据所处环境选择相应版本":["73.80"],"例如上图中的img":["73.80"],"png图片":["73.80"],"可通过":["73.80"],"引用":["73.80"],"需要注意的是":["73.80"],"的返回值即为":["73.80"],"同样需要使用":["73.82"],"要了解具体语法":["73.82"],"需要先熟悉element目录下的文件内容":["73.82"],"前文提到过":["73.82"],"element目录中可保存各种类型的数值":["73.82"],"且每种类型的值分别定义在一个json文件中":["73.82"],"文件中的内容为键值对":["73.82"],"name":["73.82","87.3"],"value":["73.82"],"的形式":["73.82"],"具体内容如下":["73.82"],"module":["73.82"],"desc":["73.82"],"模块描述":["73.82"],"使得图片完全显示在显示区域内":["73.83"],"auto":["73.83"],"自适应显示":["73.83"],"各选项的效果如下图所示":["73.83"],"相关案例见":["73.83","73.84","73.89","73.91","73.92","73.93","73.107","73.110","73.118"],"低等质量插值":["73.84"],"各选项效果如下图所示":["73.84"],"demos":["73.84","73.89","73.92","73.93","73.100","73.107","73.110","73.118"],"为文本组件":["73.86"],"此时我们便可通过如下方式引用并显示":["73.87"],"的内容":["73.87"],"作为单位":["73.89"],"resource类型":["73.89","73.91"],"类型参数用于引用resources下的element目录中定义的数值":["73.89"],"字体非常粗":["73.90"],"string类型":["73.90"],"类型的参数仅支持":["73.90"],"类型和":["73.90"],"类型参数的字符串形式":["73.90"],"例如例如":["73.90"],"具体写法为":["73.91"],"0x008000":["73.91"],"类型的参数用于应用resources下的element目录中定义的值":["73.91"],"各选项效果如下":["73.93"],"为按钮组件":["73.95"],"表示是否开启点击效果":["73.96"],"点击效果如下":["73.96"],"子组件会作为按钮上显示的内容":["73.96"],"可以是图片":["73.96"],"文字等":["73.96"],"这种方式下":["73.96"],"组件就不在需要":["73.96"],"绿色按钮":["73.98"],"一般用于两种状态之间的切换":["73.102"],"例如下图中的蓝牙开关":["73.102"],"组件的状态":["73.103"],"例如":["73.103"],"组件在选中":["73.105"],"或打开":["73.105"],"从打开切换为关闭时":["73.107"],"为文本输入组件":["73.109"],"normal":["73.112"],"基本输入模式":["73.112"],"方法设置光标的颜色":["73.113"],"用于设置字体":["73.114"],"包括字体大小":["73.114"],"字体粗细等":["73.114"],"callback":["73.117"],"void":["73.118"],"为进度条组件":["73.120"],"月食样式":["73.121"],"scalering":["73.121"],"环形有刻度样式":["73.121"],"capsule":["73.121"],"的刻度线的宽度":["73.123"],"2vp":["73.123"],"arkts提供了多种内置的弹窗供开发者使用":["73.125"],"除此之外还支持自定义弹窗":["73.125"],"一般会在短暂停留后自动消失":["73.127"],"属性用于设置提示信息":["73.128"],"属性用于设置提示信息停留时长":["73.128"],"单位为毫秒":["73.128"],"取值范围是":["73.128"],"component":["73.130","73.133","73.139"],"datepickerdialog":["73.136","73.137"],"日期滑动选择期弹窗":["73.136","73.137"],"标签中的":["76.7"],"的子元素":["77.1"],"span":["77.1"],"vue":["77.5"],"activeindex":["77.9","77.10"],"toggle":["77.9","77.10","78.1","78.2"],"click":["77.12","80.14","80.15","87.8"],"something":["77.15"],"y":["78.9","78.10"],"count":["79.1","79.2","80.4","80.5","82.1","82.2","83.1","83.2","84.1"],"如果想在侦听器回调中能访问被":["79.14"],"更新":["79.14"],"输出":["79.21"],"stop":["79.25"],"val":["79.29"],"model":["80.1"],"capitalize":["80.1","80.2"],"使它从不更新":["80.4"],"pre":["80.6"],"跳过该元素及其所有子元素的编译":["80.6"],"元素内具有":["80.6"],"many":["80.11","80.12"],"times":["80.11","80.12"],"activetab":["80.14","80.15"],"me":["81.1"],"onclick1":["81.4"],"添加按键修饰符让有且只有":["81.4"],"被按下的时候才触发":["81.4"],"onctrlclick":["81.5"],"添加按键修饰符让没有任何系统修饰符被按下的时候才触发":["81.5"],"reactivestate":["84.1"],"让我们来试试吧":["85.1"],"若想新增或者修改一个需求":["87.1"],"就需要分别修改":["87.1"],"compositionapi2":["87.3"],"h2":["87.3"],"姓名":["87.3"],"但模板中不需要":["87.4"],"直接使用即可":["87.4"],"对于":["87.4"],"proxy":["87.5"],"的实例对象":["87.5"],"简称":["87.5"],"接收的是对象类型":["87.6"],"zoom":["87.7"],"重新分配一个新对象":["87.7"],"会":["87.7"],"失去":["87.7"],"响应式":["87.7"],"gender":["87.8"],"changename":["87.8"],"修改名字":["87.8"]},{"0":["62.6","63.18","73.77"],"1":["0.64","55.5","58.64","73.77"],"2":["67.40"],"3":["0.31","14.0","31.0","56.1","58.31","67.60"],"4":["0.90","58.90","67.36","67.41","67.64","69.2"],"5":["9.0","19.2","55.1","67.6"],"6":["0.12","0.24","0.63","0.79","9.0","55.1","58.12","58.24","58.63","58.79","62.19"],"7":["0.60","0.79","55.1","56.6","58.60","58.79"],"8":["0.90","55.1","56.6","58.90"],"9":["0.30","58.30"],"11":["0.83","58.83","62.3"],"16":["0.15","58.15"],"26":["0.17","0.18","58.17","58.18"],"34":["0.34","58.34"],"50":["63.6","73.65"],"150":["73.82"],"200":["34.2"],"222":["67.9"],"256":["55.5"],"404":["45.0"],"726":["67.51"],"750":["63.22"],"1000":["62.24"],"因为它是一个关键字":["0.2","58.2"],"但是":["0.2","1.2","58.2"],"false":["0.3","0.32","0.33","58.3","58.32","58.33","67.12"],"和":["0.3","0.32","0.82","29.1","58.3","58.32","58.82","60.7","62.9","67.1","73.90"],"null":["0.3","0.24","0.28","21.3","58.3","58.24","58.28","62.5"],"只要把这个预处理命令放到函数头的开头即可":["0.5","58.5"],"function":["0.5","0.7","0.24","1.1","28.3","30.0","58.5","58.7","58.24","62.16","67.50"],"dosomething":["0.5","58.5"],"debugger":["0.7","58.7"],"import":["0.7","57.1","58.7"],"this":["0.7","58.7","62.9","69.11"],"default":["0.7","58.7"],"保留的关键字不能用作标识符或属性名":["0.8","58.8"],"static":["0.10","58.10"],"只能在":["0.12","58.12"],"合法":["0.13","58.13"],"但不推荐":["0.13","58.13"],"不初始化的情况下":["0.13","58.13"],"是不是有意为之":["0.14","58.14"],"在严格模式下":["0.14","58.14"],"如果像这样给未声明的变量赋值":["0.14","58.14"],"则会导致抛出":["0.14","58.14"],"如果需要定义多个变量":["0.14","58.14"],"可以在一条语句中用逗号分隔每个变量":["0.14","58.14"],"及可选的初始化":["0.14","58.14"],"快作用域是函数作用域的子集":["0.16","58.16"],"因此使用与":["0.16","58.16"],"的作用域限制也适用于":["0.16","58.16"],"不允许同一个块作用域中出现冗余声明":["0.16","58.16"],"这样会导致报错":["0.16","58.16"],"在":["0.17","24.0","58.17"],"声明之前的执行瞬间被称为":["0.17","58.17"],"temporal":["0.17","58.17"],"因此不能依赖条件声明模式":["0.19","58.19"],"ok":["0.21","58.21"],"for":["0.21","58.21"],"循环中":["0.21","58.21"],"不能用":["0.21","58.21"],"声明迭代变量":["0.21","58.21"],"迭代变量会自增":["0.21","58.21"],"次之":["0.22","58.22"],"复杂数据类型":["0.23","58.23"],"object":["0.23","12.1","58.23","87.7"],"或":["0.24","58.24"],"表示值为函数":["0.24","58.24"],"log":["0.26","0.66","0.80","23.0","54.2","58.26","58.66","58.80","62.16","67.30","67.35","67.43","67.44","67.45","67.46","67.61","73.17","73.30","73.39"],"true":["0.26","58.26","62.6"],"用等于操作符":["0.26","58.26"],"比较":["0.26","58.26"],"undefined":["0.28","0.74","0.75","0.82","58.28","58.74","58.75","58.82","67.13","67.17"],"n":["0.28","25.0","58.28"],"a":["0.28","0.30","0.36","29.3","58.28","58.30","58.36","67.63","73.54"],"不同的数值类型相应地也有不同的数值字面量格式":["0.29","58.29"],"以及":["0.30","58.30"],"后跟一个大写或者小写字母":["0.31","58.31"],"e":["0.31","58.31"],"再加上一个要乘的":["0.31","58.31"],"的多少次幂":["0.31","58.31"],"isfinite":["0.32","58.32"],"使用":["0.32","39.0","58.32","69.4"],"negative":["0.32","58.32"],"是数值":["0.33","58.33"],"可以转换为数值10":["0.33","58.33"],"它也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止":["0.34","58.34"],"这意味着第一次出现的小数点是有效的":["0.34","58.34"],"但是第二次出现的小数点就无效了":["0.34","58.34"],"此时剩余的字符会被忽略":["0.34","58.34"],"将转换为":["0.34","58.34"],"函数的另一个不同之处在于":["0.34","58.34"],"他始终忽略字符串开头的零":["0.34","58.34"],"这个函数能识别前面讨论的所有的浮点格式":["0.34","58.34"],"以及十进制格式":["0.34","58.34"],"开头的":["0.34","58.34"],"始终被忽略":["0.34","58.34"],"十六进制数值最终会返回":["0.34","58.34"],"因为":["0.34","58.34","63.22"],"只解析十进制值":["0.34","58.34"],"因此不能指定底数":["0.34","58.34"],"最后":["0.34","58.34"],"如果字符串表示整数":["0.34","58.34"],"没有小数点或者小数点后面全是":["0.34","58.34"],"则":["0.34","58.34"],"返回整数":["0.34","58.34"],"标示":["0.35","58.35"],"必须成对出现":["0.35","58.35"],"unnn":["0.36","58.36"],"nnnn":["0.36","58.36"],"默认情况下返回的是十进制":["0.38","58.38"],"second":["0.39","58.39"],"subtitle":["0.40","58.40"],"bbbb":["0.40","58.40"],"header":["0.40","58.40"],"这个函数的返回值是对模板字面量求":["0.41","58.41"],"值得到的字符串":["0.41","58.41"],"raw":["0.42","58.42"],"标签函数":["0.42","58.42"],"符号的用途是确保对象属性使用唯一标识符":["0.43","58.43"],"不会发生属性冲突的风险":["0.43","58.43"],"mywrappedsymbol":["0.44","58.44"],"创建普通符号":["0.45","58.45"],"s2":["0.45","58.45"],"对象字面量只能在计算属性语法中使用符号作为属性":["0.46","58.46"],"这些内置符号也没有什么特别之处":["0.47","58.47"],"它们就是全局函数":["0.47","58.47"],"的普通字符串属性":["0.47","58.47"],"指向一个符号":["0.47","58.47"],"tostring":["0.60","0.82","0.84","58.60","58.82","58.84"],"valueof":["0.60","0.63","0.83","58.60","58.63","58.83"],"返回对象对应的字符串":["0.60","58.60"],"或减":["0.63","58.63"],"如果是对象":["0.63","58.63"],"则调用其":["0.63","0.83","58.63","58.83"],"方法取得可以操作的值":["0.63","58.63"],"对得到的值应用上述规则":["0.63","58.63"],"转换为":["0.64","58.64"],"给结果加":["0.65","58.65"],"注意":["0.65","58.65","73.39"],"在位操作中":["0.65","58.65"],"特殊值":["0.65","58.65"],"有符号右移实际上是左移的逆运算":["0.70","58.70"],"结果就差太多了":["0.71","58.71"],"无符号右移操作符将负数的二进制表示当成正数的二进制表示来处理":["0.71","58.71"],"因为负数是其绝对值的二补数":["0.71","58.71"],"nan":["0.73","58.73"],"逻辑与操作符是一种短路操作符":["0.74","58.74"],"意思就是如果第一个操作数决定了结果":["0.74","58.74"],"那么永远不会对第二个操作数求值":["0.74","58.74"],"如果是非":["0.78","58.78"],"的有限值除以":["0.78","58.78"],"则根据第一个操作数的符号返回":["0.78","58.78"],"除数是无限值":["0.79","58.79"],"则返回被除数":["0.79","58.79"],"如果有不是数值的操作数":["0.79","58.79"],"console":["0.80","23.0","58.80","60.11","62.16","67.30","67.35","67.46","67.63","73.30","73.39"],"再将两个字符串拼接在一起":["0.82","58.82"],"如果有任一操作数是对象":["0.82","0.83","58.82","58.83"],"数值或布尔值":["0.82","58.82"],"则调用它们的":["0.82","58.82"],"方法以获取字符串":["0.82","58.82"],"然后再应用前面的关于字符串的规则":["0.82","58.82"],"对于":["0.82","6.2","58.82"],"将其转换为数值":["0.83","58.83"],"然后再根据前面的规则执行数学运算":["0.83","58.83"],"如果转换结果是":["0.83","58.83"],"则减法计算的结果是":["0.83","58.83"],"方法取得表示它的数值":["0.83","58.83"],"如果该值是":["0.83","58.83"],"则调用":["0.84","58.84"],"只有两个操作数在不转换的前提下不相等才返回":["0.87","58.87"],"右移后赋值":["0.89","58.89"],"无符号右移后赋值":["0.89","58.89"],"image":["1.0","73.84"],"20240313101558411":["1.0"],"声明式编程":["1.1"],"total2":["1.1"],"reduce":["1.1","62.18"],"memo":["1.1"],"current":["1.1","36.3"],"模型":["1.2"],"vue":["1.2","18.1","69.4","80.6","85.1"],"设计也受到了它的启发":["1.2"],"因此在文档中经常会使用":["1.2"],"vm":["1.2"],"的":["1.3","62.9"],"github":["1.3","67.51"],"专门写个编译时可以将模板编译成虚拟":["1.4"],"在构建的时候进行编译性能更高":["1.4"],"复用性等":["1.5","4.0"],"降低更新范围":["1.5","4.0"],"多页应用跳转需要整页资源刷新":["2.1"],"server":["2.1"],"服务端渲染":["2.1"],"ssr":["2.1","18.2"],"如何分清在哪渲染":["2.1"],"服务器压力小":["2.2"],"应用不利于搜索引擎的抓取":["2.2"],"首次渲染速度相对较慢":["2.2"],"第一次返回空的":["2.2"],"csr":["2.3"],"的方式":["2.3"],"首屏采用服务端渲染的方式":["2.3"],"diff":["3.1","53.0"],"算法比对差异进行更新":["3.1"],"减少了对真实":["3.1"],"会在后续的":["3.2"],"patch":["3.2","55.1"],"过程中进一步转化为真实":["3.2"],"将更改的部分应到真实":["3.3"],"dom":["3.3","36.1","37.1","44.0","56.1"],"上":["3.3","73.54"],"从而转化为最小量的":["3.3"],"测试性":["4.0"],"的产生而且看浪费内存":["5.0"],"如果粒度过低也无法精准检测变化":["5.0"],"所以采用":["5.0"],"vue3":["6.1","17.0","18.2","19.2","24.0","27.1","29.3"],"则采用":["6.1"],"需要对数组进行单独处理":["6.2"],"es6":["6.2","57.1"],"中新产生的":["6.2"],"new":["6.3","22.1","67.16"],"proxy":["6.3"],"收集":["6.3"],"effect":["6.3"],"触发":["6.3","44.0"],"更新":["6.3","8.1","44.0"],"reverse":["7.1"],"方法":["7.1","43.1","62.9","73.44"],"notify":["8.1"],"当属性发生修改时会找对应的":["8.2"],"列表依次执行":["8.2"],"upfront":["9.0"],"the":["9.0","36.3"],"option":["9.0"],"如果不是响应式的也不需要将其定义成响应式属性":["9.0"],"将属性定义成响应式的":["9.0"],"definereactive":["9.0"],"的显示或者隐藏":["10.1"],"计算属性中不支持异步逻辑":["11.1"],"computed属性是可以在模板中使用的":["11.1"],"函数":["11.2"],"让用户方便使用也解决了清理问题":["11.2"],"主要解决原始值的响应式问题":["12.1"],"cb":["13.0"],"重新生成代码":["14.0"],"codegen":["14.0"],"内部还会给所有的响应式数据增加":["15.0"],"dep":["15.0"],"属性":["15.0"],"让属性记录自己当前的":["15.0"],"用户后续的修改可以触发":["15.0"],"重新渲染":["15.0"],"但是功能不复杂的时候":["16.0"],"我们可以考虑使用":["16.0"],"会导致循环后再对每一项进行判断":["17.0"],"浪费性能":["17.0","53.0"],"中":["17.0","60.7"],"实例销毁之前调用":["18.1"],"实例仍然完全可用":["18.1"],"destroyed":["18.1","69.9"],"实例销毁后调用":["18.1"],"调用后":["18.1"],"实例指示的所有东西都会解绑定":["18.1"],"所有的事件监听器会被移出":["18.1"],"rendertriggered":["18.2"],"响应式依赖被触发时调用":["18.2"],"serverprefetch":["18.2"],"only":["18.2"],"组件实例在服务器上被渲染之前调用":["18.2"],"不考虑跨级比较的情况":["19.1"],"内部采用深度递归的方式":["19.1"],"头尾":["19.2"],"尾头":["19.2"],"比对查找进行复用":["19.2"],"中采用最长递增子序列来实现":["19.2"],"谈谈你对它的理解":["20.0"],"的策略":["20.1"],"如果数据项的顺序被改变":["20.1"],"将不会移动":["20.1"],"尽量不要采用索引作为":["20.2"],"作为参数传入":["21.1"],"这样插件中就不再需要依赖":["21.1"],"prototype":["21.2","67.24","67.64"],"else":["21.3","36.3"],"直接调用方法":["21.3"],"创建":["22.1"],"实例":["22.1"],"并挂在到一个元素上":["22.1"],"mount":["22.1"],"方法将其进行渲染":["22.2"],"但是需要引入编译时":["22.2"],"child2":["23.0"],"中因为所有的组件都不用":["24.0"],"format":["25.0"],"number":["25.0","73.16"],"const":["25.0","60.4","62.5"],"元素":["26.1"],"组件及其所有的子节点将被视为静态内容并跳过":["26.1"],"valuea":["26.2"],"valueb":["26.2"],"class":["26.2"],"box":["26.2"],"采用":["27.1","53.0"],"compisitionapi":["27.1"],"局部混入用于复用逻辑":["27.2"],"组件的扩展除了mixin之外":["27.3"],"还有一个属性叫做":["27.3"],"extends":["27.3"],"组件标签内部的内容会分发到对应的":["28.1"],"表格组件":["28.2"],"树组件":["28.2"],"scopedslots":["28.3"],"u":["28.3"],"key":["28.3"],"fn":["28.3"],"value":["29.1","62.16","73.117"],"input":["29.1","73.110","73.115"],"复选框会被解析成":["29.2"],"checked":["29.2"],"change":["29.2"],"中可以通过以下方法进行绑定":["29.3"],"html":["29.3"],"my":["29.3","77.12"],"on":["30.0"],"update":["30.0","36.3"],"event":["30.0","81.2"],"elmenu":["31.2"],"子组件会通过":["32.0"],"键值修饰符":["33.0"],"对":["33.0","47.4","56.6"],"keycode":["33.0"],"solitting":["34.1"],"功能一起配合使用":["34.1"],"加载失败时使用的组件":["34.2"],"error":["34.2","60.11"],"errorcomponent":["34.2"],"展示加载时组件的延时时间":["34.2"],"默认值是":["34.2"],"毫秒":["34.2"],"delay":["34.2","36.3"],"强制更新":["34.3"],"id":["35.1","62.6"],"count":["35.1","79.20","79.21"],"进行渲染":["36.1"],"mata":["36.2"],"keepalive":["36.2"],"不需要缓存的视图组件":["36.2"],"将组件实例直接复用":["36.3"],"componentinstance":["36.3"],"make":["36.3"],"freshest":["36.3"],"remove":["36.3"],"push":["36.3","67.31","67.32"],"lru算法":["36.3"],"setting":["36.3"],"until":["36.3"],"vnodetocache":["36.3"],"钩子":["36.4","44.0"],"的逻辑进行复用":["37.1"],"及其子":["37.2"],"全部更新后调用":["37.2"],"unbind":["37.2"],"target":["37.3"],"let":["37.3"],"method":["37.3"],"expression":["37.3"],"contextmethod":["37.3"],"document":["37.3"],"addeventlistener":["37.3"],"策略模式":["38.0"],"策略模式值对象有某个行为":["38.0"],"但是在不同的场景中":["38.0"],"该场景有不同的实现方案":["38.0"],"keep":["39.0"],"alive":["39.0"],"缓存组件":["39.0"],"webpack":["40.0"],"plugin":["40.0"],"插件":["40.0"],"静态资源采用":["40.0"],"cdn":["40.0"],"进行通信":["41.0"],"搭建":["41.0"],"bff":["41.0"],"backend":["41.0"],"效果":["42.0"],"维护取消请求":["42.0"],"addroutes":["43.1"],"动态添加路由":["43.1"],"按钮权限":["43.1"],"按钮权限一般采用自定义指令实现":["43.1"],"调用":["44.0"],"historyapi":["45.0"],"美观":["45.0"],"刷新会出现":["45.0"],"所以会出现":["46.0"],"以相应的规则保证状态以一种可预测的方式发生变化":["47.2"],"模块需要增加":["47.4"],"namespaced":["47.4"],"vuex4":["47.5"],"核心就是通过创建一个响应式对象进行数据共享":["47.5"],"subscribe":["48.0"],"监控状态变化":["48.0"],"将数据存储到":["49.0"],"localstorage":["49.0","60.5"],"或者":["49.0"],"在严格模式下会发生异常":["50.0"],"dispatch":["50.0"],"时会将":["50.0"],"包装成":["50.0"],"b":["51.0","67.63","73.16","73.20","73.22","73.31"],"的状态":["51.0"],"实现组件之间的逻辑共享":["52.0"],"但是会有数据来源不明确":["52.0"],"命名冲突等问题":["52.0"],"提供公共逻辑非常方便":["52.0"],"来进行劫持":["53.0"],"对所有索引进行劫持会造成性能浪费":["53.0"],"需要对数组单独进行处理":["53.0"],"算法也进行了重写":["53.0"],"模块编译优化":["53.0"],"parchflags":["53.0"],"如果":["54.1"],"中返回":["54.1"],"统一处理异常接口":["54.3"],"promise":["54.3"],"reject":["54.3"],"需要完整diff":["55.1"],"hydrate":["55.1"],"events":["55.1"],"挂载过事件的":["55.1"],"stable":["55.1"],"fragment":["55.1","55.3"],"稳定序列":["55.1"],"子节点顺序不会发生变化":["55.1"],"keyed":["55.1"],"子节点有key的fragment":["55.1"],"unkeyed":["55.1","55.5"],"子节点没有key的fragment":["55.1"],"need":["55.1"],"这时候切换":["55.2"],"的状态将无法从":["55.2"],"标签切换到":["55.2"],"block":["55.4","55.5","63.9","65.1"],"text":["55.5","63.3","73.77","73.89","73.92","73.93","80.17","80.18"],"可以试想一下":["55.5"],"如果不增加这个":["55.5"],"文档对象模型":["56.1"],"提供与网页内容交互的方法和接口":["56.1"],"操作符":["56.3"],"全局对象":["56.3"],"中使用扩展的":["56.4"],"xml":["56.4"],"load":["56.5"],"and":["56.5","73.36"],"save":["56.5"],"的新模块中":["56.5"],"还有验证文档的方法":["56.5"],"validation":["56.5"],"cookie":["56.6"],"的支持":["56.6"],"对其他自定义对象":["56.6"],"如":["56.6"],"属性这个值有可能导致脚本被忽略":["57.1"],"在非":["57.1"],"ie":["57.1"],"浏览器中有效的其他值还有":["57.1"],"如果这个值是":["57.1"],"module":["57.1"],"则代码会被当成":["57.1"],"模块":["57.1"],"而且只有这时候代码中才能出现":["57.1"],"alwaysshow":["59.0"],"title":["59.0"],"string":["59.0","73.117"],"add":["60.1"],"use":["60.2"],"somestate":["60.3","60.4","60.6"],"hello":["60.3","67.34","73.13"],"usestore":["60.4"],"main":["60.4","73.83","73.84","73.87","73.89","73.90","73.91","73.93","73.103","73.107","73.110","73.118","73.121","73.123","73.128"],"将被持久化存储在":["60.5"],"中的":["60.5"],"state":["60.6","73.58"],"你好":["60.6","73.82"],"persist":["60.6"],"只有":["60.7"],"该":["60.8"],"将使用":["60.8"],"将会在恢复数据":["60.9","60.10"],"之前":["60.9"],"输出":["60.9","60.10","67.10"],"之后":["60.10"],"return":["61.2","67.31","67.32","67.33","73.31"],"plugins":["61.2"],"指定要缓存的文件夹":["61.2"],"process":["61.2"],"href":["61.3"],"symbolid":["61.3"],"globally":["61.4"],"app":["61.5"],"存储的是地址":["62.1"],"多个引用指向同一个地址":["62.1"],"这里会涉及一个":["62.1"],"先进行typeof判断":["62.2"],"如果是基础数据类型":["62.2"],"对于typeofi返回结果是object的":["62.2"],"再进行如下的判断":["62.2"],"正则返回结果":["62.2"],"replace":["62.2"],"s":["62.2"],"注意正则中间有个空格":["62.2"],"代码验证":["62.2"],"需要注意大小写":["62.2"],"哪些是typeof判断":["62.2"],"哪些是tostring判断":["62.2"],"思考下":["62.2"],"是object":["62.2"],"因此tostring返回":["62.2"],"则默认调用对象的转换方法会存在优先级":["62.3"],"然后再进行拼接":["62.3"],"如果其中有一个是数字":["62.3"],"布尔值或者数字":["62.3"],"则会将其转换成数字进行加法运算":["62.3"],"对象的情况还是参照上一条规则":["62.3"],"如果其中一个是字符串":["62.3"],"一个是数字":["62.3"],"则按照字符规则进行拼接":["62.3"],"常规情况":["62.3"],"下面看一下特殊情况":["62.3"],"lundefined":["62.3"],"规则1":["62.3"],"undefined转换字符串":["62.3"],"1null":["62.3"],"null转换字符串":["62.3"],"1true":["62.3"],"true转换字符串":["62.3"],"1n":["62.3"],"arr":["62.5","62.6","62.16"],"begin":["62.5"],"end":["62.5"],"手动实现一个浅拷贝":["62.5"],"对基础类型做一个最基本的一个拷贝":["62.5"],"对引用类型开辟一个新的存储":["62.5"],"并且拷贝一层对象属性":["62.5"],"shallowclone":["62.5"],"if":["62.5","67.52"],"typeof":["62.5","67.52","73.17"],"clonetarget":["62.5"],"下面是验证代码":["62.6"],"num":["62.6"],"str":["62.6"],"boolean":["62.6"],"unf":["62.6"],"nul":["62.6"],"name":["62.6","87.4"],"我是一个对象":["62.6"],"func":["62.6"],"我是一个函数":["62.6"],"reg":["62.6"],"我是一个正则":["62.6"],"ig":["62.6"],"parent6":["62.8"],"child6":["62.8"],"child5":["62.8"],"person6":["62.8"],"20240117094338932":["62.8"],"改变函数":["62.9"],"指向":["62.9"],"不同点":["62.9"],"直接返回执行结果":["62.9"],"返回的是一个函数":["62.9"],"特征":["62.9"],"方法参数":["62.9"],"多个":["62.9"],"函数内部变量是无法被外部访问的":["62.11"],"因此使用闭包的作用":["62.11"],"闭包产生的本质就是当前环境中存在指向父级作用域的引用":["62.12"],"创建了闭包":["62.13"],"保存了全局作用域":["62.13"],"window":["62.13"],"对象或者值转换为":["62.14"],"第一个参数传入的是要转换的对象":["62.14"],"第二个参数是一个":["62.14"],"index":["62.16"],"arguments":["62.16"],"reduceright":["62.18"],"entries":["62.18"],"infinity":["62.19"],"表示一直展开":["62.19"],"正则和":["62.19"],"json":["62.19"],"方法共同处理":["62.19"],"空间复杂度":["62.21"],"对一个算法在运行过程中临时占用存储空间大小的度量":["62.21"],"但表现比选择排序好很多":["62.23"],"代价是需要额外的内存空间":["62.23"],"mergesort":["62.23"],"merge":["62.23"],"il":["62.23"],"ir":["62.23"],"mid":["62.23"],"采用三路快速排序":["62.24"],"采用中位数作为哨兵元素":["62.24"],"是一个死值":["63.2"],"height":["63.3"],"align":["63.3"],"background":["63.3"],"css不可继承属性":["63.3"],"伪元素选择器":["63.4"],"0001":["63.4"],"第五":["63.4"],"absolute":["63.6"],"left":["63.6","63.15"],"com":["63.7","67.51"],"cn":["63.7"],"cssref":["63.7"],"pr":["63.7"],"的值为":["63.8"],"inline":["63.8"],"table":["63.8"],"cell":["63.8"],"content":["63.9"],"display":["63.9"],"也好":["63.10"],"方便一点":["63.10"],"right":["63.11"],"top":["63.11","63.15"],"bottom":["63.11"],"最终只有":["63.11"],"r":["63.12"],"右":["63.12"],"jonathan":["63.13"],"neal":["63.13"],"维护的一个":["63.13"],"缺点":["63.14"],"维护比较差":["63.14"],"例如图片位置进行调整或者内容宽高修改":["63.14"],"显示隐藏元素":["63.15"],"产生重绘的情况":["63.15"],"取值":["63.16"],"继承的区别":["63.16"],"在元素之后":["63.17"],"清除浮动":["63.17"],"scale":["63.18"],"元素的":["63.19"],"color":["63.20","73.50","73.98"],"red":["63.20"],"700px":["63.21"],"宽度":["63.22"],"设计图":["63.22"],"就是":["63.22"],"把某元素转化成行内块元素":["65.1"],"可以设置宽高":["65.1"],"加载顺序有区别":["65.2"],"浏览器先加载标签":["65.2"],"用来作文字倾斜的":["65.3"],"是一个逻辑标签":["65.3"],"用来强调文字内容的":["65.3"],"只是一个倾斜的标签":["65.3"],"没有实际含义":["65.3"],"为了增加":["65.4"],"效果要加入":["65.4"],"webp":["65.5"],"同时支持有损和无损压缩":["65.5"],"相同质量的图片":["65.5"],"可以通过":["65.6"],"html5shiv":["65.6"],"js":["65.6","76.5"],"off":["66.1"],"解析是同步的":["67.1"],"一起的":["67.1"],"不是按顺次执行":["67.1"],"空对象指针":["67.3"],"转为数值为":["67.3"],"并不显式地出现在代码中":["67.4"],"除了比较值":["67.4"],"流程":["67.5"],"同步":["67.5"],"优先级":["67.6"],"声明变量":["67.6"],"声明普通函数":["67.6"],"普通声明函数是不看写函数的顺序的":["67.7"],"bash":["67.9"],"bas":["67.10"],"现在对象本身找":["67.11"],"构造函数中找":["67.11"],"对象原型中找":["67.11"],"因为key":["67.14"],"为对象时":["67.14"],"都会被转成":["67.14"],"输出结果":["67.16","67.17","67.19"],"funca":["67.18"],"array":["67.22","67.23","67.25"],"indexof":["67.23","67.25"],"替换":["67.28"],"返回":["67.28"],"删除的元素":["67.28"],"math":["67.33"],"max":["67.33"],"最多的字符是":["67.35"],"次数是":["67.35"],"对构造函数有返回值的处理判断":["67.36"],"onclick":["67.39","67.50","73.65"],"就是把原型串联起来":["67.41"],"bind":["67.48","69.12"],"存储大小的限制":["67.53"],"存储量不能超过":["67.53"],"4k":["67.53"],"style":["67.54"],"声明的常量不能被再次赋值":["67.55"],"区别四":["67.55"],"声明的变量没有自身的作用域":["67.55"],"报错":["67.57"],"不报错":["67.59"],"c":["67.60"],"箭头函数没有":["67.64"],"已失败":["67.65"],"每一个匹配到的都返回":["67.66"],"全部匹配才会返回":["67.67"],"那么我们的业务是父组件引入子组件":["69.2"],"并且优先加载子组件的数据":["69.2"],"那么在父组件中的请求要放":["69.2"],"中有":["69.3"],"中可以拿到":["69.3"],"的方法的":["69.3"],"系统内置的":["69.4"],"mounted":["69.5","69.7"],"created":["69.6","69.8"],"beforemount":["69.6","69.8"],"beforecreated":["69.8"],"关闭页面":["69.9"],"记录视频播放的时间":["69.9"],"parent":["69.11"],"xxx":["69.11"],"使用父组件的数据":["69.11"],"resolve":["69.15"],"blog":["71.0"],"api":["71.0"],"examples":["71.0"],"provided":["72.0"],"by":["72.0"],"markdown":["72.3"],"extensions":["72.3"],"配置安装选项":["73.2"],"勾选第一项创建桌面快捷方式即可":["73.2"],"install":["73.2"],"开始安装":["73.2"],"finish":["73.3"],"完成配置":["73.3"],"完成配置后":["73.3"],"可根据喜好调整deveco":["73.3"],"studio主题风格":["73.3"],"configure":["73.3"],"下的":["73.3"],"ide界面说明":["73.4"],"项目结构概述":["73.4"],"下面逐一演示":["73.5"],"perviewer":["73.6"],"即可看到预览效果":["73.6"],"若想将项目运行到模拟器":["73.7"],"首先需要启动模拟器":["73.7"],"点击下图中的启动按钮":["73.7"],"稍等片刻":["73.7"],"等待模拟器开机":["73.7"],"开机后的模拟器如下图所示":["73.7"],"signing":["73.8"],"configs":["73.8"],"进行配置即可":["73.8"],"生成签名信息需要先登陆华为开发者账号":["73.8"],"sign":["73.8"],"in":["73.8"],"浏览器会自动跳转到登录页面":["73.8"],"javascript":["73.9"],"因此三者的关系如下图所示":["73.9"],"zh":["73.12"],"play":["73.12"],"编写程序并运行":["73.13"],"在完成上述环境的准备后":["73.13"],"就可以编写typescript程序并运行了":["73.13"],"具体操作如下":["73.13"],"首先在合适的位置创建一个工程目录":["73.13"],"例如":["73.13","73.80","73.105"],"d":["73.13","73.19"],"workspace":["73.13"],"然后使用vscode打开目录":["73.13"],"isdone":["73.21"],"person":["73.23","73.34"],"img":["73.25","73.57","73.59","73.64","73.102","73.113","73.127"],"例如定义一个":["73.34"],"其对象可以有":["73.34"],"am":["73.36"],"便可通过对象调用类中声明的方法":["73.37"],"如下":["73.37"],"intro":["73.37"],"使用静态成员":["73.38"],"静态成员无需通过对象实例访问":["73.38"],"直接通过类本身访问即可":["73.38"],"类的继承需要使用关键字":["73.39"],"子类构造器中需使用":["73.39"],"说明":["73.40"],"修饰的属性或方法是私有的":["73.40"],"只能在声明它的类中的被访问":["73.40"],"修饰的属性或方法是受保护的":["73.40"],"只能在声明它的类和其子类中被访问":["73.40"],"去遵守":["73.42"],"确保类实现某些特定的行为或功能":["73.42"],"你会发现":["73.44"],"同样是":["73.44"],"类型的两个对象":["73.44"],"调用同一个":["73.44"],"方法时":["73.44"],"表现出了不同的行为":["73.44"],"这就是":["73.44"],"这个接口":["73.45"],"implements":["73.45"],"夏":["73.48"],"秋":["73.48"],"冬":["73.48"],"向下移动":["73.49"],"通过为枚举属性赋值":["73.50"],"可以赋予枚举属性一些更有意义的信息":["73.50"],"例如以下枚举":["73.50"],"为了在一个模块中使用其他模块的内容":["73.52"],"必须对这些内容进行":["73.52"],"导入":["73.52"],"from":["73.53"],"modulea":["73.53"],"还可以将某个模块的内容统一导入到一个":["73.54"],"模块对象":["73.54"],"这样就能简洁有效的解决命名冲突的问题了":["73.54"],"具体语法如下":["73.54"],"所以默认导出支持匿名内容":["73.55"],"比如匿名函数":["73.55"],"相关的能力":["73.56"],"ison":["73.58"],"具体逻辑如下图所示":["73.59"],"当用于点击":["73.60"],"关灯按钮":["73.60"],"开发者只需修改状态变量的值":["73.61"],"界面就会自动更新":["73.61"],"等等":["73.62"],"并且arkts还支持自定义组件":["73.62"],"让开发者可根据具体需求自定义组件中的内容":["73.62"],"button":["73.65","77.12","87.3"],"关灯":["73.65"],"开灯":["73.65"],"除去每个组件的专有属性":["73.67"],"还有各组件都能配置的通用属性":["73.67"],"通用属性也可通过":["73.67"],"文档查看":["73.67"],"事件方法":["73.67"],"事件方法用于为组件绑定交互事件":["73.67"],"各组件的支持的事件可查看":["73.67"],"可使代码的结构更加清晰":["73.68"],"并且能提高代码的复用性":["73.68"],"那":["73.69"],"的作用又是啥呢":["73.69"],"在鸿蒙应用中":["73.69"],"每个页面都是由一些列组件组合而成的":["73.69"],"并且这些组件都是逐层嵌套的":["73.69"],"因此这些组件最终形成了一个组件树的结构":["73.69"],"如下图所示":["73.69"],"helloworld":["73.70","73.73","73.76"],"custom":["73.70","73.139","77.13"],"solution":["73.70","73.73","73.76","73.130","73.133","73.139"],"pages":["73.73","73.83","73.84","73.87","73.89","73.91","73.92","73.93","73.99","73.100","73.107","73.110","73.118","73.124"],"condition":["73.73"],"初次渲染时":["73.77"],"每个元素对应的key依次为":["73.77"],"zhagnsan":["73.77"],"若现有一个操作是向":["73.77"],"数组头部插入新的元素":["73.77"],"例如新元素为wanger":["73.77"],"按照默认的key生成逻辑":["73.77"],"插入新元素之后每个元素的key就会依次变为":["73.77"],"wanger":["73.77"],"用于在应用中显示图片":["73.79"],"因此可以直接将":["73.80"],"作为":["73.80"],"组件的参数":["73.80"],"rawfile目录":["73.80"],"path":["73.80"],"to":["73.80"],"your":["73.80"],"file":["73.80"],"文件的路径为相对于":["73.80"],"的路径":["73.80"],"例如上图中的icon":["73.80"],"greeting":["73.82"],"integer":["73.82"],"我们可以通过":["73.82"],"引用相应的":["73.82"],"具体语法为":["73.82"],"data":["73.82"],"demos":["73.83","73.87","73.90","73.91","73.96","73.103","73.121","73.123","73.128"],"entry":["73.83","73.87","73.89","73.90","73.91","73.96","73.103","73.107","73.118","73.121","73.123","73.128"],"src":["73.83","73.84","73.87","73.89","73.90","73.91","73.103","73.107","73.118","73.121","73.123","73.128"],"ets":["73.83","73.84","73.87","73.89","73.90","73.91","73.92","73.93","73.100","73.103","73.107","73.110","73.118","73.121","73.123"],"component":["73.83","73.84","73.89","73.91","73.92","73.93","73.99","73.100","73.106","73.107","73.110","73.115","73.118","73.124"],"用于显示文字内容":["73.86"],"相关案例见":["73.87","73.90","73.96","73.103","73.121","73.123","73.128"],"attribute":["73.92","73.93","73.99","73.106","73.115","73.124"],"通常用于响应用户的点击操作":["73.95"],"参数了":["73.96"],"具体如下":["73.96"],"状态下的背景色":["73.105"],"toggle":["73.106"],"用于接收用户输入的文本内容":["73.109"],"password":["73.112"],"密码输入模式":["73.112"],"效果如下":["73.113","73.114"],"用于设置字体颜色":["73.114"],"void":["73.117"],"其中":["73.117"],"用于显示各种进度":["73.120"],"胶囊样式":["73.121"],"progress":["73.124"],"来满足各种不同的需求":["73.125"],"具体效果如下":["73.127"],"属性用于设置提示信息到底部的距离":["73.128"],"dialog":["73.130","73.133","73.139"],"显示警告对话框":["73.131"],"具体用法可参考相关案例或者官方文档":["73.131","73.134"],"显示操作列表弹窗":["73.134"],"uc3dbfab7":["73.136"],"timepickerdialog":["73.137"],"时间滑动选择器弹窗":["73.137"],"的值链接到动态的组件状态":["76.3"],"scoped":["76.7"],"也可以将其内的":["76.7"],"msg":["77.1"],"emit":["77.13"],"click":["77.13","87.3"],"reset":["78.5"],"清空":["78.5"],"你需要指明":["79.14"],"post":["79.14"],"选项":["79.14"],"可以停止监听":["79.25"],"operations":["79.29"],"ipttext":["80.2"],"所有":["80.6"],"quickly":["80.11","80.12"],"toggletab":["80.14","80.15"],"onctrlclick":["81.4"],"添加按键修饰符让没有任何系统修饰符被按下的时候才触发":["81.4"],"exact":["81.5"],"onclick2":["81.5"],"组合":["87.0"],"不便于维护和复用":["87.1"],"年龄":["87.3"],"age":["87.3"],"changename":["87.3"],"修改姓名":["87.3"],"张三":["87.4"],"来说":["87.4"],"注意点":["87.5"],"定义的响应式数据是":["87.5"],"内部其实也是调用了":["87.6"],"reactive":["87.6"],"assign":["87.7"],"去整体替换":["87.7"],"使用原则":["87.7"],"若需要一个基本类型的响应式数据":["87.7"],"必须使用":["87.7"],"若需要一个响应式对象":["87.7"],"changeage":["87.8"],"修改年龄":["87.8"]},{"0":["0.90","36.3","58.90"],"1":["0.20","58.20","67.13"],"2":["0.20","25.0","58.20","73.8"],"3":["0.20","58.20","69.11","87.7"],"4":["0.20","31.0","58.20","62.24"],"5":["0.84","58.84"],"6":["0.31","58.31"],"7":["0.24","58.24"],"9":["0.80","55.1","58.80"],"10":["55.1","67.57"],"11":["55.1","67.19"],"12":["73.50"],"16":["73.50"],"20":["62.8","73.50"],"24":["73.50"],"26":["0.66","58.66"],"29":["0.14","58.14"],"36":["0.15","58.15"],"75":["63.18"],"100":["73.65"],"200":["62.24","73.16"],"215":["62.24"],"375":["63.22"],"760":["67.51"],"908":["0.34","58.34"],"1000":["73.45"],"3000":["34.2"],"31250000":["0.31","0.34","58.31","58.34"],"是一个完全有效的函数名":["0.2","58.2"],"不能作为标识符":["0.3","58.3"],"这是多行注释":["0.4","58.4"],"函数体":["0.5","58.5"],"if":["0.7","58.7"],"throw":["0.7","58.7"],"delete":["0.7","58.7"],"及更晚的版本中使用":["0.12","58.12"],"变量会保存一个特殊值":["0.13","58.13"],"undefined":["0.13","0.18","0.73","36.3","58.13","58.18","58.73","62.16"],"found":["0.14","58.14"],"false":["0.14","54.1","58.14","62.6","67.19","73.60"],"age":["0.14","58.14","62.8"],"不能定义名为":["0.14","58.14"],"eval":["0.14","58.14"],"和":["0.14","0.21","0.26","0.65","18.1","58.14","58.21","58.26","58.65"],"arguments":["0.14","58.14","67.64"],"的变量":["0.14","58.14"],"否则会导致语法错误":["0.14","0.35","58.14","58.35"],"syntaxerror":["0.16","58.16"],"标识符已经声明过了":["0.16","58.16"],"dead":["0.17","58.17"],"zone":["0.17","58.17"],"在此阶段引用任何后面才声明的变量都会抛出":["0.17","58.17"],"但是可以用在":["0.21","58.21"],"in":["0.21","58.21","62.5"],"of":["0.21","58.21"],"中":["0.21","28.1","58.21","60.5","67.40","69.2"],"因为每次迭代只是创建一个新的变量":["0.21","58.21"],"symbol":["0.24","58.24"],"表示值为符号":["0.24","58.24"],"始终返回":["0.26","58.26"],"但要注意":["0.26","58.26"],"这个操作符会为了比较而转换它的操作数":["0.26","58.26"],"及其他大小混写形式":["0.27","58.27"],"是有效的标识符":["0.27","58.27"],"但不是布尔值":["0.27","58.27"],"不存在":["0.28","58.28"],"f":["0.30","58.30","67.17"],"十六进制数字中的字母大小写均可":["0.30","58.30"],"125e7":["0.31","0.34","58.31","58.34"],"等于":["0.31","58.31"],"会将小数点后至少包含":["0.31","58.31"],"个零的浮点值转换为科学计数法":["0.31","58.31"],"positive":["0.32","58.32"],"也可以获取正":["0.32","58.32"],"负":["0.32","58.32"],"这两个属性包含的值分别就是":["0.32","58.32"],"blue":["0.33","58.33","73.50"],"不可以转换为数值":["0.33","58.33"],"可以转换为数值1":["0.33","58.33"],"00":["0.34","58.34"],"0908":["0.34","58.34"],"x03a3":["0.36","58.36"],"表示希腊字符":["0.36","58.36"],"console":["0.44","58.44","67.31","67.32","67.33","73.43"],"log":["0.44","58.44","67.31","67.32","67.33","67.63","73.43"],"bar":["0.45","58.45"],"的实例":["0.47","58.47"],"所有内置符号属性都是不可写":["0.47","58.47"],"不可枚举":["0.47","58.47"],"不可配置的":["0.47","58.47"],"数值或布尔值表示":["0.60","58.60"],"通常与":["0.60","58.60"],"的返回值相同":["0.60","58.60"],"则调用":["0.63","0.82","58.63","58.82"],"tostring":["0.63","0.83","58.63","58.83"],"并再次应用其他规则":["0.63","58.63"],"变量类型从对象变成数值":["0.63","58.63"],"nan":["0.65","58.65","67.3"],"infinity":["0.65","34.2","58.65"],"会被当成":["0.65","58.65"],"处理":["0.65","58.65"],"所以右移之后结果变":["0.71","58.71"],"得非常之大":["0.71","58.71"],"对逻辑与操作符来说":["0.74","58.74"],"如果第一个操作数是":["0.74","58.74"],"那么无论第二个操作数是什么值":["0.74","58.74"],"结果也不可能等于":["0.74","58.74"],"同样与逻辑与类似":["0.75","58.75"],"逻辑或操作符也具有短路的特性":["0.75","58.75"],"只不过对逻辑或而言":["0.75","58.75"],"第一个操作数求值为":["0.75","58.75"],"第二个操作数就不会再被求值了":["0.75","58.75"],"如果有不是数值的操作数":["0.77","0.78","58.77","58.78"],"则先在后台用":["0.77","0.78","0.79","58.77","58.78","58.79"],"number":["0.77","0.78","0.79","58.77","58.78","58.79","73.17","73.112"],"将其转换为数值":["0.77","58.77"],"然后再应用上述规则":["0.77","0.78","0.79","58.77","58.78","58.79"],"函数将其转换为数值":["0.78","0.79","58.78","58.79"],"null":["0.82","58.82","67.41"],"string":["0.82","58.82"],"函数":["0.82","58.82","87.6"],"分别获取":["0.82","58.82"],"如果对象没有":["0.83","58.83"],"方法":["0.83","58.83","69.3"],"然后再将得到的字符串转换为数值":["0.83","58.83"],"如果有任一操作数是布尔值":["0.84","58.84"],"则将其转换为数值再执行比较":["0.84","58.84"],"num的值为0":["0.90","58.90"],"return":["1.1","25.0","62.5","62.16","67.52"],"viewmodel的缩写":["1.2"],"这个变量表示":["1.2"],"实例":["1.2"],"com":["1.3"],"不需要运行的时候进行编译":["1.4"],"只重新渲染变化的组件":["1.5","4.0"],"是在前端动态生成的":["2.1"],"在服务端处理好并返回的是":["2.1"],"html":["2.2"],"需要再次请求首屏数据":["2.2"],"白屏时间长":["2.2"],"后续交互采用客户端渲染的方式":["2.3"],"nuxtjs":["2.3"],"的操作":["3.1"],"虚拟":["3.1"],"不依赖真实平台环境从而也可以实现跨平台":["3.1"],"高效更新视图":["3.3"],"产生过多也会造成性能浪费":["4.1"],"算法":["5.0"],"组件级watcher":["5.0"],"proxy":["6.1"],"map":["6.2"],"这些数据结构不支持":["6.2"],"reactive":["6.3","47.5"],"数组中如果是对象数据类型也会进行递归劫持":["7.1"],"image":["8.1","19.2","20.2","62.6","62.16","73.83"],"png":["8.1","73.80"],"trigger":["8.2"],"通知视图更新":["9.0"],"dep":["9.0"],"notify":["9.0"],"当我们选择新增属性时":["9.0"],"可以考虑使用对象合并的方式实现":["9.0"],"this":["9.0","31.2","36.4","67.50","69.4"],"info":["9.0"],"newproperty1":["9.0"],"newproperty2":["9.0"],"he":["9.0"],"defineproperty":["12.1","62.6"],"实现的":["12.1"],"内部会调用":["13.0"],"newval":["13.0"],"oldval":["13.0"],"vue3中的模板转换":["14.0"],"做了更多的优化操作":["14.0"],"vue2":["14.0"],"仅仅是标记了静态节点而已":["14.0"],"更新的时候采用虚拟":["15.0"],"dom":["15.0"],"的方式进行":["15.0"],"diff":["15.0"],"算法更新":["15.0"],"实例生命周期":["15.0"],"优先级高于":["17.0"],"所有的子实例也会被销毁":["18.1"],"该钩子在服务器端渲染期间不被调用":["18.1"],"keep":["18.1"],"alive":["18.1"],"activated":["18.1"],"deactivated":["18.1"],"中新增了组合式":["18.2"],"api":["18.2"],"生命周期钩子":["18.2"],"但是不存在":["18.2"],"onbeforecreate":["18.2"],"oncreated":["18.2"],"钩子":["18.2"],"双指针的方式进行比较":["19.1"],"优化":["19.2"],"20240314160716656":["19.2"],"20240314160803893":["19.2"],"元素来匹配数据项的顺序":["20.1"],"而是就地更新每个元素":["20.1"],"并且确保他们在每个索引位置正确渲染":["20.1"],"20240314161812712":["20.2"],"了":["21.1","24.0"],"上实现":["21.2"],"push":["21.3","62.6"],"缓存插件":["21.3"],"point":["22.1"],"jw":["23.0"],"所以在性能上没有可优势":["24.0"],"parsefloat":["25.0"],"tofixed":["25.0"],"这可以用于优化更新性能":["26.1"],"item":["26.2"],"key":["26.2"],"提取公共逻辑非常方便":["27.1"],"但是不怎么常用":["27.3"],"s":["28.3"],"普通插槽渲染在父级":["28.3"],"作用域插槽在组件内部渲染":["28.3"],"的语法糖":["29.1"],"b":["29.3"],"c":["29.3"],"vue3":["30.0"],"语法被移除":["30.0"],"属性":["32.0"],"将自己也注册到组件中":["32.0"],"出来":["33.0"],"sync":["33.0"],"修饰符":["33.0"],"如果提供了超时时间并且组件加载也超时了":["34.2"],"则使用加载失败时使用的组件":["34.2"],"timeout":["34.2"],"渲染加载完毕后的组件":["34.3"],"无需重新生成节点":["36.1"],"缓存组件":["36.3"],"keytocache":["36.3"],"ts":["36.3","47.4"],"expect":["36.3"],"error":["36.3","54.3"],"can":["36.3"],"data":["36.3"],"be":["36.3"],"keepalive":["36.3"],"在firstcomponent的vnode中增加keep":["36.3"],"alive属性":["36.3"],"指令与元素解绑时调用":["37.2"],"unbind":["37.3"],"removeeventlistener":["37.3"],"mergeoptions":["38.0"],"外观模式":["38.0"],"提供了统一的接口":["38.0"],"用来访问子系统中的一群接口":["38.0"],"once":["39.0"],"分页":["39.0"],"虚拟滚动":["39.0"],"时间分片等策略":["39.0"],"提速":["40.0"],"终极的手段":["40.0"],"ssr":["40.0"],"对首屏做服务端渲染":["40.0"],"for":["41.0","62.5"],"frontend":["41.0"],"层解决跨域问题":["41.0"],"在页面切换时通过导航守卫可以取消上一个页面中正在发送的请求":["42.0"],"当用户登录后端会返回对应的按钮权限":["43.1"],"在按钮上使用此指令":["43.1"],"指令内部会判断用户是否有此按钮权限":["43.1"],"如果没有则会移除按钮":["43.1"],"守卫中传给":["44.0"],"next":["44.0"],"的回调函数":["44.0"],"创建好的组件实例会作为回调函数的参数传入":["44.0"],"cli":["45.0"],"webpack":["45.0"],"fallback":["45.0"],"问题":["46.0"],"支持并不友好":["47.4"],"sessionstorage":["49.0","60.6"],"promise":["50.0"],"而":["50.0","60.7","63.11","73.69"],"则没进行包装":["50.0"],"简单的组件仍然可以采用":["52.0"],"进行编写":["52.0"],"在复杂的逻辑中有着明显的优势":["52.0"],"优化动态节点":["53.0"],"blocktree":["53.0"],"进行靶向更新等":["53.0"],"相比":["53.0"],"来说":["53.0"],"新增了很多新的特性":["53.0"],"则会阻断传播":["54.1"],"收集到错误后":["54.3"],"提交到前端监控系统中":["54.3"],"这样我们可以分析前端代码的异常信息":["54.3"],"进行非props比较":["55.1"],"ref比较":["55.1"],"dynamic":["55.1"],"slots":["55.1","77.13"],"动态插槽":["55.1"],"dev":["55.1"],"root":["55.1"],"hoisted":["55.1"],"表示静态节点":["55.1"],"内容变化":["55.1"],"不比较儿子":["55.1"],"bail":["55.1"],"表示diff算法应该结束":["55.1"],"标签":["55.2"],"解决方案":["55.2"],"就是将不稳定的结构也作为":["55.2"],"来进行处理":["55.2"],"父节点除了会收集动态节点之外":["55.4"],"也会收集子":["55.4"],"更新时因":["55.4"],"值不同会进行删除重新创建":["55.4"],"前后元素不一致是无法做到靶向更新的":["55.5"],"因为":["55.5"],"dynamicchildren":["55.5"],"中还有可能有其他层级的元素":["55.5"],"同时这里还生成了一个":["55.5"],"因为前后元素个数不一致":["55.5"],"所以称之为":["55.5"],"不稳定序列":["55.5"],"浏览器对象模型":["56.1"],"bom":["56.1"],"提供和浏览器交互的方法和接口":["56.1"],"domlevel4":["56.5"],"新增的内容包括替代":["56.5"],"mutation":["56.5"],"events":["56.5"],"的":["56.5","56.6","60.8","73.40","87.5"],"observes":["56.5"],"xmlhttprequest":["56.6"],"ie":["56.6","67.40"],"activexobject":["56.6"],"export":["57.1"],"关键字":["57.1"],"使用了":["57.1"],"属性的":["57.1"],"元素不应该再在":["57.1"],"标签中包含其他":["57.1"],"代码":["57.1"],"如果两者都提供的话":["57.1"],"则浏览器只会下载并执行脚本文件":["57.1"],"从而忽略行内代码":["57.1"],"icon":["59.0","61.4","73.80"],"你好":["60.4","73.22"],"在这里进行自定义配置":["60.4"],"警告":["60.6","60.9","60.10"],"存储数据必须是同步的":["60.6"],"被持久化":["60.7"],"不会被持久化":["60.7"],"处理序列化":["60.8"],"反序列化":["60.8"],"并进行压缩":["60.8"],"请谨慎使用":["60.9","60.10"],"意外可能会出现":["60.9","60.10"],"输出":["60.11","67.9"],"cwd":["61.2"],"assets":["61.2"],"指定symbolid格式":["61.2"],"symbolid":["61.2"],"name":["61.2"],"共享":["62.1"],"的概念":["62.1"],"l23":["62.2"],"typeof直接返回":["62.2"],"tostring返回":["62.2"],"首字母大写":["62.2"],"null是object":["62.2"],"需tostring来判断":["62.2"],"typeofi值接返回":["62.2"],"typeof能判断":["62.2"],"因此首字母小写":["62.2"],"比较特殊字符串和biginti相加":["62.3"],"biglnt转换为字符串":["62.3"],"i":["62.3","73.43"],"nan规则2":["62.3"],"undefined转换数字相加nan":["62.3"],"1规则2":["62.3"],"null转换为0":["62.3"],"2规则2":["62.3"],"true转换为1":["62.3"],"二者相加为2":["62.3"],"错误不能把biglnt和number类型直接混合相加":["62.3"],"规则3":["62.3"],"字符串拼接":["62.3"],"的转换规则":["62.3"],"如果部署了":["62.3"],"方法优先调用再返回":["62.3"],"调用":["62.3"],"如果转换为基础类型则返回":["62.3"],"如果都没有返回基础类型会报错":["62.3"],"array":["62.5"],"isarray":["62.5"],"prop":["62.5"],"hasownproperty":["62.5"],"else":["62.5","67.52"],"innumerable":["62.6"],"enumerable":["62.6"],"value":["62.6"],"不可枚举的属性":["62.6"],"loop":["62.6"],"设置":["62.6"],"成循环引用的属性":["62.6"],"20240116111129673":["62.6"],"七":["62.8"],"es6的extends关键字实现逻辑":["62.8"],"使用关键词很容易直接实现javascript的继承":["62.8"],"但是如果想深入了解extends语法糖是怎么实现的":["62.8"],"就得深入研究extends的底层逻辑":["62.8"],"class":["62.8","63.7"],"person":["62.8"],"原型方法":["62.8"],"即person":["62.8"],"下面可以简写为getname":["62.8"],"gamer":["62.8"],"extends":["62.8"],"子类中存在构造函数":["62.8"],"则需要再使用":["62.8"],"之前首先调用super":["62.8"],"super":["62.8"],"const":["62.8"],"asuna":["62.8"],"成功访问到父类的方法":["62.8"],"单个数组":["62.9"],"方法功能":["62.9"],"函数调用改变":["62.9"],"返回结果":["62.9"],"直接执行的":["62.9"],"直接执行":["62.9"],"返回待执行的函数":["62.9"],"底层实现":["62.9"],"通过eval":["62.9"],"间接调用":["62.9"],"就具备了实现能在外部访问某个函数内部变量的功能":["62.11"],"和当前函数的作用域":["62.13"],"因此可以输出全局的变量":["62.13"],"replacer":["62.14"],"第三个参数用来控制结果字符串里面的间距":["62.14"],"repeat":["62.16"],"必须指定返回值":["62.16"],"否则返回":["62.16"],"20240117112411958":["62.16"],"find":["62.18"],"findindex":["62.18"],"keys":["62.18"],"values":["62.18"],"str":["62.19"],"stringify":["62.19"],"replace":["62.19"],"g":["62.19"],"parse":["62.19"],"slice":["62.23"],"排序算法":["62.23"],"时间复杂度":["62.23"],"空间复杂度":["62.23"],"稳定性":["62.23"],"n":["62.23"],"平方":["62.23"],"稳定":["62.23"],"logn":["62.23"],"不稳定":["62.23"],"每隔":["62.24"],"个元素挑出一个元素放到一个新数组中":["62.24"],"然后对它排序":["62.24"],"找到中间位置的数依次作为中位数":["62.24"],"就是这个盒子的高度":["63.2"],"border":["63.3"],"margin":["63.3"],"padding":["63.3"],"0000":["63.4"],"后者覆盖前者":["63.4"],"top":["63.6"],"transform":["63.6"],"translate":["63.6"],"asp":["63.7"],"position":["63.8"],"的值":["63.8","73.82"],"absolute":["63.8"],"fixed":["63.8"],"生效":["63.11"],"四个都可以生效":["63.11"],"重置样式库":["63.13"],"都会造成维护问题":["63.14"],"样式改变":["63.15"],"换皮肤":["63.15"],"会继承父元素的":["63.16"],"设置的元素的后代元素不会继承不透明属性":["63.16"],"样式布局上也有作用":["63.17"],"img":["63.21","73.6","73.9","73.12","73.52","73.60","73.62","73.105","73.114","87.1"],"正好是":["63.22"],"iphone6":["63.22"],"的尺寸":["63.22"],"我们要把":["63.22"],"的尺寸作为基准点":["63.22"],"把某元素转化成块元素":["65.1"],"独占一行":["65.1"],"后加载":["65.2"],"表示标签内字符重要":["65.3"],"更多地用在字体图标":["65.3"],"更多地用在术语":["65.3"],"生物":["65.3"],"医药":["65.3"],"上":["65.3"],"属性来描述这张图是什么内容或者关键词":["65.4"],"具有更新的体积":["65.5"],"兼容性不是特别好":["65.5"],"去处理":["65.6"],"谁先加载完谁先行":["67.1"],"的原始值":["67.3"],"转为数值时为":["67.3"],"还比较类型":["67.4"],"参数":["67.6"],"变量提升":["67.6"],"111b":["67.9"],"构造函数原型中找":["67.11"],"对象上一层原型中找":["67.11"],"object":["67.14"],"输出结果":["67.18"],"返回的是一个新的数组":["67.27"],"该方法会改变原数组":["67.28"],"helloworld":["67.34"],"最多的字符是a":["67.35"],"次数是16":["67.35"],"alert":["67.39"],"内存泄漏会出现在低版本的":["67.40"],"其他浏览器不会出现这个问题":["67.40"],"原型链的最顶端是":["67.41"],"有多个参数需要挨个写":["67.49"],"行":["67.51"],"不能超过":["67.53"],"5m":["67.53"],"根据不同的浏览器存储的大小是不同的":["67.53"],"px":["67.54"],"声明的变量有自身的作用域":["67.55"],"匹配到第一个就返回":["67.66"],"如果当前组件没有依赖关系":["69.2"],"那么放在那个生命周期中请求都是可以的":["69.2"],"拿不到":["69.3"],"nexttick":["69.4"],"mounted":["69.6","69.8"],"初始化的时候从上一次的历史开始播放":["69.9"],"子组件可以直接修改父组件的数据":["69.11"],"依赖注入":["69.11"],"父组件":["69.11"],"md":["71.0"],"vitepress":["72.0"],"等待几十秒后":["73.2"],"finish":["73.2"],"完成安装":["73.2"],"settings":["73.3"],"在appearance":["73.3"],"behavior":["73.3"],"appearance的":["73.3"],"theme":["73.3"],"中可选择主题":["73.3"],"项目结构相对复杂":["73.4"],"先简单了解即可":["73.4"],"随之后序学习的深入再逐步为大家介绍":["73.4"],"回到ide":["73.7"],"在右上角的设备列表中选择刚刚创建的模拟器":["73.7"],"默认已经选中":["73.7"],"点击运行按钮":["73.7"],"查看模拟器":["73.7"],"按照要求完成注册":["73.8"],"登录即可":["73.8"],"登录成功后":["73.8"],"再次点击运行按钮":["73.8"],"即可将应用运行到真机":["73.8"],"鸿蒙应用开发语言":["73.8"],"之后创建typescript文件":["73.13"],"点击new":["73.13"],"file":["73.13"],"注意":["73.13","73.82"],"文件的后缀为":["73.13"],"之后就可以编写typescript代码并运行了":["73.13"],"hello":["73.22","73.30","73.43"],"true":["73.28","73.65"],"num":["73.32"],"张三":["73.34"],"李四":["73.34"],"等等":["73.34"],"years":["73.36"],"old":["73.36"],"introduce":["73.37"],"调用父类构造器对继承自父类的属性进行初始化":["73.39"],"在子类中可以使用":["73.39"],"关键字访问继承自父类的属性和方法":["73.39"],"关键字访问父类定义的方法":["73.39"],"修饰的属性或方法是公有的":["73.40"],"可以在任何地方被访问到":["73.40"],"默认所有的属性和方法都是":["73.40"],"am":["73.43"],"a":["73.43"],"这样一来":["73.45"],"之后创建的订单就可以使用":["73.45"],"这个支付方式了":["73.45"],"let":["73.45"],"new":["73.45"],"等概念都可以使用枚举类型定义":["73.48"],"向左移动":["73.49"],"向右移动":["73.49"],"red":["73.50"],"0xff0000":["73.50"],"green":["73.50","73.98"],"0x00ff00":["73.50"],"0x0000ff":["73.50"],"fontsize":["73.50"],"small":["73.50"],"medium":["73.50"],"large":["73.50"],"extralarge":["73.50"],"导出":["73.52"],"moduleb":["73.55"],"说明":["73.58"],"用于声明该变量为状态变量":["73.58"],"justifycontent":["73.65"],"flexalign":["73.65"],"center":["73.65"],"除去每个组件的专有事件":["73.67"],"还有各组件都支持的通用事件":["73.67"],"通用事件也可通过":["73.67"],"我们前边所编写的每个页面就相当于是组件树的根节点":["73.69"],"装饰器的作用就是标识该组件为组件树的根节点":["73.69"],"也就是一个页面的入口组件":["73.69"],"light":["73.70","73.107"],"playandpausepage":["73.73"],"fruitpage":["73.76"],"也就是所有元素的key都发生了变化":["73.77"],"因此ui界面更新时需要为每个元素都重新创建组件对象":["73.77"],"即便原有的元素没有发生变化也无法复用之前的组件":["73.77"],"这样一来就导致了性能浪费":["73.77"],"此时我们就可以考虑提供第三个参数":["73.77"],"如下":["73.77"],"常用组件":["73.77"],"须使用":["73.80"],"的返回值也是resource类型":["73.80"],"因此其也可以直接作为":["73.80"],"如":["73.80"],"pixelmap指的是图片的":["73.80"],"像素位图":["73.80"],"其通常是一个二维数组":["73.80"],"数组中的每个元素对应着图片中的一个像素":["73.80"],"其包含了该像素的颜色等信息":["73.80"],"像素位图主要用于图片编辑的场景":["73.80"],"type":["73.82"],"无需指定具体版本":["73.82"],"系统会自动根据所处环境选择相应版本":["73.82"],"例如上述的":["73.82"],"可通过":["73.82"],"引用":["73.82"],"的值可通过":["73.82"],"attribute":["73.83","73.84","73.89","73.90","73.91","73.123"],"solution":["73.83","73.84","73.87","73.89","73.90","73.91","73.92","73.93","73.96","73.107"],"imageobjectfit":["73.83"],"component":["73.87","73.90","73.96","73.103","73.121","73.123","73.128"],"parameter":["73.87","73.96","73.103","73.110","73.121"],"textparameterpage":["73.87"],"fontsizepage":["73.89"],"pages":["73.90","73.96","73.103","73.121","73.123","73.128"],"text":["73.90","73.91"],"fontweightpage":["73.90"],"textalignpage":["73.92"],"textoverflowpage":["73.93"],"src":["73.96"],"main":["73.96"],"ets":["73.96","73.128"],"buttonparameter":["73.96"],"buttonattributepage":["73.99"],"event":["73.100","73.107"],"buttoneventpage":["73.100"],"toggleparameter":["73.103"],"toggleattributepage":["73.106"],"textinputparameter":["73.110"],"纯数字输入模式":["73.112"],"textinputattribute":["73.115"],"为最新内容":["73.117"],"input":["73.118"],"textinputevent":["73.118"],"progressparameter":["73.121"],"progress":["73.123"],"progressstyle":["73.123"],"progresscolor":["73.124"],"dialog":["73.128"],"toastpage":["73.128"],"alertdialogpage":["73.130"],"actionsheetpage":["73.133"],"timepickerdialog":["73.136"],"时间滑动选择器弹窗":["73.136"],"customdialogpage":["73.139"],"转化成全局作用域":["76.7"],"ontrack":["79.14"],"ontrigger":["79.14"],"调试侦听器的依赖":["79.14"],"参考调试侦听器":["79.14"],"模板语法都会被保留并按原样渲染":["80.6"],"最常见的用例就是显示原始双大括号标签及内容":["80.6"],"onclick2":["81.4"],"changeage":["87.3"],"修改年龄":["87.3"],"showtel":["87.3"],"查看联系方式":["87.3"],"不是响应式的":["87.4"],"是响应式的":["87.4"],"深层次":["87.5"],"层级不深":["87.7"],"都可以":["87.7"],"且层级较深":["87.7"],"推荐使用":["87.7"],"changegender":["87.8"],"修改性别":["87.8"]}]'},e={"0.0":{t:"# 语言基础",p:"",l:"InterviewJS/js.html",a:"语言基础"},"0.1":{t:"语法",p:"",l:"InterviewJS/js.html#语法",a:"语法"},"0.2":{t:"区分大小写",p:"ECMAScript 中一切都是区分大小写的。无论是变量、函数名还是操作符，都区分大小写。换句话说。变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一 ...",l:"InterviewJS/js.html#区分大小写",a:"区分大小写"},"0.3":{t:"标识符",p:`所谓标识符，就是变量、函数、属性或者函数参数的名称。标识符可以由一个或多个下列字符组成：
第一个字符必须是一个字母、下划线(_)或美元符号($)；
剩下的其他字符可以是字母、下划线、美元符号或数字；
 ...`,l:"InterviewJS/js.html#标识符",a:"标识符"},"0.4":{t:"注释",p:`ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。
单行注释以两个斜杠字符(//)开头，如
// 单行注释

块注释以一个斜杠和一个星号(/*)开头，以它们的反向组合(*/)结尾。 ...`,l:"InterviewJS/js.html#注释",a:"注释"},"0.5":{t:"严格模式",p:"ECMAScript 5 新增了严格模式的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。 ...",l:"InterviewJS/js.html#严格模式",a:"严格模式"},"0.6":{t:"关键字和保留字",p:"",l:"InterviewJS/js.html#关键字和保留字",a:"关键字和保留字"},"0.7":{t:"关键字",p:`break 	do		in		typeof		case		else		instanceof
var		catch		export		new		void		class		extends
return		 ...`,l:"InterviewJS/js.html#关键字",a:"关键字"},"0.8":{t:"保留字",p:`ECMA-262 描述了一组保留的关键字，这些关键字有特殊用途，比如表示控制语句的开始和结束， 或者执行特定的操作。按照规定，保留的关键字不能用作标识符或属性名。
`,l:"InterviewJS/js.html#保留字",a:"保留字"},"0.9":{t:"始终保留",p:`enum

`,l:"InterviewJS/js.html#始终保留",a:"始终保留"},"0.10":{t:"严格模式下保留",p:`implements		interface		let		package		protected
private		public		static

`,l:"InterviewJS/js.html#严格模式下保留",a:"严格模式下保留"},"0.11":{t:"模块代码中保留",p:`await

`,l:"InterviewJS/js.html#模块代码中保留",a:"模块代码中保留"},"0.12":{t:"变量",p:"ECMAScript 中有 3 个关键字可以声明变量：var、const 和let。其中var在 ECMAScript 的所有版本中都可以使用，而const和let只能在 ECMAScript 6 及 ...",l:"InterviewJS/js.html#变量",a:"变量"},"0.13":{t:"var 关键字",p:`要定义变量，可以使用 var 操作符（注意var是一个关键字），后跟变量名（即标识符）
var message
var message = 'hi'
message = 'hi' // 合法，但不推荐 ...`,l:"InterviewJS/js.html#var-关键字",a:"var-关键字"},"0.14":{t:"var 声明作用域",p:`使用var操作符定义的变量会成为包含它的函数的局部变量。比如，使用var在一个函数内部定义了一个变量，就意味着该变量将在函数退出时被销毁
function test() {
  var message ...`,l:"InterviewJS/js.html#var-声明作用域",a:"var-声明作用域"},"0.15":{t:"var 声明提升",p:`使用var时，下面的代码不会报错。这是因为使用了这个关键字声明的变量会自动提升到函数的作用域顶部：
function foo() {
  console.log(age)
  var age = 26 ...`,l:"InterviewJS/js.html#var-声明提升",a:"var-声明提升"},"0.16":{t:"let 声明",p:`let和var的作用差不多，但是有着非常重要的区别。最明显的区别就是，let声明的范围是块作用域，而var声明的范围是函数作用域。
if (true) {
  var name = 'Matt'
   ...`,l:"InterviewJS/js.html#let-声明",a:"let-声明"},"0.17":{t:"1. 暂时性死区",p:`let与var的另一个重要区别，就是let声明的变量不会在作用域中被提升。
// name 会被提升
console.log(name) // undefined
var name = 'Matt'
 ...`,l:"InterviewJS/js.html#_1-暂时性死区",a:"_1-暂时性死区"},"0.18":{t:"2. 全局声明",p:`与var关键字不同，使用 let在全局作用域中声明的变量不会成为 window 对象的属性(var 声明的变量则会)
var name = 'Matt'
console.log(window.name ...`,l:"InterviewJS/js.html#_2-全局声明",a:"_2-全局声明"},"0.19":{t:"3. 条件声明",p:`因为 let是块级作用域，所以不可能检查前面是否声明过同名变量，同时也就不可能在没有声明的情况下去声明它，因此不能依赖条件声明模式
`,l:"InterviewJS/js.html#_3-条件声明",a:"_3-条件声明"},"0.20":{t:"for 循环中的 let",p:`在let出现之前，for循环定义的迭代变量会渗透到循环体外部。改用let之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部
for (var i = 0; i &lt; 5; ++ ...`,l:"InterviewJS/js.html#for-循环中的-let",a:"for-循环中的-let"},"0.21":{t:"const 声明",p:`const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误
const age = 26
age = 36 // Typ ...`,l:"InterviewJS/js.html#const-声明",a:"const-声明"},"0.22":{t:"声明风格及最佳实践",p:`
不使用 var
const 优先，let 次之

`,l:"InterviewJS/js.html#声明风格及最佳实践",a:"声明风格及最佳实践"},"0.23":{t:"数据类型",p:`ECMAScript 有两大数据类型
基本数据类型(原始数据类型)：Undefined、Null、Boolean、Number、String、Symbol
复杂数据类型：Object
`,l:"InterviewJS/js.html#数据类型",a:"数据类型"},"0.24":{t:"typeof 操作符",p:`因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof 操作符就是为此而生的。对一个值使用 typeof 会返回下列字符串之一：

&quot;unde ...`,l:"InterviewJS/js.html#typeof-操作符",a:"typeof-操作符"},"0.25":{t:"Undefined 类型",p:`Undefined 类型只有一个值，就是特殊值undefined。当 var或let声明了变量但没有初始化时，就相当于给变量赋予了undefined值
注意：包含 undefined值的变量跟未定义变 ...`,l:"InterviewJS/js.html#undefined-类型",a:"undefined-类型"},"0.26":{t:"Null 类型",p:`Null类型同样只有一个值，即特殊值null。逻辑上讲，null值表示一个空对象指针，这也是给 typeof传一个null会返回&quot;object&quot;的原因。
在定义一个将来要保存对象值 ...`,l:"InterviewJS/js.html#null-类型",a:"null-类型"},"0.27":{t:"Boolean 类型",p:`Boolean类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true和false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。
注意：布尔值字面量 ...`,l:"InterviewJS/js.html#boolean-类型",a:"boolean-类型"},"0.28":{t:"布尔值和不同类型之间的转换规则",p:`


数据类型
转换为 true 的值
转换为 false 的值




Boolean
true
false


String
非空字符串
&quot;&quot;(空字符串)


Number
非 ...`,l:"InterviewJS/js.html#布尔值和不同类型之间的转换规则",a:"布尔值和不同类型之间的转换规则"},"0.29":{t:"Number 类型",p:`Number类型使用 IEEE 754格式表示正式和浮点数(在某些语言中也叫双精度值)、不同的数值类型相应地也有不同的数值字面量格式。
`,l:"InterviewJS/js.html#number-类型",a:"number-类型"},"0.30":{t:"数值字面量格式",p:`十进制： 直接写出来即可
八进制： 对于八进制字面量，第一个数字必须是零(0)，然后是相应的八进制数字(0-7)。如果字面量中包含的数字超出了应有的范围，就回忽略前缀的 0，后面的数字被当做十进制
十 ...`,l:"InterviewJS/js.html#数值字面量格式",a:"数值字面量格式"},"0.31":{t:"浮点值",p:`要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。
let floatNumber1 = 1.1
let floatNumber2 = 0 ...`,l:"InterviewJS/js.html#浮点值",a:"浮点值"},"0.32":{t:"值的范围",p:"ECMAScript可以保存的最小数值保存在Number.MIN_VALUE中，这个值多数浏览器是5e-324，可以保存的最小数值保存在Number.MAX_VALUE中，这个值多数浏览器是1.797 ...",l:"InterviewJS/js.html#值的范围",a:"值的范围"},"0.33":{t:"NaN",p:"有一个特殊的值叫&quot;NaN&quot;，意思是&quot;不是数值&quot;(Not a Number)，用于表示本来要返回数值的操作失败了(而不是抛出错误)。在 ECMAScript 中， ...",l:"InterviewJS/js.html#nan",a:"nan"},"0.34":{t:"数值转换",p:`有 3 个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转化为数值。
Numb ...`,l:"InterviewJS/js.html#数值转换",a:"数值转换"},"0.35":{t:"String 类型",p:"String(字符串)数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号(&quot;)、单引号(')或反引号(`)标示。必须成对出现，否则会导致语法错误。\n",l:"InterviewJS/js.html#string-类型",a:"string-类型"},"0.36":{t:"字符字面量",p:`字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符



字面量
含义




\\n
换行


\\t
制表


\\b
退格


\\r
回车


\\f
换页


\\\\
反斜杠()

 ...`,l:"InterviewJS/js.html#字符字面量",a:"字符字面量"},"0.37":{t:"字符串的特点",p:`字符串是不可变的，意思就是一旦创建，他们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量。
`,l:"InterviewJS/js.html#字符串的特点",a:"字符串的特点"},"0.38":{t:"转换为字符串",p:`有两种方式将一个值转换为字符串。一个是toString()，一个是直接在后面加空串&quot;&quot;
数值调用toString()时，可以传入一个参数作为底数，默认情况下返回的是十进制
`,l:"InterviewJS/js.html#转换为字符串",a:"转换为字符串"},"0.39":{t:"模板字面量",p:`ECMAScript 6新增了模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以夸行定义字符串。
let str = \`first line
second line\`
 ...`,l:"InterviewJS/js.html#模板字面量",a:"模板字面量"},"0.40":{t:"字符串插值",p:"模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个 值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的 是字符串 ...",l:"InterviewJS/js.html#字符串插值",a:"字符串插值"},"0.41":{t:"模板字面量标签函数",p:`模板字面量也支持定义标签函数(tag function)，而通过标签函数可以自定义插值行为。标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。
标签函数本身是一个常规函数，通过前缀到模板 ...`,l:"InterviewJS/js.html#模板字面量标签函数",a:"模板字面量标签函数"},"0.42":{t:"原始字符串",p:`使用模板字面量也可以直接获取原始的模板字面量内容(如换行符或 Unicode 字符)，而不是被转 换后的字符表示。为此，可以使用默认的 String.raw 标签函数:
`,l:"InterviewJS/js.html#原始字符串",a:"原始字符串"},"0.43":{t:"Symbol 类型",p:`Symbol(符号)是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的风险。
`,l:"InterviewJS/js.html#symbol-类型",a:"symbol-类型"},"0.44":{t:"符号的基本使用",p:`符号需要使用Symbol()函数初始化，因为符号本身是基本类型，所以typeof操作符对符号返回symbol
let symbol = Symbol()

注意： Symbol()函数不能与 new  ...`,l:"InterviewJS/js.html#符号的基本使用",a:"符号的基本使用"},"0.45":{t:"使用全局符号注册表",p:`如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。
Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全 ...`,l:"InterviewJS/js.html#使用全局符号注册表",a:"使用全局符号注册表"},"0.46":{t:"使用符号作为属性",p:"凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和 Object.defineProperty()/Object.defineProperties()定义的属性。对象字 ...",l:"InterviewJS/js.html#使用符号作为属性",a:"使用符号作为属性"},"0.47":{t:"常用内置符号",p:"ECMAScript 6 也引入了一批常用内置符号(well-known symbol)，用于暴露语言内部行为，开发者 可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串 ...",l:"InterviewJS/js.html#常用内置符号",a:"常用内置符号"},"0.48":{t:"Symbol.asyncIterator",p:"",l:"InterviewJS/js.html#symbol-asynciterator",a:"symbol-asynciterator"},"0.49":{t:"Symbol.hasInstance",p:"",l:"InterviewJS/js.html#symbol-hasinstance",a:"symbol-hasinstance"},"0.50":{t:"Symbol.isConcatSpreadable",p:"",l:"InterviewJS/js.html#symbol-isconcatspreadable",a:"symbol-isconcatspreadable"},"0.51":{t:"Symbol.iterator",p:"",l:"InterviewJS/js.html#symbol-iterator",a:"symbol-iterator"},"0.52":{t:"Symbol.match",p:"",l:"InterviewJS/js.html#symbol-match",a:"symbol-match"},"0.53":{t:"Symbol.replace",p:"",l:"InterviewJS/js.html#symbol-replace",a:"symbol-replace"},"0.54":{t:"Symbol.search",p:"",l:"InterviewJS/js.html#symbol-search",a:"symbol-search"},"0.55":{t:"Symbol.species",p:"",l:"InterviewJS/js.html#symbol-species",a:"symbol-species"},"0.56":{t:"Symbol.split",p:"",l:"InterviewJS/js.html#symbol-split",a:"symbol-split"},"0.57":{t:"Symbol.toPrimitive",p:"",l:"InterviewJS/js.html#symbol-toprimitive",a:"symbol-toprimitive"},"0.58":{t:"Symbol.toStringTag",p:"",l:"InterviewJS/js.html#symbol-tostringtag",a:"symbol-tostringtag"},"0.59":{t:"Symbol.unscopables",p:`80 页
`,l:"InterviewJS/js.html#symbol-unscopables",a:"symbol-unscopables"},"0.60":{t:"Object 类型",p:`每个 Object 实例都有如下属性和方法：

constructor：用于创建当前对象的函数。
hasOwnProperty(propertyName)：用于判断当前对象实例(不是原型)上是否存在给 ...`,l:"InterviewJS/js.html#object-类型",a:"object-类型"},"0.61":{t:"操作符",p:"",l:"InterviewJS/js.html#操作符",a:"操作符"},"0.62":{t:"一元操作符",p:`只操作一个值的操作符叫一元操作符(unary operator)。一元操作符是 ECMAScript 中最简单的操作符。
`,l:"InterviewJS/js.html#一元操作符",a:"一元操作符"},"0.63":{t:"递增/递减操作符",p:`递增和递减操作符有两个版本：前缀版和后缀版。
两个版本的区别是后缀版的递增和递减在语句被求值后才发生。
这 2 对操作符可以用作于任何值，意思就是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。 ...`,l:"InterviewJS/js.html#递增-递减操作符",a:"递增-递减操作符"},"0.64":{t:"一元加和减",p:`一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号(+)表示，放在变量前头，对数值没有任何影响。
一元减由一个减号(-)表示，放在变 ...`,l:"InterviewJS/js.html#一元加和减",a:"一元加和减"},"0.65":{t:"位操作符",p:`正值以真正的二进制格式存储，即 31 位中的每一位都代表 2 的幂。第一位(称为第 0 位)表示 20，第二位表示 21，依此类推。
负值以一种称为二补数(或补码)的二进制编码存储。一个数值的二补数通 ...`,l:"InterviewJS/js.html#位操作符",a:"位操作符"},"0.66":{t:"按位非",p:`按位非操作符用波浪符(~)表示，它的作用是返回数值的一补数。
let num1 = 25 // 二进制00000000000000000000000000011001
let num2 = ~num1 ...`,l:"InterviewJS/js.html#按位非",a:"按位非"},"0.67":{t:"按位与",p:`按位与操作符用和号(&amp;)表示，有两个操作数。本质上，按位与就是将两个数的每一个位对齐， 然后基于真值表中的规则，对每一位执行相应的与操作。



第一个数值的位
第二个数值的位
结果




 ...`,l:"InterviewJS/js.html#按位与",a:"按位与"},"0.68":{t:"按位或",p:`按位或操作符用管道符(|)表示，同样有两个操作数。按位或遵循如下真值表:



第一个数值的位
第二个数值的位
结果




1
1
1


1
0



0
1
1


0
0
0



按位异或
 ...`,l:"InterviewJS/js.html#按位或",a:"按位或"},"0.69":{t:"左移",p:`左移操作符用两个小于号(&lt;&lt;)表示，会按照指定的位数将数值的所有位向左移动。
`,l:"InterviewJS/js.html#左移",a:"左移"},"0.70":{t:"有符号右移",p:`有符号右移由两个大于号(&gt;&gt;)表示，会将数值的所有 32 位都向右移，同时保留符号(正或负)。 有符号右移实际上是左移的逆运算。
`,l:"InterviewJS/js.html#有符号右移",a:"有符号右移"},"0.71":{t:"无符号右移",p:`无符号右移用 3 个大于号表示(&gt;&gt;&gt;)，会将数值的所有 32 位都向右移。对于正数，无符号右移与 有符号右移结果相同。
对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会 ...`,l:"InterviewJS/js.html#无符号右移",a:"无符号右移"},"0.72":{t:"布尔操作符",p:"",l:"InterviewJS/js.html#布尔操作符",a:"布尔操作符"},"0.73":{t:"逻辑非",p:`逻辑非操作符由一个叹号(!)表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布 尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。
逻辑非操作 ...`,l:"InterviewJS/js.html#逻辑非",a:"逻辑非"},"0.74":{t:"逻辑与",p:`逻辑与操作符由两个和号(&amp;&amp;)表示，应用到两个值。
逻辑与操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
 ...`,l:"InterviewJS/js.html#逻辑与",a:"逻辑与"},"0.75":{t:"逻辑或",p:`逻辑或操作符由两个管道符(||)表示
逻辑或操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
true


false
tr ...`,l:"InterviewJS/js.html#逻辑或",a:"逻辑或"},"0.76":{t:"乘性操作符",p:`ECMAScript 定义了 3 个乘性操作符:乘法、除法和取模
`,l:"InterviewJS/js.html#乘性操作符",a:"乘性操作符"},"0.77":{t:"乘法操作符",p:`乘法操作符由一个星号(*)表示，可以用于计算两个数值的乘积。
特殊值处理
1. 如果操作数都是数值，则执行常规的乘法运算，即两个正值相乘是正值，两个负值相乘也是正值，正负符号不同的值相乘得到负值。如果 ...`,l:"InterviewJS/js.html#乘法操作符",a:"乘法操作符"},"0.78":{t:"除法运算符",p:`除法操作符由一个斜杠(/)表示，可以用于计算第一个操作数除以第二个操作数的商
特殊值处理
1. 如果操作数都是数值，则执行常规的除法运算，即两个正值相除是正值，两个负值相除也是正值，符号不同的值相除得 ...`,l:"InterviewJS/js.html#除法运算符",a:"除法运算符"},"0.79":{t:"取模运算符",p:`取模(余数)操作符由一个百分比符号(%)表示
特殊值处理

如果操作数是数值，则执行常规除法运算，返回余数。
如果被除数是无限值，除数是有限值，则返回 NaN。
如果被除数是有限值，除数是 0，则返回 ...`,l:"InterviewJS/js.html#取模运算符",a:"取模运算符"},"0.80":{t:"指数操作符",p:`ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**
不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作
let square ...`,l:"InterviewJS/js.html#指数操作符",a:"指数操作符"},"0.81":{t:"加性操作符",p:`加性操作符，即加法和减法操作符
`,l:"InterviewJS/js.html#加性操作符",a:"加性操作符"},"0.82":{t:"加法操作符",p:`加法操作符(+)用于求两个数的和
两个操作数都是数值执行规则

如果有任一操作数是 NaN，则返回 NaN;
如果是 Infinity 加 Infinity，则返回 Infinity;
如果是-Inf ...`,l:"InterviewJS/js.html#加法操作符",a:"加法操作符"},"0.83":{t:"减法操作符",p:`减法操作符(-)也是使用很频繁的一种操作符。
计算规则

如果两个操作数都是数值，则执行数学减法运算并返回结果。
如果有任一操作数是 NaN，则返回 NaN。
如果是 Infinity 减 Infin ...`,l:"InterviewJS/js.html#减法操作符",a:"减法操作符"},"0.84":{t:"关系操作符",p:`关系操作符执行比较两个值的操作，包括小于(&lt;)、大于(&gt;)、小于等于(&lt;=)和大于等于(&gt;=)
执行规则

如果操作数都是数值，则执行数值比较。
如果操作数都是字符串，则逐个比 ...`,l:"InterviewJS/js.html#关系操作符",a:"关系操作符"},"0.85":{t:"相等操作符",p:`第一组是等于和不等于，它们在比较之前执行转换。第二组是全等和不全等，它们在比较之前不执行转换
`,l:"InterviewJS/js.html#相等操作符",a:"相等操作符"},"0.86":{t:"等于和不等于",p:"ECMAScript 中的等于操作符用两个等于号(==)表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号(!=)表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进 ...",l:"InterviewJS/js.html#等于和不等于",a:"等于和不等于"},"0.87":{t:"全等和不全等",p:`全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号(===)表示，只有两个操作数在不转换的前提下相等才返回 true
不全等操作符用一个叹号和两 ...`,l:"InterviewJS/js.html#全等和不全等",a:"全等和不全等"},"0.88":{t:"条件操作符",p:` variable = boolean_expression ? true_value : false_value;

上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expressi ...`,l:"InterviewJS/js.html#条件操作符",a:"条件操作符"},"0.89":{t:"赋值操作符",p:`简单赋值用等于号(=)表示，将右手边的值赋给左手边的变量
复合赋值操作符

乘后赋值(*=)
除后赋值(/=)
取模后赋值(%=)
加后赋值(+=)
减后赋值(-=)
左移后赋值(&lt;&lt;=) ...`,l:"InterviewJS/js.html#赋值操作符",a:"赋值操作符"},"0.90":{t:"逗号操作符",p:`逗号操作符可以用来在一条语句中执行多个操作，如下所示:
let num1 = 1,
  num2 = 2,
  num3 = 3

也可以使用逗号操作符来辅助 赋值。在赋值时使用逗号操作符分隔值，最终 ...`,l:"InterviewJS/js.html#逗号操作符",a:"逗号操作符"},"0.91":{t:"语句(后续整理)",p:`P98
`,l:"InterviewJS/js.html#语句-后续整理",a:"语句-后续整理"},"1.0":{t:"# 1. 谈谈你对 Vue 的理解？",p:`官方：Vue是一套用于构架用户界面的渐进式框架，Vue 的核心库只关注视图层
!image-20240313101558411
`,l:"InterviewVue/01.谈谈你对Vue的理解.html",a:"_1-谈谈你对-vue-的理解"},"1.1":{t:"1.1 声明式框架",p:`Vue 的核心特点，用起来简单。那我们就有必要知道命令式和声明式的区别

早在 JQ的时代，编写的代码都是命令式的，命令式框架重要特点就是关注过程
声明式框架更加关注结果。命令式的代码封装到了 Vue ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-1-声明式框架",a:"_1-1-声明式框架"},"1.2":{t:"1.2 MVVM 模式",p:`说起 mvvm，就要知道另一个东西叫 MVC。为什么要有这些模式呢？
目的：职责划分、分层管理
!image-20240313103948553

对于前端而言就是如何将数据同步到页面上，也就是借鉴后 ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-2-mvvm-模式",a:"_1-2-mvvm-模式"},"1.3":{t:"1.3 采用虚拟 DOM",p:`传统更新页面，拼接一个完整的字符串innerHTML 全部重新渲染，添加虚拟 DOM 后，可以比较新旧虚拟节点，找到变化再进行更新。虚拟 DOM 就是一个对象，用来描述真实 DOM 的
github. ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-3-采用虚拟-dom",a:"_1-3-采用虚拟-dom"},"1.4":{t:"1.4 区分编译(打包)时和运行(浏览器)时",p:`
Vue 的渲染核心就是调用渲染(render)方法将虚拟 DOM 渲染成真实 DOM(缺点就是虚拟 DOM 编写麻烦)
专门写个编译时可以将模板编译成虚拟 DOM(在构建的时候进行编译性能更高，不需 ...`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-4-区分编译-打包-时和运行-浏览器-时",a:"_1-4-区分编译-打包-时和运行-浏览器-时"},"1.5":{t:"1.5 组件化",p:`实现高内聚、低耦合、单向数据流

组件化开发能大幅提高应用开发效率、测试性、复用性等；
降低更新范围，只重新渲染变化的组件

`,l:"InterviewVue/01.谈谈你对Vue的理解.html#_1-5-组件化",a:"_1-5-组件化"},"2.0":{t:"# 2. 谈谈你对 SPA 的理解",p:"",l:"InterviewVue/02.谈谈你对spa的理解.html",a:"_2-谈谈你对-spa-的理解"},"2.1":{t:"1.1 理解基本概念",p:`
SPA(Single Page Application)单页应用，默认情况下我们编写 Vue、React 都只有一个 html 页面，并且提供一个挂载点，最终打包后会在此页面中引入对应的资源。(页面 ...`,l:"InterviewVue/02.谈谈你对spa的理解.html#_1-1-理解基本概念",a:"_1-1-理解基本概念"},"2.2":{t:"1.2 优缺点",p:`



单页面应用 SPA
多页面应用 MPA




组成
一个主页面和页面组件
多个完整的页面


刷新方式
局部刷新
整页刷新


SEO 搜索引擎优化
无法实现
容易实现


页面切换
速度快 ...`,l:"InterviewVue/02.谈谈你对spa的理解.html#_1-2-优缺点",a:"_1-2-优缺点"},"2.3":{t:"1.3 解决方案",p:`
静态页面预渲染(Static Site Generation)SSG，在构建时生成完整的 html 页面。(就是在打包的时候，先将页面放到浏览器中运行一下，将 HTML 保存起来)，仅适合静态页面网 ...`,l:"InterviewVue/02.谈谈你对spa的理解.html#_1-3-解决方案",a:"_1-3-解决方案"},"3.0":{t:"# 3.Vue为什么需要虚拟DOM.md",p:"",l:"InterviewVue/03.Vue为什么需要虚拟DOM.html",a:"_3-vue为什么需要虚拟dom-md"},"3.1":{t:"1.1 基本概念",p:`
基本所有框架都引入了虚拟 DOM 来对真实的 DOM 进行抽象，也就是现在大家所熟知的 VNode 和 VDOM


Virtual DOM 就是用 js 对象来描述真实 DOM，是对真实 DOM  ...`,l:"InterviewVue/03.Vue为什么需要虚拟DOM.html#_1-1-基本概念",a:"_1-1-基本概念"},"3.2":{t:"1.2补充：VDOM 是如何生成的",p:`
在 vue 中我们常常回味组件编写模板- template
这个模板会被编译器编译为渲染函数 - Render
在接下来的挂载过程中会调用 render 函数，返回的对象就是虚拟 DOM
会在后续的 ...`,l:"InterviewVue/03.Vue为什么需要虚拟DOM.html#_1-2补充-vdom-是如何生成的",a:"_1-2补充-vdom-是如何生成的"},"3.3":{t:"1.3 再次补充：VDOM 如何做 diff",p:`
挂载过程结束后，会记录第一次生成的 VDOM - oldVNode
当响应式数据发生变化时，将会引起组件刷新 render，此时就会生成新的 VDOM - newVNode
使用 oldVNode  ...`,l:"InterviewVue/03.Vue为什么需要虚拟DOM.html#_1-3-再次补充-vdom-如何做-diff",a:"_1-3-再次补充-vdom-如何做-diff"},"4.0":{t:"# 4. 谈谈对 Vue 组件化的理解",p:`
WebComponent组件化的核心组成：模板、属性、事件、插槽、生命周期

组件化好处：高聚合、可重用、可组合

组件化开发能大幅提高应用的开发效率、测试性、复用性等
降低更新范围，只重新渲染变化 ...`,l:"InterviewVue/04.谈谈对Vue组件化的理解.html",a:"_4-谈谈对-vue-组件化的理解"},"4.1":{t:"补充：",p:`
vue 中的每一个组件都有一个渲染函数 watcher、effect
数据是响应式的，数据变化后执行 watcher 或者 effect
组件要合理的划分，如果不拆分组件，那更新的时候整个页面都要重 ...`,l:"InterviewVue/04.谈谈对Vue组件化的理解.html#补充",a:"补充"},"5.0":{t:"# 5.既然 Vue 通过数据劫持可以精确探测数据变化，为什么还要虚拟 DOM 进行 diff 检测差异？",p:"Vue 内部设计原因导致。vue 设计的是每个组件一个 watcher(渲染 watcher)，没有采用一个属性对应一个 watcher，这样会导致大量 watcher 的产生而且看浪费内存，如果粒度 ...",l:"InterviewVue/05.为什么需要虚拟DOM进行diff检测差异.html",a:"_5-既然-vue-通过数据劫持可以精确探测数据变化-为什么还要虚拟-dom-进行-diff-检测差异"},"6.0":{t:"# 6.请说一下你对响应式的理解.md",p:"",l:"InterviewVue/06.请说一下你对响应式的理解.html",a:"_6-请说一下你对响应式的理解-md"},"6.1":{t:"1.1 如何实现响应式数据",p:"数组和对象类型当值变化时如何劫持到。对象内部通过 defineReactive 方法，使用Object.defineProperty将属性进行劫持(只会劫持已经存在的属性)，数组则是通过重写数组的方法 ...",l:"InterviewVue/06.请说一下你对响应式的理解.html#_1-1-如何实现响应式数据",a:"_1-1-如何实现响应式数据"},"6.2":{t:"1.2 Vue2 处理缺陷",p:`
在 Vue2 的时候使用 defineProperty来进行数据的劫持，需要对属性进行重写添加 getter 及 setter 性能差
当新增属性和删除属性时无法边控变化。需要通过$set、$del ...`,l:"InterviewVue/06.请说一下你对响应式的理解.html#_1-2-vue2-处理缺陷",a:"_1-2-vue2-处理缺陷"},"6.3":{t:"1.3 Vue2 与 Vue3 实现对比",p:`Vue2
let obj = { name: 'jw', age: 18 }
function observer (data) {
    if (typeof data !== 'object' | ...`,l:"InterviewVue/06.请说一下你对响应式的理解.html#_1-3-vue2-与-vue3-实现对比",a:"_1-3-vue2-与-vue3-实现对比"},"7.0":{t:"# 7. Vue 中如何检测数组变化",p:"",l:"InterviewVue/07.Vue中如何检测数组变化.html",a:"_7-vue-中如何检测数组变化"},"7.1":{t:"1.1 实现数组劫持",p:`
数组考虑性能的原因没有用defineProperty对数组的每一项进行拦截，而是选择重写数组(push、shift、pop、splice、unshift、sort、reverse)方法
数组中如果是 ...`,l:"InterviewVue/07.Vue中如何检测数组变化.html#_1-1-实现数组劫持",a:"_1-1-实现数组劫持"},"7.2":{t:"1.2 数组的缺点",p:`
数组的索引和长度变化是无法监控的

`,l:"InterviewVue/07.Vue中如何检测数组变化.html#_1-2-数组的缺点",a:"_1-2-数组的缺点"},"8.0":{t:"# 8.Vue 中如何进行依赖收集",p:"",l:"InterviewVue/08.Vue 中如何进行依赖收集.html",a:"_8-vue-中如何进行依赖收集"},"8.1":{t:"1.1 依赖收集流程",p:`
每个属性都拥有自己的 dep 属性，存放它所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去更新
默认在初始化时会调用 render 函数，此时会触发属性依赖收集 dep.d ...`,l:"InterviewVue/08.Vue 中如何进行依赖收集.html#_1-1-依赖收集流程",a:"_1-1-依赖收集流程"},"8.2":{t:"1.2 Vue3依赖收集",p:`
Vue3 中会通过 Map 结构将属性和 effect 映射起来
默认在初始化时会调用 render 函数，此时会触发依赖收集 track
当属性发生修改时会找对应的 effect 列表依次执行tr ...`,l:"InterviewVue/08.Vue 中如何进行依赖收集.html#_1-2-vue3依赖收集",a:"_1-2-vue3依赖收集"},"9.0":{t:"# 9. Vue.set方法是如何实现的",p:`Vue不允许在已经创建的实例上动态添加新的响应式属性
export function set (target, key, val) {
    // 1. 是开发环境 target 没定义或者是基础类 ...`,l:"InterviewVue/09.Vue.set方法是如何实现的.html",a:"_9-vue-set方法是如何实现的"},"10.0":{t:"# 10.v-if和 v-show的怎么理解",p:"",l:"InterviewVue/10.v-if和 v-show的优先级.html",a:"_10-v-if和-v-show的怎么理解"},"10.1":{t:"1.1 基本概念",p:`
v-if 如果条件不成立不会渲染当前指令所在节点的 DOM 元素
v-show 只是切换当前 dom 的显示或者隐藏

`,l:"InterviewVue/10.v-if和 v-show的优先级.html#_1-1-基本概念",a:"_1-1-基本概念"},"10.2":{t:"1.2 效果展示",p:`Vue Template Explorer (vuejs.org)
Vue Template Explorer (vuejs.org)
`,l:"InterviewVue/10.v-if和 v-show的优先级.html#_1-2-效果展示",a:"_1-2-效果展示"},"10.3":{t:"1.3 如何选择",p:`
v-if可以阻断内部代码是否执行，如果条件不成立不会执行内部逻辑
如果页面逻辑在第一次加载的时候已经被确认后续不会频繁更改则采用 v-if

`,l:"InterviewVue/10.v-if和 v-show的优先级.html#_1-3-如何选择",a:"_1-3-如何选择"},"11.0":{t:"# 11. Watch&computed",p:`Vue2中有三种 watcher(渲染 watcher、计算属性 watcher、用户 watcher)
Vue3 中有三种 effect(渲染 effect、计算属性 effect、用户 effec ...`,l:"InterviewVue/11.watch&computed.html",a:"_11-watch-computed"},"11.1":{t:"1.1 computed",p:`
计算属性仅当用户取值时才会执行对应的方法
computed属性是具备缓存的，依赖的值不发生变化，对其取值时计算属性方法不会重新执行。
计算属性可以简化模板中的复杂表达式
计算属性中不支持异步逻辑
c ...`,l:"InterviewVue/11.watch&computed.html#_1-1-computed",a:"_1-1-computed"},"11.2":{t:"1.2 watch",p:`watch 则是监控值的变化，当值发生变化时调用对应的回调函数。经常用于监控某个值的变化，进行一些操作。(异步要注意静态问题)

Vue3提供了 onCleanUp 函数，让用户方便使用也解决了清理问 ...`,l:"InterviewVue/11.watch&computed.html#_1-2-watch",a:"_1-2-watch"},"11.3":{t:"1.3 源码剖析",p:"",l:"InterviewVue/11.watch&computed.html#_1-3-源码剖析",a:"_1-3-源码剖析"},"12.0":{t:"# 解释 ref 和 reactive 区别？",p:"",l:"InterviewVue/12.解释 ref和reactive区别.html",a:"解释-ref-和-reactive-区别"},"12.1":{t:"1.1 基本概念",p:`ref 和 reactive 是 Vue3 数据响应式中非常重要的两个概念

reactive 用于处理对象类型的数据响应。底层采用的是 new Proxy()
ref 通常用于处理单值的响应式，re ...`,l:"InterviewVue/12.解释 ref和reactive区别.html#_1-1-基本概念",a:"_1-1-基本概念"},"12.2":{t:"1.2 源码实现",p:"",l:"InterviewVue/12.解释 ref和reactive区别.html#_1-2-源码实现",a:"_1-2-源码实现"},"13.0":{t:"# 13.watch 和 watchEffect 的区别",p:`
watchEffect 立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数
watch 侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。

const effect ...`,l:"InterviewVue/13.watch和watchEffect的区别.html",a:"_13-watch-和-watcheffect-的区别"},"14.0":{t:"#  如何将 template 转化成 render 函数",p:`Vue 中含有模板编译的功能，它的主要作用是将用户编写的 template 编译为 js 中可执行的 render 函数

将 template 模板转换成 ast 语法树- parseHTML
将静 ...`,l:"InterviewVue/14.如何将template转化成render函数.html",a:"如何将-template-转化成-render-函数"},"15.0":{t:"# 15. new Vue()这个过程中究竟做了什么",p:`
在 new Vue 的时候，内部会进行初始化操作
内部会初始化组件绑定的事件，初始化组件的父子关系$parent $children $root
初始化响应式数据 data、computed、wat ...`,l:"InterviewVue/15.new Vue()这个过程中究竟做了什么.html",a:"_15-new-vue-这个过程中究竟做了什么"},"16.0":{t:"# 16. Vue.observable 你有了解过吗.md",p:`Vue2.6 新增的一个 API，用于讲一个数据变成响应式的
在父子组件通信时，可以使用 eventBus 或者使用状态管理工具，但是功能不复杂的时候，我们可以考虑使用Vue.observable
`,l:"InterviewVue/16.Vue.observable你有了解过吗.html",a:"_16-vue-observable-你有了解过吗-md"},"17.0":{t:"# 17. v-if 和 v-for 哪个优先级更高",p:`v-for 和 v-if 避免在同一个标签中使用，如果遇到需要同事使用时可以考虑写成计算属性的方式。
&lt;!--应当避免这种写法 --&gt;
&lt;li v-for=&quot;i in ar ...`,l:"InterviewVue/17.v-if和v-for哪个优先级更高.html",a:"_17-v-if-和-v-for-哪个优先级更高"},"18.0":{t:"# 18. 生命周期有哪些",p:"",l:"InterviewVue/18.生命周期有哪些.html",a:"_18-生命周期有哪些"},"18.1":{t:"1.1 Vue2 中的生命周期",p:`主要的生命周期：创建前后、挂载前后、更新前后、销毁前后

beforeCreate 初始化父子关系及事件，数据观测(data Observer)之前被调用，用此方法一般编写插件的时候会用到
creat ...`,l:"InterviewVue/18.生命周期有哪些.html#_1-1-vue2-中的生命周期",a:"_1-1-vue2-中的生命周期"},"18.2":{t:"1.2 V2 和 V3 中的生命周期对比",p:`


生命周期 V2
生命周期 V3
描述




beforeCreate
beforeCreate
组件实例被创建之初


created
created
组件实例已经完全创建


beforeM ...`,l:"InterviewVue/18.生命周期有哪些.html#_1-2-v2-和-v3-中的生命周期对比",a:"_1-2-v2-和-v3-中的生命周期对比"},"19.0":{t:"# 19. Vue 中 diff 算法原理",p:"",l:"InterviewVue/19.Vue中diff算法原理.html",a:"_19-vue-中-diff-算法原理"},"19.1":{t:"1.1 Diff 概念",p:`vue 基于虚拟 DOM 做更新。diff 的核心就比较两个虚拟节点的差异。Vue 的 diff 算法是平级比较，不考虑跨级比较的情况。内部采用深度递归的方式 + 双指针的方式进行比较。
`,l:"InterviewVue/19.Vue中diff算法原理.html#_1-1-diff-概念",a:"_1-1-diff-概念"},"19.2":{t:"1.2 Diff 比较流程",p:`
先比较是否是相同节点 key tag
相同节点比较属性，并复用老节点(将老的虚拟 DOM 复用给新的虚拟节点 DOM)
比较儿子节点，考虑老节点和新节点儿子的情况

老的没儿子，现在有儿子。直接插入 ...`,l:"InterviewVue/19.Vue中diff算法原理.html#_1-2-diff-比较流程",a:"_1-2-diff-比较流程"},"20.0":{t:"# 20. 请说明 Vue 中 key 的作用和原理，谈谈你对它的理解",p:"",l:"InterviewVue/20.请说明Vue中key的作用和原理.html",a:"_20-请说明-vue-中-key-的作用和原理-谈谈你对它的理解"},"20.1":{t:"1.1 key 的概念",p:`
key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNode。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能地尝试就地 ...`,l:"InterviewVue/20.请说明Vue中key的作用和原理.html#_1-1-key-的概念",a:"_1-1-key-的概念"},"20.2":{t:"1.2 key 的作用",p:`
Vue 在 patch 过程中通过 key 可以判断两个虚拟节点是否是相同节点。(可以复用老节点)
无 key 会导致更新的时候出问题
尽量不要采用索引作为 key

!image-20240314 ...`,l:"InterviewVue/20.请说明Vue中key的作用和原理.html#_1-2-key-的作用",a:"_1-2-key-的作用"},"21.0":{t:"# 21.Vue.use 是干什么的",p:"",l:"InterviewVue/21.Vue.use是干什么的.html",a:"_21-vue-use-是干什么的"},"21.1":{t:"1.1 use 概念",p:"安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入，这样插件中就 ...",l:"InterviewVue/21.Vue.use是干什么的.html#_1-1-use-概念",a:"_1-1-use-概念"},"21.2":{t:"1.2 插件的功能",p:`
添加全局指令、全局过滤器、全局组件
通过全局混入来添加一些组件选项
添加 vue 实例方法，通过把它们添加到 vue.prototype 上实现

`,l:"InterviewVue/21.Vue.use是干什么的.html#_1-2-插件的功能",a:"_1-2-插件的功能"},"21.3":{t:"1.3 实现原理",p:`Vue.use = function (plugin: Function | Object) {
  // 插件缓存
  const installedPlugins =
    this._inst ...`,l:"InterviewVue/21.Vue.use是干什么的.html#_1-3-实现原理",a:"_1-3-实现原理"},"22.0":{t:"# 22. Vue.extend 方法的作用",p:"",l:"InterviewVue/22.Vue.extend方法的作用.html",a:"_22-vue-extend-方法的作用"},"22.1":{t:"1.1 Vue.extend 概念",p:`使用基础 Vue 构造器，创建一个&quot;子类&quot;。参数是一个包含组件选项的对象。
data 选项是特例，需要注意 - 在 Vue.extend()中它必须是函数
var profile  ...`,l:"InterviewVue/22.Vue.extend方法的作用.html#_1-1-vue-extend-概念",a:"_1-1-vue-extend-概念"},"22.2":{t:"1.2 分析",p:`
所有的组件创建时都会调用 Vue.extend()方法进行创建。
有了此方法我们可以用于手动挂载组件。
后端存储的字符串模板我们可以通过 Vue.extend 方法将其进行渲染，但是需要引入编译时。 ...`,l:"InterviewVue/22.Vue.extend方法的作用.html#_1-2-分析",a:"_1-2-分析"},"23.0":{t:"# 23.Vue 组件 data 为什么必须是一个函数",p:`
根实例对象 data 可以是对象也可以是函数&quot;单例&quot;，不会产生数据污染的情况
组件实例对象 data 必须是函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污 ...`,l:"InterviewVue/23.Vue组件data为什么必须是一个函数.html",a:"_23-vue-组件-data-为什么必须是一个函数"},"24.0":{t:"# 24. 函数组件的优势",p:"函数式组件的特性：无状态、无生命周期、无 this，但是性能高。正常组件是一个类继承了 Vue，函数式组件就是普通的函数，没有 new 的过程。最终就是将返回的虚拟 DOM 变成真实 DOM 替换对应 ...",l:"InterviewVue/24.函数组件的优势.html",a:"_24-函数组件的优势"},"25.0":{t:"# 25. Vue 的过滤器了解吗？过滤器的使用场景",p:`过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解成纯函数。
{{ message | filterA(&quot;arg1&quot;,&quot;ar ...`,l:"InterviewVue/25.Vue的过滤器了解吗？过滤器的使用场景.html",a:"_25-vue-的过滤器了解吗-过滤器的使用场景"},"26.0":{t:"# 26. v-once 的使用场景有哪些",p:"",l:"InterviewVue/26.v-once的使用场景有哪些.html",a:"_26-v-once-的使用场景有哪些"},"26.1":{t:"1.1 v-once 概念",p:`v-once 是 Vue 的内置指令，只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能
`,l:"InterviewVue/26.v-once的使用场景有哪些.html#_1-1-v-once-概念",a:"_1-1-v-once-概念"},"26.2":{t:"1.2 v-once 使用场景",p:`&lt;!-- 单个元素 --&gt;
&lt;span v-once&gt; This will never change: {{ msg }}&lt;/span&gt;
&lt;!-- 有子元素  ...`,l:"InterviewVue/26.v-once的使用场景有哪些.html#_1-2-v-once-使用场景",a:"_1-2-v-once-使用场景"},"27.0":{t:"# 27. Vue.mixin的使用场景和原理",p:"",l:"InterviewVue/27.Vue.mixin的原理和使用场景.html",a:"_27-vue-mixin的使用场景和原理"},"27.1":{t:"1.1 Vue.mixin 概念",p:`mixin可以用来扩展组件，将公共逻辑进行抽离。在需要该逻辑时进行“混入”，采用策略模式针对不同的属性进行合并。如果混入的数据和本身组件中的数据冲突，会采用“就近原则”以组件的数据为准、

mixin ...`,l:"InterviewVue/27.Vue.mixin的原理和使用场景.html#_1-1-vue-mixin-概念",a:"_1-1-vue-mixin-概念"},"27.2":{t:"1.2 混入方式",p:`在Vue中我们可以局部混入跟全局混入。一般情况下全局混入用于编写组件。局部混入用于复用逻辑。
`,l:"InterviewVue/27.Vue.mixin的原理和使用场景.html#_1-2-混入方式",a:"_1-2-混入方式"},"27.3":{t:"1.3 mixin合并策略",p:`核心就是：对象的合并处理

props、methods、inject、computed同名时会被替换
data会被合并
生命周期和watch方法会被合并成队列
components、directive ...`,l:"InterviewVue/27.Vue.mixin的原理和使用场景.html#_1-3-mixin合并策略",a:"_1-3-mixin合并策略"},"28.0":{t:"# 28. Vue 中的 slot 是怎样实现的？什么时候使用它？",p:"",l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html",a:"_28-vue-中的-slot-是怎样实现的-什么时候使用它"},"28.1":{t:"1.1 什么是插槽？",p:`插槽设计来源于 Web Components 规范草案，利用slot进行占位，在使用组件时，组件标签内部的内容会分发到对应的 slot 中。
`,l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html#_1-1-什么是插槽",a:"_1-1-什么是插槽"},"28.2":{t:"1.2 什么时候使用它？",p:`通过插槽可以让用户更好地对组件进行扩展和定制化。可以通过具名插槽指定渲染的位置。常用的组件例如：弹窗组件、布局组件、表格组件、树组件……
`,l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html#_1-2-什么时候使用它",a:"_1-2-什么时候使用它"},"28.3":{t:"1.3 插槽的分类和原理",p:`

默认插槽


具名插槽
\`&lt;div&gt;
  &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;
  &lt;slot name=&quot; ...`,l:"InterviewVue/28.Vue中的slot是怎样实现的？什么时候使用它.html#_1-3-插槽的分类和原理",a:"_1-3-插槽的分类和原理"},"29.0":{t:"# 29. 说说你对双向绑定的理解，以及它的实现原理",p:"",l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html",a:"_29-说说你对双向绑定的理解-以及它的实现原理"},"29.1":{t:"1.1 双向绑定的概念",p:"vue 中双向绑定靠的是指令 v-model，可以绑定一个动态值到视图上，同时修改视图能改变数据对应的值(能修改的视图就是表单组件) 经常会听到一句话：v-model 是 value 和 input  ...",l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html#_1-1-双向绑定的概念",a:"_1-1-双向绑定的概念"},"29.2":{t:"1.2 表单元素的 v-model",p:`内部会根据标签的不同解析出不同的语法。并且这里有&quot;额外&quot;的处理逻辑

例如 文本框会被解析成 value + input 事件，会解决中文输入问题
例如 复选框会被解析成 chec ...`,l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html#_1-2-表单元素的-v-model",a:"_1-2-表单元素的-v-model"},"29.3":{t:"1.3 组件中的 v-model",p:`组件上的v-model默认会利用名为 value的 prop 和名为input的事件。对于组件而言，v-model 就是value + input 的语法糖。可用于组件中的数据的双向绑定。
名字也可以 ...`,l:"InterviewVue/29.说说你对双向绑定的理解，以及它的实现原理.html#_1-3-组件中的-v-model",a:"_1-3-组件中的-v-model"},"30.0":{t:"# 30. Vue 中 .sync 修饰符的作用？",p:"在有些情况下，我们可能需要对一个 prop 进行&quot;双向绑定&quot;，这时可以使用.sync 来实现。v-model 默认只能双向绑定一个属性，这里就可以通过.sync修饰符绑定多个属性。 ...",l:"InterviewVue/30.Vue 中.sync修饰符的作用？.html",a:"_30-vue-中-sync-修饰符的作用"},"31.0":{t:"# 30. Vue 中递归组件的理解",p:`&lt;el-menu&gt;
  &lt;el-menu-item&gt;根 1&lt;/el-menu-item&gt;
  &lt;el-submenu&gt;
    &lt;template ...`,l:"InterviewVue/31.Vue 中递归组件的理解.html",a:"_30-vue-中递归组件的理解"},"31.1":{t:"1.1 模板递归",p:`&lt;el-menu&gt;
  &lt;template v-for=&quot;item in data&quot;&gt;
    &lt;resub :data=&quot;item&quo ...`,l:"InterviewVue/31.Vue 中递归组件的理解.html#_1-1-模板递归",a:"_1-1-模板递归"},"31.2":{t:"1.2 渲染函数递归",p:`render(){
  let renderChildren = (data)=&gt;{
    return data.map((child)=&gt;{
      return child.c ...`,l:"InterviewVue/31.Vue 中递归组件的理解.html#_1-2-渲染函数递归",a:"_1-2-渲染函数递归"},"32.0":{t:"# 32.组件中写 name 属性有哪些好处和作用？",p:`
增加 name 选择会在components属性中增加组件本身，实现组件的递归调用
可以表示组件的具体名称，方便调试和查找对应组件
$children.filter(item=&gt;item.$o ...`,l:"InterviewVue/32.组件中写 name 选项有哪些好处及作用.html",a:"_32-组件中写-name-属性有哪些好处和作用"},"33.0":{t:"# 33. Vue 常见的修饰符有哪些？有什么应用场景",p:`
表单修饰符 lazy、trim、number
事件修饰符 stop、prevent、self、once、capture、passive、native
鼠标按键修饰符 left、right、middl ...`,l:"InterviewVue/33.Vue 常见的修饰符有哪些，有什么应用场景.html",a:"_33-vue-常见的修饰符有哪些-有什么应用场景"},"34.0":{t:"# 34. Vue 中异步组件的作用和原理",p:"",l:"InterviewVue/34.Vue中异步组件的作用和原理.html",a:"_34-vue-中异步组件的作用和原理"},"34.1":{t:"1.1 异步组件概念",p:`Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。推荐的做法是将异步组件和 webpack 的 code-solitting 功能一起配合使用。
`,l:"InterviewVue/34.Vue中异步组件的作用和原理.html#_1-1-异步组件概念",a:"_1-1-异步组件概念"},"34.2":{t:"1.2 异步组件的写法",p:`

回调写法
{
  components: {
    &quot;my-component&quot;: (resolve, reject) =&gt; {
      setTimeout(fu ...`,l:"InterviewVue/34.Vue中异步组件的作用和原理.html#_1-2-异步组件的写法",a:"_1-2-异步组件的写法"},"34.3":{t:"1.3 异步组件原理",p:`
默认渲染异步占位符节点
组件加载完毕后调用 $forceUpdate 强制更新，渲染加载完毕后的组件

`,l:"InterviewVue/34.Vue中异步组件的作用和原理.html#_1-3-异步组件原理",a:"_1-3-异步组件原理"},"35.0":{t:"# 35. 说说你对 nextTick 的理解？",p:"",l:"InterviewVue/35.说说你对 nextTick 的理解.html",a:"_35-说说你对-nexttick-的理解"},"35.1":{t:"1.1 nextTick 概念",p:`
Vue 中视图更新是异步的，使用 nextTick 方法可以保证用户定义的逻辑在更新之后执行
可用于获取更新后的 DOM，多次调用 nextTick 会被合并。

&lt;template&gt;
 ...`,l:"InterviewVue/35.说说你对 nextTick 的理解.html#_1-1-nexttick-概念",a:"_1-1-nexttick-概念"},"36.0":{t:"# 36. keep-alive 平时在哪里使用",p:"",l:"InterviewVue/36.keep-alive平时在哪里使用.html",a:"_36-keep-alive-平时在哪里使用"},"36.1":{t:"1.1 概念",p:`keep-alive 是 vue 中的内置组件，能在组件切换过程中会缓存组件的实例，而不是销毁他们。在组建再次重新激活时可以通过缓存的实例拿到之前渲染的 DOM 进行渲染，无需重新生成节点。
`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-1-概念",a:"_1-1-概念"},"36.2":{t:"1.2 使用场景",p:`动态组件可以采用keep-alive进行缓存
&lt;keep-alive :include=&quot;whiteList&quot; :exclude=&quot;blackList&quot;  ...`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-2-使用场景",a:"_1-2-使用场景"},"36.3":{t:"1.3 原理",p:`export default {
    name:'keep-alive',
    abstract:true, // 不会放到对应的lifecycle
    props:{
        i ...`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-3-原理",a:"_1-3-原理"},"36.4":{t:"1.4 keep-alive中数据更新问题",p:`beforeRouteEnter: 在与 vue-router 的项目，每次进入路由的时候，都会执行beforeRouteEnter
beforeRouteEnter(to, from, next){ ...`,l:"InterviewVue/36.keep-alive平时在哪里使用.html#_1-4-keep-alive中数据更新问题",a:"_1-4-keep-alive中数据更新问题"},"37.0":{t:"# 37. 自定义指令的使用场景",p:"",l:"InterviewVue/37.自定义指令的应用场景.html",a:"_37-自定义指令的使用场景"},"37.1":{t:"1.1 指令的概念",p:`vue 除了内置指令之外，同时 Vue 也允许用户注册自定义指令来对 Vue 进行扩展。指令的目的在于可以将操作 DOM 的逻辑进行复用。
`,l:"InterviewVue/37.自定义指令的应用场景.html#_1-1-指令的概念",a:"_1-1-指令的概念"},"37.2":{t:"1.2 指令的生命周期",p:`
bind: 只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次性的初始化设置。
inserted: 被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。
update:  ...`,l:"InterviewVue/37.自定义指令的应用场景.html#_1-2-指令的生命周期",a:"_1-2-指令的生命周期"},"37.3":{t:"1.3 常见的指令编写",p:`

图片懒加载 v-lazy


防抖 v-debounce


按钮权限 v-has


拖拽指令 v-draggable 、mousemove、mouseup、mousedown、dragente ...`,l:"InterviewVue/37.自定义指令的应用场景.html#_1-3-常见的指令编写",a:"_1-3-常见的指令编写"},"38.0":{t:"# 38. Vue 中使用了哪些设计模式",p:`
单例模式 - 单例模式就是整个程序有且仅有一个实例 Vuex 中的 store
工厂模式 - 传入参数即可创建实例(createElement)
发布订阅模式 - 订阅者把自己想订阅的事件注册到调度 ...`,l:"InterviewVue/38.Vue 中使用了哪些设计模式.html",a:"_38-vue-中使用了哪些设计模式"},"39.0":{t:"# 39. Vue 中的性能优化有哪些",p:`
数据层级不宜过深，合理设置响应式数据
通过Object.freeze()方法冻结属性
使用数据时，缓存值的结果，不频繁取值
合理设置 key 属性
v-show 和 v-if 的选取
控制组件力粒度 ...`,l:"InterviewVue/39.Vue 中的性能优化有哪些.html",a:"_39-vue-中的性能优化有哪些"},"40.0":{t:"# 40. 单页应用首屏加载速度慢的怎么解决？",p:`
使用路由懒加载、异步组件，实现组件拆分，减少入口文件体积大小(优化体验骨架屏)
抽离公共代码，采用splitChunks进行代码分割。
组件加载采用按需加载的方式。
静态资源缓存，采用 HTTP 缓 ...`,l:"InterviewVue/40.单页应用首屏加载慢的怎么解决.html",a:"_40-单页应用首屏加载速度慢的怎么解决"},"41.0":{t:"# 41. Vue 项目中你是如何解决跨域的呢？",p:`跨域是浏览器同源策略导致的，这个是浏览器的行为(协议、主机名、端口的不同都会导致跨域问题)。服务端和服务端之间进行通信是没有跨域问题的。跨域的实现方案有很多种。不过一般常用的就那么几中

CORS(C ...`,l:"InterviewVue/41.Vue 项目中你是如何解决跨域的呢.html",a:"_41-vue-项目中你是如何解决跨域的呢"},"42.0":{t:"# 42. Vue 项目中有封装过 axios 吗？主要是封装哪方面的？",p:`
设置请求超时时间
根据项目环境设置请求路径
设置拦截请求，自动添加 Token
设置响应拦截，对响应的状态码或者数据进行格式化
增添请求队列，实现 loading 效果
维护取消请求 token，在 ...`,l:"InterviewVue/42.Vue 项目中有封装过 axios 吗？主要是封装哪方面的？.html",a:"_42-vue-项目中有封装过-axios-吗-主要是封装哪方面的"},"43.0":{t:"# 43.Vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？",p:"",l:"InterviewVue/43.Vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？.html",a:"_43-vue-要做权限管理该怎么做-如果控制到按钮级别的权限怎么做"},"43.1":{t:"1.1 常见权限控制",p:`
登录鉴权：用户登录后返回 token，前端将 token 保存到本地，作为用户登录的凭证，每次发送请求时会携带 token，后端会对 token 进行验证。当页面刷新时我们可以使用token 来获得 ...`,l:"InterviewVue/43.Vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？.html#_1-1-常见权限控制",a:"_1-1-常见权限控制"},"44.0":{t:"# 44.Vue-Router 有几种钩子函数，具体是什么及执行流程是怎样的？",p:`
导航被触发
在失活的组件调用 beforeRouteLeave守卫
调用全局的 beforeEach 守卫
在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)
在路由配置里调用 ...`,l:"InterviewVue/44.Vue-Router 有几种钩子函数，具体是什么及执行流程是怎样的？.html",a:"_44-vue-router-有几种钩子函数-具体是什么及执行流程是怎样的"},"45.0":{t:"# 45. Vue-Router 几种模式的区别",p:`
Vue-Router 有三种模式 hash、history、abstract
abstract 模式是在不支持浏览器 API 环境使用，不依赖于浏览器历史
hash 模式：hash + popSta ...`,l:"InterviewVue/45.Vue-Router 几种模式的区别.html",a:"_45-vue-router-几种模式的区别"},"46.0":{t:"# 46.Vue 项目本地开发完后部署到服务器后报 404 是什么原因呢",p:`history 模式刷新时会向服务器发起请求，服务端无法响应到对应的资源，所以会出现 404 问题
`,l:"InterviewVue/46.Vue 项目本地开发完后部署到服务器后报 404 是什么原因呢.html",a:"_46-vue-项目本地开发完后部署到服务器后报-404-是什么原因呢"},"47.0":{t:"#  47. 谈谈你对 vuex 的个人理解",p:`
`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html",a:"_47-谈谈你对-vuex-的个人理解"},"47.1":{t:" ",p:"",l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#",a:""},"47.2":{t:"1.1 概念",p:`
vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式，采用集中存储管理应用的所有组件的状态。核心就是解决数据的共享。
以相应的规则保证状态以一种可预测的方式发生变化。

!vuex
`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-1-概念",a:"_1-1-概念"},"47.3":{t:"1.2 状态修改",p:`
组件中 commit() -&gt; mutation -&gt;修改状态
组件中 dispatch() -&gt; action(为了解决接口的复用问题，封装公共的逻辑) -&gt; commit ...`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-2-状态修改",a:"_1-2-状态修改"},"47.4":{t:"1.3 缺点",p:`Vuex 中 store 只有一份，复杂的数据需要依赖于模块。Vuex 状态是一个树状结构，最终会将模块的状态挂载到根模块上。

模块和状态的名字冲突
数据不够扁平化，调用的时候过长
更改状态 mut ...`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-3-缺点",a:"_1-3-缺点"},"47.5":{t:"1.4 原理",p:`对于 Vuex3 核心就是通过 new Vue()创建了一个 Vue 实例，进行数据共享。
对于 Vuex4 核心就是通过创建一个响应式对象进行数据共享reactive()
`,l:"InterviewVue/47.谈谈你对 vuex 的个人理解.html#_1-4-原理",a:"_1-4-原理"},"48.0":{t:"# 48.如何监听 vuex 中数据的变化",p:`
通过 watch 监控 vuex 中状态变化。
通过 store.subscribe 监控状态变化。

`,l:"InterviewVue/48.如何监听 vuex 中数据的变化.html",a:"_48-如何监听-vuex-中数据的变化"},"49.0":{t:"# 49.页面刷新后 vuex 的数据丢失怎么解决",p:`
每次获取数据前检测 Vuex 数据是否存在，不存在则发请求重新拉去数据，存储到 Vuex 中
采用 Vuex 持久化插件，将数据存储到 localStorage 或者 sessionStorage  ...`,l:"InterviewVue/49.页面刷新后 vuex 的数据丢失怎么解决.html",a:"_49-页面刷新后-vuex-的数据丢失怎么解决"},"50.0":{t:"# 50.mutation 和 action 的区别",p:`
在 action 中可以处理异步逻辑，可以获取数据后将结果提交给 mutation，mutation 中则是修改 state
在 action 中可以多次进行 commit 操作，包括 action ...`,l:"InterviewVue/50.mutation 和 action 的区别.html",a:"_50-mutation-和-action-的区别"},"51.0":{t:"# 51.有使用过 vuex 的 module 吗？在什么情况下会使用",p:`使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。
Vuex 允许我们将 store 分割成模块(module)。每个模块拥有自己的  ...`,l:"InterviewVue/51.有使用过 vuex 的 module 吗？在什么情况下会使用.html",a:"_51-有使用过-vuex-的-module-吗-在什么情况下会使用"},"52.0":{t:"# 52.Vue3 中 CompositionAPI 的优势是？",p:`
在 Vue2 中采用的是 OptionsAPI，用户提供的 data、props、methods、computed、watch 等属性(用户编写复杂业务逻辑会出现反复横跳的问题)
Vue2 中所有的 ...`,l:"InterviewVue/52.Vue3中 CompositionAPI 的优势是？.html",a:"_52-vue3-中-compositionapi-的优势是"},"53.0":{t:"# 53.Vue3 有了解过吗？能说说跟 Vue2 的区别吗？",p:`
Vue3.0 更注重模块上的拆分，在 2.0 中无法单独使用的模块，需要引入完整的 Vuejs(例如只想使用响应式部分，但是需要引入完整的 Vuejs)，Vue3 中的模块之间耦合度低，模块可以独立 ...`,l:"InterviewVue/53.Vue3 有了解过吗？能说说跟 Vue2 的区别吗？.html",a:"_53-vue3-有了解过吗-能说说跟-vue2-的区别吗"},"54.0":{t:"# 54. Vue 项目中的错误如何处理的",p:"",l:"InterviewVue/54.Vue 项目中的错误如何处理的.html",a:"_54-vue-项目中的错误如何处理的"},"54.1":{t:"1.1 errorCapture 钩子",p:`可以捕获来自后代组件的错误，如果全局的 config.errorHandler 被定义，所有的错误仍会发送给它，因此这些错误仍然会向单一的分析服务的地方进行汇报

父组件(errorCapture)  ...`,l:"InterviewVue/54.Vue 项目中的错误如何处理的.html#_1-1-errorcapture-钩子",a:"_1-1-errorcapture-钩子"},"54.2":{t:"1.2 全局设置错误处理",p:`如果在组件渲染时出现运行错误，错误将会被传递至全局 Vue.config.errorHandler 配置函数
Vue.config.errorHandler = (err, vm, info) =&g ...`,l:"InterviewVue/54.Vue 项目中的错误如何处理的.html#_1-2-全局设置错误处理",a:"_1-2-全局设置错误处理"},"54.3":{t:"1.3 接口异常处理",p:`instance.interceptors.response.use(
    (res) =&gt; {
        return res.data
    },
    (err) =&gt; ...`,l:"InterviewVue/54.Vue 项目中的错误如何处理的.html#_1-3-接口异常处理",a:"_1-3-接口异常处理"},"55.0":{t:"# 55.Vue3 中模板编译优化",p:"",l:"InterviewVue/55.Vue3 中模板编译优化.html",a:"_55-vue3-中模板编译优化"},"55.1":{t:"1.1 PatchFlags 优化",p:`Diff 算法无法避免新旧虚拟DOM 中无用的比较操作，通过 patchFlags 来标记动态内容，可以实现快速 diff 算法。
&lt;div&gt;
  &lt;h1&gt;Hello Jian ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#_1-1-patchflags-优化",a:"_1-1-patchflags-优化"},"55.2":{t:"1.2 BlockTree",p:`为什么我们还要提出 blockTree 的概念？只有 block 不就挺好的么？问题出在 block 在收集动态节点时是忽略虚拟 DOM 树层级的
&lt;div&gt;
  &lt;p v-if=& ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#_1-2-blocktree",a:"_1-2-blocktree"},"55.3":{t:"不稳定结构",p:`所谓的不稳定结构就是 DOM 树的结构可能会发生变化。不稳定结构有哪些呢？(v-if/v-for/fragment)
`,l:"InterviewVue/55.Vue3 中模板编译优化.html#不稳定结构",a:"不稳定结构"},"55.4":{t:"v-if",p:`&lt;div&gt;
  &lt;p v-if=&quot;flag&quot;&gt;
    &lt;span&gt;{{ a }}&lt;/span&gt;
  &lt;/p&gt;
  &l ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#v-if",a:"v-if"},"55.5":{t:"v-for",p:`随着 v-for 变量的变化也会导致虚拟DOM 树变得不稳定
&lt;div&gt;
  &lt;div v-for=&quot;item in fruits&quot; &gt;
    {{ it ...`,l:"InterviewVue/55.Vue3 中模板编译优化.html#v-for",a:"v-for"},"55.6":{t:"稳定 Fragment",p:"",l:"InterviewVue/55.Vue3 中模板编译优化.html#稳定-fragment",a:"稳定-fragment"},"56.0":{t:"# 什么是 JavaScript",p:"",l:"JavaScript/第1章-什么是 JavaScript.html",a:"什么是-javascript"},"56.1":{t:"JavaScript 是什么",p:`虽然 JavaScript 和 ECMAScript 基本上是同义词, 但是 JavaScript 远远不限于 ECMA-262 所定义的那样
完整的 JavaScript 包含以下几个部分

核心( ...`,l:"JavaScript/第1章-什么是 JavaScript.html#javascript-是什么",a:"javascript-是什么"},"56.2":{t:"JavaScript 实现",p:"",l:"JavaScript/第1章-什么是 JavaScript.html#javascript-实现",a:"javascript-实现"},"56.3":{t:"ECMAScript",p:`在基本层面上, ECMA-262 描述 JavaScript 包含如下几个部分
语法、类型、语句、关键字、保留字、操作符、全局对象
`,l:"JavaScript/第1章-什么是 JavaScript.html#ecmascript",a:"ecmascript"},"56.4":{t:"DOM",p:`文档对象模型(Document Object Model)是一个应用编程接口(API), 用于在 HTML 中使用扩展的 XML。
`,l:"JavaScript/第1章-什么是 JavaScript.html#dom",a:"dom"},"56.5":{t:"DOM 级别",p:`DOMLevel1 由 DOM Core 和 DOM HTML 组成。 前者提供了一中映射 XML 文档，从而方便访问和操作文档任意部分的方式；后者扩展了前者并增加了特定于 HTML 的对象和方法。
 ...`,l:"JavaScript/第1章-什么是 JavaScript.html#dom-级别",a:"dom-级别"},"56.6":{t:"BOM",p:`IE3 和 Netscape Navigator 3 提供的浏览器对象模型（BOM）API，用于支持访问和操作浏览器的窗口。
BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定 ...`,l:"JavaScript/第1章-什么是 JavaScript.html#bom",a:"bom"},"56.7":{t:"JavaScript 的不同版本",p:"",l:"JavaScript/第1章-什么是 JavaScript.html#javascript-的不同版本",a:"javascript-的不同版本"},"57.0":{t:"# HTML 中的 JavaScript",p:"",l:"JavaScript/第2章-HTML 中的 JavaScript.html",a:"html-中的-javascript"},"57.1":{t:"\\<Script\\> 元素",p:`script 元素有下列 8 个属性

async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效
charset：可选。使用 src 属 ...`,l:"JavaScript/第2章-HTML 中的 JavaScript.html#script-元素",a:"script-元素"},"58.0":{t:"# 语言基础",p:"",l:"JavaScript/第3章-语言基础.html",a:"语言基础"},"58.1":{t:"语法",p:"",l:"JavaScript/第3章-语言基础.html#语法",a:"语法"},"58.2":{t:"区分大小写",p:"ECMAScript 中一切都是区分大小写的。无论是变量、函数名还是操作符，都区分大小写。换句话说。变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一 ...",l:"JavaScript/第3章-语言基础.html#区分大小写",a:"区分大小写"},"58.3":{t:"标识符",p:`所谓标识符，就是变量、函数、属性或者函数参数的名称。标识符可以由一个或多个下列字符组成：
第一个字符必须是一个字母、下划线(_)或美元符号($)；
剩下的其他字符可以是字母、下划线、美元符号或数字；
 ...`,l:"JavaScript/第3章-语言基础.html#标识符",a:"标识符"},"58.4":{t:"注释",p:`ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。
单行注释以两个斜杠字符(//)开头，如
// 单行注释

块注释以一个斜杠和一个星号(/*)开头，以它们的反向组合(*/)结尾。 ...`,l:"JavaScript/第3章-语言基础.html#注释",a:"注释"},"58.5":{t:"严格模式",p:"ECMAScript 5 新增了严格模式的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。 ...",l:"JavaScript/第3章-语言基础.html#严格模式",a:"严格模式"},"58.6":{t:"关键字和保留字",p:"",l:"JavaScript/第3章-语言基础.html#关键字和保留字",a:"关键字和保留字"},"58.7":{t:"关键字",p:`break 	do		in		typeof		case		else		instanceof
var		catch		export		new		void		class		extends
return		 ...`,l:"JavaScript/第3章-语言基础.html#关键字",a:"关键字"},"58.8":{t:"保留字",p:`ECMA-262 描述了一组保留的关键字，这些关键字有特殊用途，比如表示控制语句的开始和结束， 或者执行特定的操作。按照规定，保留的关键字不能用作标识符或属性名。
`,l:"JavaScript/第3章-语言基础.html#保留字",a:"保留字"},"58.9":{t:"始终保留",p:`enum

`,l:"JavaScript/第3章-语言基础.html#始终保留",a:"始终保留"},"58.10":{t:"严格模式下保留",p:`implements		interface		let		package		protected
private		public		static

`,l:"JavaScript/第3章-语言基础.html#严格模式下保留",a:"严格模式下保留"},"58.11":{t:"模块代码中保留",p:`await

`,l:"JavaScript/第3章-语言基础.html#模块代码中保留",a:"模块代码中保留"},"58.12":{t:"变量",p:"ECMAScript 中有 3 个关键字可以声明变量：var、const 和let。其中var在 ECMAScript 的所有版本中都可以使用，而const和let只能在 ECMAScript 6 及 ...",l:"JavaScript/第3章-语言基础.html#变量",a:"变量"},"58.13":{t:"var 关键字",p:`要定义变量，可以使用 var 操作符（注意var是一个关键字），后跟变量名（即标识符）
var message
var message = 'hi'
message = 'hi' // 合法，但不推荐 ...`,l:"JavaScript/第3章-语言基础.html#var-关键字",a:"var-关键字"},"58.14":{t:"var 声明作用域",p:`使用var操作符定义的变量会成为包含它的函数的局部变量。比如，使用var在一个函数内部定义了一个变量，就意味着该变量将在函数退出时被销毁
function test() {
  var message ...`,l:"JavaScript/第3章-语言基础.html#var-声明作用域",a:"var-声明作用域"},"58.15":{t:"var 声明提升",p:`使用var时，下面的代码不会报错。这是因为使用了这个关键字声明的变量会自动提升到函数的作用域顶部：
function foo() {
  console.log(age)
  var age = 26 ...`,l:"JavaScript/第3章-语言基础.html#var-声明提升",a:"var-声明提升"},"58.16":{t:"let 声明",p:`let和var的作用差不多，但是有着非常重要的区别。最明显的区别就是，let声明的范围是块作用域，而var声明的范围是函数作用域。
if (true) {
  var name = 'Matt'
   ...`,l:"JavaScript/第3章-语言基础.html#let-声明",a:"let-声明"},"58.17":{t:"1. 暂时性死区",p:`let与var的另一个重要区别，就是let声明的变量不会在作用域中被提升。
// name 会被提升
console.log(name) // undefined
var name = 'Matt'
 ...`,l:"JavaScript/第3章-语言基础.html#_1-暂时性死区",a:"_1-暂时性死区"},"58.18":{t:"2. 全局声明",p:`与var关键字不同，使用 let在全局作用域中声明的变量不会成为 window 对象的属性(var 声明的变量则会)
var name = 'Matt'
console.log(window.name ...`,l:"JavaScript/第3章-语言基础.html#_2-全局声明",a:"_2-全局声明"},"58.19":{t:"3. 条件声明",p:`因为 let是块级作用域，所以不可能检查前面是否声明过同名变量，同时也就不可能在没有声明的情况下去声明它，因此不能依赖条件声明模式
`,l:"JavaScript/第3章-语言基础.html#_3-条件声明",a:"_3-条件声明"},"58.20":{t:"for 循环中的 let",p:`在let出现之前，for循环定义的迭代变量会渗透到循环体外部。改用let之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部
for (var i = 0; i &lt; 5; ++ ...`,l:"JavaScript/第3章-语言基础.html#for-循环中的-let",a:"for-循环中的-let"},"58.21":{t:"const 声明",p:`const的行为与let基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误
const age = 26
age = 36 // Typ ...`,l:"JavaScript/第3章-语言基础.html#const-声明",a:"const-声明"},"58.22":{t:"声明风格及最佳实践",p:`
不使用 var
const 优先，let 次之

`,l:"JavaScript/第3章-语言基础.html#声明风格及最佳实践",a:"声明风格及最佳实践"},"58.23":{t:"数据类型",p:`ECMAScript 有两大数据类型
基本数据类型(原始数据类型)：Undefined、Null、Boolean、Number、String、Symbol
复杂数据类型：Object
`,l:"JavaScript/第3章-语言基础.html#数据类型",a:"数据类型"},"58.24":{t:"typeof 操作符",p:`因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof 操作符就是为此而生的。对一个值使用 typeof 会返回下列字符串之一：

&quot;unde ...`,l:"JavaScript/第3章-语言基础.html#typeof-操作符",a:"typeof-操作符"},"58.25":{t:"Undefined 类型",p:`Undefined 类型只有一个值，就是特殊值undefined。当 var或let声明了变量但没有初始化时，就相当于给变量赋予了undefined值
注意：包含 undefined值的变量跟未定义变 ...`,l:"JavaScript/第3章-语言基础.html#undefined-类型",a:"undefined-类型"},"58.26":{t:"Null 类型",p:`Null类型同样只有一个值，即特殊值null。逻辑上讲，null值表示一个空对象指针，这也是给 typeof传一个null会返回&quot;object&quot;的原因。
在定义一个将来要保存对象值 ...`,l:"JavaScript/第3章-语言基础.html#null-类型",a:"null-类型"},"58.27":{t:"Boolean 类型",p:`Boolean类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true和false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。
注意：布尔值字面量 ...`,l:"JavaScript/第3章-语言基础.html#boolean-类型",a:"boolean-类型"},"58.28":{t:"布尔值和不同类型之间的转换规则",p:`


数据类型
转换为 true 的值
转换为 false 的值




Boolean
true
false


String
非空字符串
&quot;&quot;(空字符串)


Number
非 ...`,l:"JavaScript/第3章-语言基础.html#布尔值和不同类型之间的转换规则",a:"布尔值和不同类型之间的转换规则"},"58.29":{t:"Number 类型",p:`Number类型使用 IEEE 754格式表示正式和浮点数(在某些语言中也叫双精度值)、不同的数值类型相应地也有不同的数值字面量格式。
`,l:"JavaScript/第3章-语言基础.html#number-类型",a:"number-类型"},"58.30":{t:"数值字面量格式",p:`十进制： 直接写出来即可
八进制： 对于八进制字面量，第一个数字必须是零(0)，然后是相应的八进制数字(0-7)。如果字面量中包含的数字超出了应有的范围，就回忽略前缀的 0，后面的数字被当做十进制
十 ...`,l:"JavaScript/第3章-语言基础.html#数值字面量格式",a:"数值字面量格式"},"58.31":{t:"浮点值",p:`要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。
let floatNumber1 = 1.1
let floatNumber2 = 0 ...`,l:"JavaScript/第3章-语言基础.html#浮点值",a:"浮点值"},"58.32":{t:"值的范围",p:"ECMAScript可以保存的最小数值保存在Number.MIN_VALUE中，这个值多数浏览器是5e-324，可以保存的最小数值保存在Number.MAX_VALUE中，这个值多数浏览器是1.797 ...",l:"JavaScript/第3章-语言基础.html#值的范围",a:"值的范围"},"58.33":{t:"NaN",p:"有一个特殊的值叫&quot;NaN&quot;，意思是&quot;不是数值&quot;(Not a Number)，用于表示本来要返回数值的操作失败了(而不是抛出错误)。在 ECMAScript 中， ...",l:"JavaScript/第3章-语言基础.html#nan",a:"nan"},"58.34":{t:"数值转换",p:`有 3 个函数可以将非数值转换为数值：Number()、parseInt()、parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转化为数值。
Numb ...`,l:"JavaScript/第3章-语言基础.html#数值转换",a:"数值转换"},"58.35":{t:"String 类型",p:"String(字符串)数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号(&quot;)、单引号(')或反引号(`)标示。必须成对出现，否则会导致语法错误。\n",l:"JavaScript/第3章-语言基础.html#string-类型",a:"string-类型"},"58.36":{t:"字符字面量",p:`字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符



字面量
含义




\\n
换行


\\t
制表


\\b
退格


\\r
回车


\\f
换页


\\\\
反斜杠()

 ...`,l:"JavaScript/第3章-语言基础.html#字符字面量",a:"字符字面量"},"58.37":{t:"字符串的特点",p:`字符串是不可变的，意思就是一旦创建，他们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量。
`,l:"JavaScript/第3章-语言基础.html#字符串的特点",a:"字符串的特点"},"58.38":{t:"转换为字符串",p:`有两种方式将一个值转换为字符串。一个是toString()，一个是直接在后面加空串&quot;&quot;
数值调用toString()时，可以传入一个参数作为底数，默认情况下返回的是十进制
`,l:"JavaScript/第3章-语言基础.html#转换为字符串",a:"转换为字符串"},"58.39":{t:"模板字面量",p:`ECMAScript 6新增了模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以夸行定义字符串。
let str = \`first line
second line\`
 ...`,l:"JavaScript/第3章-语言基础.html#模板字面量",a:"模板字面量"},"58.40":{t:"字符串插值",p:"模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个 值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的 是字符串 ...",l:"JavaScript/第3章-语言基础.html#字符串插值",a:"字符串插值"},"58.41":{t:"模板字面量标签函数",p:`模板字面量也支持定义标签函数(tag function)，而通过标签函数可以自定义插值行为。标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。
标签函数本身是一个常规函数，通过前缀到模板 ...`,l:"JavaScript/第3章-语言基础.html#模板字面量标签函数",a:"模板字面量标签函数"},"58.42":{t:"原始字符串",p:`使用模板字面量也可以直接获取原始的模板字面量内容(如换行符或 Unicode 字符)，而不是被转 换后的字符表示。为此，可以使用默认的 String.raw 标签函数:
`,l:"JavaScript/第3章-语言基础.html#原始字符串",a:"原始字符串"},"58.43":{t:"Symbol 类型",p:`Symbol(符号)是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的风险。
`,l:"JavaScript/第3章-语言基础.html#symbol-类型",a:"symbol-类型"},"58.44":{t:"符号的基本使用",p:`符号需要使用Symbol()函数初始化，因为符号本身是基本类型，所以typeof操作符对符号返回symbol
let symbol = Symbol()

注意： Symbol()函数不能与 new  ...`,l:"JavaScript/第3章-语言基础.html#符号的基本使用",a:"符号的基本使用"},"58.45":{t:"使用全局符号注册表",p:`如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。
Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全 ...`,l:"JavaScript/第3章-语言基础.html#使用全局符号注册表",a:"使用全局符号注册表"},"58.46":{t:"使用符号作为属性",p:"凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和 Object.defineProperty()/Object.defineProperties()定义的属性。对象字 ...",l:"JavaScript/第3章-语言基础.html#使用符号作为属性",a:"使用符号作为属性"},"58.47":{t:"常用内置符号",p:"ECMAScript 6 也引入了一批常用内置符号(well-known symbol)，用于暴露语言内部行为，开发者 可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串 ...",l:"JavaScript/第3章-语言基础.html#常用内置符号",a:"常用内置符号"},"58.48":{t:"Symbol.asyncIterator",p:"",l:"JavaScript/第3章-语言基础.html#symbol-asynciterator",a:"symbol-asynciterator"},"58.49":{t:"Symbol.hasInstance",p:"",l:"JavaScript/第3章-语言基础.html#symbol-hasinstance",a:"symbol-hasinstance"},"58.50":{t:"Symbol.isConcatSpreadable",p:"",l:"JavaScript/第3章-语言基础.html#symbol-isconcatspreadable",a:"symbol-isconcatspreadable"},"58.51":{t:"Symbol.iterator",p:"",l:"JavaScript/第3章-语言基础.html#symbol-iterator",a:"symbol-iterator"},"58.52":{t:"Symbol.match",p:"",l:"JavaScript/第3章-语言基础.html#symbol-match",a:"symbol-match"},"58.53":{t:"Symbol.replace",p:"",l:"JavaScript/第3章-语言基础.html#symbol-replace",a:"symbol-replace"},"58.54":{t:"Symbol.search",p:"",l:"JavaScript/第3章-语言基础.html#symbol-search",a:"symbol-search"},"58.55":{t:"Symbol.species",p:"",l:"JavaScript/第3章-语言基础.html#symbol-species",a:"symbol-species"},"58.56":{t:"Symbol.split",p:"",l:"JavaScript/第3章-语言基础.html#symbol-split",a:"symbol-split"},"58.57":{t:"Symbol.toPrimitive",p:"",l:"JavaScript/第3章-语言基础.html#symbol-toprimitive",a:"symbol-toprimitive"},"58.58":{t:"Symbol.toStringTag",p:"",l:"JavaScript/第3章-语言基础.html#symbol-tostringtag",a:"symbol-tostringtag"},"58.59":{t:"Symbol.unscopables",p:`80 页
`,l:"JavaScript/第3章-语言基础.html#symbol-unscopables",a:"symbol-unscopables"},"58.60":{t:"Object 类型",p:`每个 Object 实例都有如下属性和方法：

constructor：用于创建当前对象的函数。
hasOwnProperty(propertyName)：用于判断当前对象实例(不是原型)上是否存在给 ...`,l:"JavaScript/第3章-语言基础.html#object-类型",a:"object-类型"},"58.61":{t:"操作符",p:"",l:"JavaScript/第3章-语言基础.html#操作符",a:"操作符"},"58.62":{t:"一元操作符",p:`只操作一个值的操作符叫一元操作符(unary operator)。一元操作符是 ECMAScript 中最简单的操作符。
`,l:"JavaScript/第3章-语言基础.html#一元操作符",a:"一元操作符"},"58.63":{t:"递增/递减操作符",p:`递增和递减操作符有两个版本：前缀版和后缀版。
两个版本的区别是后缀版的递增和递减在语句被求值后才发生。
这 2 对操作符可以用作于任何值，意思就是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。 ...`,l:"JavaScript/第3章-语言基础.html#递增-递减操作符",a:"递增-递减操作符"},"58.64":{t:"一元加和减",p:`一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号(+)表示，放在变量前头，对数值没有任何影响。
一元减由一个减号(-)表示，放在变 ...`,l:"JavaScript/第3章-语言基础.html#一元加和减",a:"一元加和减"},"58.65":{t:"位操作符",p:`正值以真正的二进制格式存储，即 31 位中的每一位都代表 2 的幂。第一位(称为第 0 位)表示 20，第二位表示 21，依此类推。
负值以一种称为二补数(或补码)的二进制编码存储。一个数值的二补数通 ...`,l:"JavaScript/第3章-语言基础.html#位操作符",a:"位操作符"},"58.66":{t:"按位非",p:`按位非操作符用波浪符(~)表示，它的作用是返回数值的一补数。
let num1 = 25 // 二进制00000000000000000000000000011001
let num2 = ~num1 ...`,l:"JavaScript/第3章-语言基础.html#按位非",a:"按位非"},"58.67":{t:"按位与",p:`按位与操作符用和号(&amp;)表示，有两个操作数。本质上，按位与就是将两个数的每一个位对齐， 然后基于真值表中的规则，对每一位执行相应的与操作。



第一个数值的位
第二个数值的位
结果




 ...`,l:"JavaScript/第3章-语言基础.html#按位与",a:"按位与"},"58.68":{t:"按位或",p:`按位或操作符用管道符(|)表示，同样有两个操作数。按位或遵循如下真值表:



第一个数值的位
第二个数值的位
结果




1
1
1


1
0



0
1
1


0
0
0



按位异或
 ...`,l:"JavaScript/第3章-语言基础.html#按位或",a:"按位或"},"58.69":{t:"左移",p:`左移操作符用两个小于号(&lt;&lt;)表示，会按照指定的位数将数值的所有位向左移动。
`,l:"JavaScript/第3章-语言基础.html#左移",a:"左移"},"58.70":{t:"有符号右移",p:`有符号右移由两个大于号(&gt;&gt;)表示，会将数值的所有 32 位都向右移，同时保留符号(正或负)。 有符号右移实际上是左移的逆运算。
`,l:"JavaScript/第3章-语言基础.html#有符号右移",a:"有符号右移"},"58.71":{t:"无符号右移",p:`无符号右移用 3 个大于号表示(&gt;&gt;&gt;)，会将数值的所有 32 位都向右移。对于正数，无符号右移与 有符号右移结果相同。
对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会 ...`,l:"JavaScript/第3章-语言基础.html#无符号右移",a:"无符号右移"},"58.72":{t:"布尔操作符",p:"",l:"JavaScript/第3章-语言基础.html#布尔操作符",a:"布尔操作符"},"58.73":{t:"逻辑非",p:`逻辑非操作符由一个叹号(!)表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布 尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。
逻辑非操作 ...`,l:"JavaScript/第3章-语言基础.html#逻辑非",a:"逻辑非"},"58.74":{t:"逻辑与",p:`逻辑与操作符由两个和号(&amp;&amp;)表示，应用到两个值。
逻辑与操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
 ...`,l:"JavaScript/第3章-语言基础.html#逻辑与",a:"逻辑与"},"58.75":{t:"逻辑或",p:`逻辑或操作符由两个管道符(||)表示
逻辑或操作符遵循如下真值表



第一个操作数
第二个操作数
结果




true
true
true


true
false
true


false
tr ...`,l:"JavaScript/第3章-语言基础.html#逻辑或",a:"逻辑或"},"58.76":{t:"乘性操作符",p:`ECMAScript 定义了 3 个乘性操作符:乘法、除法和取模
`,l:"JavaScript/第3章-语言基础.html#乘性操作符",a:"乘性操作符"},"58.77":{t:"乘法操作符",p:`乘法操作符由一个星号(*)表示，可以用于计算两个数值的乘积。
特殊值处理
1. 如果操作数都是数值，则执行常规的乘法运算，即两个正值相乘是正值，两个负值相乘也是正值，正负符号不同的值相乘得到负值。如果 ...`,l:"JavaScript/第3章-语言基础.html#乘法操作符",a:"乘法操作符"},"58.78":{t:"除法运算符",p:`除法操作符由一个斜杠(/)表示，可以用于计算第一个操作数除以第二个操作数的商
特殊值处理
1. 如果操作数都是数值，则执行常规的除法运算，即两个正值相除是正值，两个负值相除也是正值，符号不同的值相除得 ...`,l:"JavaScript/第3章-语言基础.html#除法运算符",a:"除法运算符"},"58.79":{t:"取模运算符",p:`取模(余数)操作符由一个百分比符号(%)表示
特殊值处理

如果操作数是数值，则执行常规除法运算，返回余数。
如果被除数是无限值，除数是有限值，则返回 NaN。
如果被除数是有限值，除数是 0，则返回 ...`,l:"JavaScript/第3章-语言基础.html#取模运算符",a:"取模运算符"},"58.80":{t:"指数操作符",p:`ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**
不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作
let square ...`,l:"JavaScript/第3章-语言基础.html#指数操作符",a:"指数操作符"},"58.81":{t:"加性操作符",p:`加性操作符，即加法和减法操作符
`,l:"JavaScript/第3章-语言基础.html#加性操作符",a:"加性操作符"},"58.82":{t:"加法操作符",p:`加法操作符(+)用于求两个数的和
两个操作数都是数值执行规则

如果有任一操作数是 NaN，则返回 NaN;
如果是 Infinity 加 Infinity，则返回 Infinity;
如果是-Inf ...`,l:"JavaScript/第3章-语言基础.html#加法操作符",a:"加法操作符"},"58.83":{t:"减法操作符",p:`减法操作符(-)也是使用很频繁的一种操作符。
计算规则

如果两个操作数都是数值，则执行数学减法运算并返回结果。
如果有任一操作数是 NaN，则返回 NaN。
如果是 Infinity 减 Infin ...`,l:"JavaScript/第3章-语言基础.html#减法操作符",a:"减法操作符"},"58.84":{t:"关系操作符",p:`关系操作符执行比较两个值的操作，包括小于(&lt;)、大于(&gt;)、小于等于(&lt;=)和大于等于(&gt;=)
执行规则

如果操作数都是数值，则执行数值比较。
如果操作数都是字符串，则逐个比 ...`,l:"JavaScript/第3章-语言基础.html#关系操作符",a:"关系操作符"},"58.85":{t:"相等操作符",p:`第一组是等于和不等于，它们在比较之前执行转换。第二组是全等和不全等，它们在比较之前不执行转换
`,l:"JavaScript/第3章-语言基础.html#相等操作符",a:"相等操作符"},"58.86":{t:"等于和不等于",p:"ECMAScript 中的等于操作符用两个等于号(==)表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号(!=)表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进 ...",l:"JavaScript/第3章-语言基础.html#等于和不等于",a:"等于和不等于"},"58.87":{t:"全等和不全等",p:`全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号(===)表示，只有两个操作数在不转换的前提下相等才返回 true
不全等操作符用一个叹号和两 ...`,l:"JavaScript/第3章-语言基础.html#全等和不全等",a:"全等和不全等"},"58.88":{t:"条件操作符",p:` variable = boolean_expression ? true_value : false_value;

上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expressi ...`,l:"JavaScript/第3章-语言基础.html#条件操作符",a:"条件操作符"},"58.89":{t:"赋值操作符",p:`简单赋值用等于号(=)表示，将右手边的值赋给左手边的变量
复合赋值操作符

乘后赋值(*=)
除后赋值(/=)
取模后赋值(%=)
加后赋值(+=)
减后赋值(-=)
左移后赋值(&lt;&lt;=) ...`,l:"JavaScript/第3章-语言基础.html#赋值操作符",a:"赋值操作符"},"58.90":{t:"逗号操作符",p:`逗号操作符可以用来在一条语句中执行多个操作，如下所示:
let num1 = 1,
  num2 = 2,
  num3 = 3

也可以使用逗号操作符来辅助 赋值。在赋值时使用逗号操作符分隔值，最终 ...`,l:"JavaScript/第3章-语言基础.html#逗号操作符",a:"逗号操作符"},"58.91":{t:"语句(后续整理)",p:`P98
`,l:"JavaScript/第3章-语言基础.html#语句-后续整理",a:"语句-后续整理"},"59.0":{t:"扩展路由的Meta",p:`

项目根目录下创建 typing.d.ts 文件


加入以下内容
import 'vue-router'

declare module 'vue-router' {
  interface Ro ...`,l:"Vue+TS/TS 扩展路由meta.html",a:"扩展路由的meta"},"60.0":{t:"Pinia 缓存持久化",p:"",l:"Vue插件/Pinia 缓存持久化.html",a:"pinia-缓存持久化"},"60.1":{t:"一、安装pinia-plugin-persistedstate",p:`
pnpm : pnpm i pinia-plugin-persistedstate
npm : npm i pinia-plugin-persistedstate
yarn : yarn add p ...`,l:"Vue插件/Pinia 缓存持久化.html#一、安装pinia-plugin-persistedstate",a:"一、安装pinia-plugin-persistedstate"},"60.2":{t:"二、在 main.ts 中添加",p:`import { createPinia } from 'pinia'
import piniaPluginPersistedstate from 'pinia-plugin-persistedsta ...`,l:"Vue插件/Pinia 缓存持久化.html#二、在-main-ts-中添加",a:"二、在-main-ts-中添加"},"60.3":{t:"三、在仓库中添加配置项",p:`defineStore的第二个参数中配置{persist:true}来开启数据持久化
import { defineStore } from 'pinia'

export const useStor ...`,l:"Vue插件/Pinia 缓存持久化.html#三、在仓库中添加配置项",a:"三、在仓库中添加配置项"},"60.4":{t:"四、配置",p:`该插件的默认配置如下:

使用 localStorage 进行存储
store.$id 作为 storage 默认的 key
使用 JSON.stringify/JSON.parse 进行序列化/反序 ...`,l:"Vue插件/Pinia 缓存持久化.html#四、配置",a:"四、配置"},"60.5":{t:"key",p:`
类型：string
默认值：store.$id

Key 用于引用 storage 中的数据
import { defineStore } from 'pinia'

export const us ...`,l:"Vue插件/Pinia 缓存持久化.html#key",a:"key"},"60.6":{t:"storage",p:`
类型：StorageLike
默认值：localStorage

将数据持久化到 storage 中，必须具有 getItem: (key: string) =&gt; string | null  ...`,l:"Vue插件/Pinia 缓存持久化.html#storage",a:"storage"},"60.7":{t:"paths",p:`
类型：string[]
默认值：undefined

用于指定 state 中哪些数据需要被持久化。[] 表示不持久化任何状态，undefined 或 null 表示持久化整个 state。
imp ...`,l:"Vue插件/Pinia 缓存持久化.html#paths",a:"paths"},"60.8":{t:"serializer",p:`
类型：Serializer
默认值：JSON.stringify/JSON.parse

该配置能够指定持久化时所使用的序列化方法，以及恢复 Store 时的反序列化方法。另外，必须具有 seria ...`,l:"Vue插件/Pinia 缓存持久化.html#serializer",a:"serializer"},"60.9":{t:"beforeRestore",p:`
类型：(context: PiniaPluginContext) =&gt; void
默认值：undefined

该 hook 将在从 storage 中恢复数据之前触发，并且它可以访问整个 P ...`,l:"Vue插件/Pinia 缓存持久化.html#beforerestore",a:"beforerestore"},"60.10":{t:"afterRestore",p:`
类型：(context: PiniaPluginContext) =&gt; void
默认值：undefined

该 hook 将在从 storage 中恢复数据之后触发，并且它可以访问整个 P ...`,l:"Vue插件/Pinia 缓存持久化.html#afterrestore",a:"afterrestore"},"60.11":{t:"debug",p:`
类型：boolean
默认值：false

当设置为 true 时，持久化/恢复 Store 时可能发生的任何错误都将使用 console.error 输出。
`,l:"Vue插件/Pinia 缓存持久化.html#debug",a:"debug"},"61.0":{t:"批量导入 SVG",p:"",l:"Vue插件/批量导入svg.html",a:"批量导入-svg"},"61.1":{t:"一-安装插件",p:`npm i vite-plugin-svg-icons -D
// 或者
yarn add vite-plugin-svg-icons -D

`,l:"Vue插件/批量导入svg.html#一-安装插件",a:"一-安装插件"},"61.2":{t:"二、在 vite.config.ts中配置",p:`iconDirs:iconDirs是保存 svg 图片的文件夹，可以填写多个
&lt;img src=&quot;https://gitee.com/xuchp/typora-pics/raw/mas ...`,l:"Vue插件/批量导入svg.html#二、在-vite-config-ts中配置",a:"二、在-vite-config-ts中配置"},"61.3":{t:"三、封装 svg 组件",p:`&lt;template&gt;
  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot;&gt;
    &lt;use  ...`,l:"Vue插件/批量导入svg.html#三、封装-svg-组件",a:"三、封装-svg-组件"},"61.4":{t:"四、配置全局组件并引入插件",p:`
import { type App } from 'vue'
import SvgIcon from '@/components/SvgIcon/index.vue' // svg componen ...`,l:"Vue插件/批量导入svg.html#四、配置全局组件并引入插件",a:"四、配置全局组件并引入插件"},"61.5":{t:"五、在 main.ts 中引入",p:`import { useSvgIcon } from '@/icons'
useSvgIcon(app)


`,l:"Vue插件/批量导入svg.html#五、在-main-ts-中引入",a:"五、在-main-ts-中引入"},"62.0":{t:"数据类型",p:"",l:"basic/JavaScript 核心原理精讲.html",a:"数据类型"},"62.1":{t:"数据类型分类",p:"基础数据类型：Undefined、Null、Boolean、String、Number、Symbol、BigInt引用数据类型： Object(Array、RegExp、Date、Math、Funct ...",l:"basic/JavaScript 核心原理精讲.html#数据类型分类",a:"数据类型分类"},"62.2":{t:"数据类型检测",p:`

typeof


instanceof
typeof 和 instanceof 的差异

instanceof 可以准确地判断复杂引用数据的类型，但是不能正确判断基础数据类型
而 typeof 也 ...`,l:"basic/JavaScript 核心原理精讲.html#数据类型检测",a:"数据类型检测"},"62.3":{t:"数据类型转换",p:`

强制类型转换
Number()、parseInt()、parseFloat()、toString()、String()、Boolean()


隐式类型转换

逻辑运算符&amp;&amp;、|| ...`,l:"basic/JavaScript 核心原理精讲.html#数据类型转换",a:"数据类型转换"},"62.4":{t:"浅拷贝和深拷贝",p:"",l:"basic/JavaScript 核心原理精讲.html#浅拷贝和深拷贝",a:"浅拷贝和深拷贝"},"62.5":{t:"浅拷贝",p:"浅拷贝： 自己创建一个新的对象，来接受你要重新复制或引用的对象值。如果对象属性是基本的数据类型，复制的就是基本类型的值给新对象，但如果属性是引用数据类型，复制的就是内存中的地址，如果其中一个对象改变了 ...",l:"basic/JavaScript 核心原理精讲.html#浅拷贝",a:"浅拷贝"},"62.6":{t:"深拷贝",p:`浅拷贝只是创建了一个新的对象，复制了原有对象的基本类型的值。
对于复杂引用数据类型，其在堆内存中完全开辟了一块内存地址，并将原有的对象完全复制过来存放。
深拷贝原理
将一个对象从内存中完整地拷贝出来一 ...`,l:"basic/JavaScript 核心原理精讲.html#深拷贝",a:"深拷贝"},"62.7":{t:"继承",p:`继承是面向对象的，使用这种方式我们可以更好地复用以前的开发代码，缩短开发的周期、提升开发效率
继承可以使得子类别具有父类的各种方法和属性
`,l:"basic/JavaScript 核心原理精讲.html#继承",a:"继承"},"62.8":{t:"常见的实现继承的方法",p:`一、原型链继承
原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例
1. 每一个构造函数都有一个原型对象
2. 原型对象又包含一个指向构造函数的指针
3. 而实例则包含一个原型对象的指 ...`,l:"basic/JavaScript 核心原理精讲.html#常见的实现继承的方法",a:"常见的实现继承的方法"},"62.9":{t:"如何实现new、apply、call、bind的底层逻辑",p:`JavaScript中的apply、call和bind方法是前端代码开发中相当重要的概念，并且与this的指向密切相关
new原理介绍
new 关键词的主要作用，就是指向一个构造函数，返回一个实例对象 ...`,l:"basic/JavaScript 核心原理精讲.html#如何实现new、apply、call、bind的底层逻辑",a:"如何实现new、apply、call、bind的底层逻辑"},"62.10":{t:"闭包",p:`JavaScript 的作用域： 指变量能够被访问到的范围
`,l:"basic/JavaScript 核心原理精讲.html#闭包",a:"闭包"},"62.11":{t:"闭包的定义",p:`红宝书： 闭包是指有权访问另外一个函数作用域中的变量的函数
MDN： 一个函数和对其周围状态的引用捆绑在一起(或者说函数被引用包围)，这样的组合就是闭包。也就是说，闭包让你可以在一个内层函数访问到起外 ...`,l:"basic/JavaScript 核心原理精讲.html#闭包的定义",a:"闭包的定义"},"62.12":{t:"闭包产生的原因",p:`作用域链的基本概念： 当访问一个变量时，代码解释器会首先在当前的作用域查找，如果没找到，就去腹肌作用域查找，直到找到该变量或者不存在父级作用域中。
闭包产生的本质就是当前环境中存在指向父级作用域的引用 ...`,l:"basic/JavaScript 核心原理精讲.html#闭包产生的原因",a:"闭包产生的原因"},"62.13":{t:"闭包的表现形式",p:`
返回一个函数
在定时器、时间监听、Ajax 请求、Web Workers 或者任何异步中，只要使用了回调函数，实际上就是在使用闭包
作为函数参数传递的形式
IIFE(立即执行函数)，创建了闭包，保存 ...`,l:"basic/JavaScript 核心原理精讲.html#闭包的表现形式",a:"闭包的表现形式"},"62.14":{t:"JSON.stringify",p:`JSON.stringify是日常开发中经常用到的 JSON 对象中的方法
JSON.parse
JSON.parse 方法用来解析 JSON 字符串，构造有字符串描述的 JavaScript 值或对 ...`,l:"basic/JavaScript 核心原理精讲.html#json-stringify",a:"json-stringify"},"62.15":{t:"数组",p:"",l:"basic/JavaScript 核心原理精讲.html#数组",a:"数组"},"62.16":{t:"Array 的构造器",p:`Array 构造器用于创建一个新的数组，通常推荐使用对象字面量的方式创建一个数组
new Array
new Array(arg1,arg2...)参数长度为0 或长度大于等于 2 时，传入的参数将按 ...`,l:"basic/JavaScript 核心原理精讲.html#array-的构造器",a:"array-的构造器"},"62.17":{t:"Array 的判断",p:`Array.isArray
用来判断一个变量是否为数组类型
`,l:"basic/JavaScript 核心原理精讲.html#array-的判断",a:"array-的判断"},"62.18":{t:"Array 的方法",p:"改变自身的方法：pop、push、reverse、shift、sort、splice、unshift、以及两个 ES6 新增的方法 copyWithin和 fill不改变自身的方法：concat、jo ...",l:"basic/JavaScript 核心原理精讲.html#array-的方法",a:"array-的方法"},"62.19":{t:"数组扁平化",p:`数组的扁平化其实就是讲一个嵌套多层的数组 array(嵌套可以是任何层数)转化为只有一层的数组
扁平化实现方法


普通的递归实现
通过循环递归的方式，一项一项地去遍历，如果每一项还是数组，那么就继续 ...`,l:"basic/JavaScript 核心原理精讲.html#数组扁平化",a:"数组扁平化"},"62.20":{t:" ",p:"",l:"basic/JavaScript 核心原理精讲.html#",a:""},"62.21":{t:"数组排序",p:`时间复杂度： 说的更多地是通过 O(nlogn)以及 O(n)等来衡量，其实大多数时候我们对此并未建立形象的认知
空间复杂度： 对一个算法在运行过程中临时占用存储空间大小的度量
`,l:"basic/JavaScript 核心原理精讲.html#数组排序",a:"数组排序"},"62.22":{t:" ",p:"",l:"basic/JavaScript 核心原理精讲.html#",a:""},"62.23":{t:"排序分类",p:`比较类排序： 通过比较来决定元素之间的相对次序，其时间复杂度不能突破 O(nlogn)，因此也成为非线性时间比较类排序。
非比较类排序： 不通过比较来决定元素之间的相对次序，它可以突破基于比较排序的时 ...`,l:"basic/JavaScript 核心原理精讲.html#排序分类",a:"排序分类"},"62.24":{t:"sort排序",p:`通过 sort 方法也可以实现数组的排序，默认排序顺序是先将元素转换为字符串，然后再进行排序
语法是arr.sort([compareFunction])
compareFunction

如果 co ...`,l:"basic/JavaScript 核心原理精讲.html#sort排序",a:"sort排序"},"63.0":{t:"# CSS",p:"",l:"basic/css.html",a:"css"},"63.1":{t:"介绍一下 CSS 的盒子模型",p:`CSS 的盒子模型有哪些:标准盒子模型、IE 盒子模型
CSS 盒子模型的区别
	标准盒子模型:	margin、border、padding、content
	IE 盒子模型: margin、cont ...`,l:"basic/css.html#介绍一下-css-的盒子模型",a:"介绍一下-css-的盒子模型"},"63.2":{t:"line-height 和 height 的区别?",p:`line-height: 是每一行文字的高, 如果文字换行,则整个盒子的高度会增大(行数*行高)
height: 是一个死值, 就是这个盒子的高度。

`,l:"basic/css.html#line-height-和-height-的区别",a:"line-height-和-height-的区别"},"63.3":{t:"CSS 选字符有哪些？哪些属性可以继承？",p:`CSS 选择符:
通配(*)
id 选择器(#)
类选择器(.)
标签选择器(div p h1)
相邻选择器(+)
后代(子元素)选择器(ul li)
子元素选择器(&gt;)
属性选择器(a[hre ...`,l:"basic/css.html#css-选字符有哪些-哪些属性可以继承",a:"css-选字符有哪些-哪些属性可以继承"},"63.4":{t:"CSS 优先算法如何计算？",p:`优先级比较:!important &gt; 内联样式 &gt; id &gt; class &gt; 标签 &gt; 通配

CSS 权重计算:
第一: 内联样式 style 	权重值:1000
第二 ...`,l:"basic/css.html#css-优先算法如何计算",a:"css-优先算法如何计算"},"63.5":{t:"用 CSS 画一个三角形?",p:`用边框画(border)
&lt;html&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;

 ...`,l:"basic/css.html#用-css-画一个三角形",a:"用-css-画一个三角形"},"63.6":{t:"一个盒子不给宽度和高度如何实现水平垂直居中?",p:`&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;
&lt;/di ...`,l:"basic/css.html#一个盒子不给宽度和高度如何实现水平垂直居中",a:"一个盒子不给宽度和高度如何实现水平垂直居中"},"63.7":{t:"display 有哪些值？说说他们的作用？",p:`


值
描述




none
此元素不会被显示


block
此元素将显示为块元素, 此元素前后会带有换行符


inline
默认, 此元素会被显示为内联元素, 元素前后没有换行符


inl ...`,l:"basic/css.html#display-有哪些值-说说他们的作用",a:"display-有哪些值-说说他们的作用"},"63.8":{t:"对 BFC(块级格式化上下文:Block Formatting Context)的理解？",p:`BFC 就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。

了解 BFC： 块级格式化上下文
BFC 的原则：一个元素具有 BFC，那么内部元素再怎么弄，都不会影响到外面的元素
如 ...`,l:"basic/css.html#对-bfc-块级格式化上下文-block-formatting-context-的理解",a:"对-bfc-块级格式化上下文-block-formatting-context-的理解"},"63.9":{t:"清除浮动有哪些方式?",p:`方式一：触发 BFC
overflow: hidden

方式二：创建一个盒子，添加样式
div {
  clear: both;
}

方式三：创建一个虚拟标签 after（最常用）
div:aft ...`,l:"basic/css.html#清除浮动有哪些方式",a:"清除浮动有哪些方式"},"63.10":{t:"在网页中应该使用奇数还是偶数的字体大小？为什么呢？",p:`偶数。让文字在浏览器上表现的更好看

说明：UI 给前端设计图一般都是偶数，这样不管是布局也好，转换 px 也好，方便一点

`,l:"basic/css.html#在网页中应该使用奇数还是偶数的字体大小-为什么呢",a:"在网页中应该使用奇数还是偶数的字体大小-为什么呢"},"63.11":{t:"position 有几种定位？分别是根据什么定位的？",p:`
static：默认值，没有定位
fixed：固定定位，相对于浏览器窗口进行定位
relative：相对定位，相对于自身定位，不脱离文档流
absolute：绝对定位，相对于第一个有 relative ...`,l:"basic/css.html#position-有几种定位-分别是根据什么定位的",a:"position-有几种定位-分别是根据什么定位的"},"63.12":{t:"写一个左中右布局占满屏幕，其中左右两块固定 200px，中间自适应宽，要求先加载中间块，请写出结构及样式。",p:`双飞翼布局
&lt;html&gt;
  &lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;div class=&q ...`,l:"basic/css.html#写一个左中右布局占满屏幕-其中左右两块固定-200px-中间自适应宽-要求先加载中间块-请写出结构及样式。",a:"写一个左中右布局占满屏幕-其中左右两块固定-200px-中间自适应宽-要求先加载中间块-请写出结构及样式。"},"63.13":{t:"什么是 CSS reset？",p:`reset.css 是一个 css 文件，用来重置 css 样式。
Normalize.css 为了增强跨浏览器渲染的一致性，我们使用了 normalize.css，这是由 Nicolas Galla ...`,l:"basic/css.html#什么是-css-reset",a:"什么是-css-reset"},"63.14":{t:"css sprite 是什么？有什么优缺点？",p:`

是什么
把多个小图标合并成一张大图片，又称精灵图


优缺点
优点：减少了 http 请求的次数，提升了性能
缺点：维护比较差（例如图片位置进行调整或者内容宽高修改，都会造成维护问题）


`,l:"basic/css.html#css-sprite-是什么-有什么优缺点",a:"css-sprite-是什么-有什么优缺点"},"63.15":{t:"display:none 和 visibility:hidden 的区别？",p:`


区别
display:none
visibility:hidden




占用位置区别
是不占位置的
虽然隐藏了，但是占用位置


重绘和回流的问题
重绘并回流
只重绘不回流




产生回流 ...`,l:"basic/css.html#display-none-和-visibility-hidden-的区别",a:"display-none-和-visibility-hidden-的区别"},"63.16":{t:"opacity 和 rgba 的区别？",p:`共同性：实现透明效果



区别
opacity
rgba




取值范围
取值范围 0-1 之间，0 表示完全透明，1 表示不透明
R 表示红色，G 表示绿色，B 表示蓝色，取值可以在正整数或者百 ...`,l:"basic/css.html#opacity-和-rgba-的区别",a:"opacity-和-rgba-的区别"},"63.17":{t:"::before 和 :after 中双冒号和单冒号有什么区别?解释一下这两个伪元素的作用?",p:`

区别
一个冒号(:)是伪类, 两个冒号(::)是伪元素	====&gt;是为了做区分


是什么?作用
before 在元素之前、 after 在元素之后
作用: 清除浮动、样式布局上也有作用

 ...`,l:"basic/css.html#before-和-after-中双冒号和单冒号有什么区别-解释一下这两个伪元素的作用",a:"before-和-after-中双冒号和单冒号有什么区别-解释一下这两个伪元素的作用"},"63.18":{t:"怎么让 chrome 支持小于 12px 的文字",p:`Chorme 浏览器默认字体大小是 16px, 每个浏览器默认字体大小不一定一样
解决办法:
{
  --webkit-transform: scale(0.75)
}

`,l:"basic/css.html#怎么让-chrome-支持小于-12px-的文字",a:"怎么让-chrome-支持小于-12px-的文字"},"63.19":{t:"rem 和 em 的 区别",p:`相对于 font-size
em 是针对于父元素的 font-size
rem 是针对于根(html)元素的 font-size
`,l:"basic/css.html#rem-和-em-的-区别",a:"rem-和-em-的-区别"},"63.20":{t:"webkit 表单输入框 placeholder 的颜色值能改变吗",p:`input::-webkit-input-placeholder{
  color: red
}

`,l:"basic/css.html#webkit-表单输入框-placeholder-的颜色值能改变吗",a:"webkit-表单输入框-placeholder-的颜色值能改变吗"},"63.21":{t:"响应式",p:`

是什么?
一个 URL 可以响应多端


语法结构
@media only screen and (max-width: 1000px){
  
}

only: 可以排除不支持媒体查询的浏览器
 ...`,l:"basic/css.html#响应式",a:"响应式"},"63.22":{t:"布局方案",p:`

什么情况下采用响应式布局?
数据不是特别多, 用户量不是特别大, 纯展示类的项目适合响应式布局
例如: 公司的官网, 专题页面
特别追求性能的项目,不太适合响应式, 因为如果添加了很多的响应式,  ...`,l:"basic/css.html#布局方案",a:"布局方案"},"65.0":{t:"# HTML",p:"",l:"basic/html.html",a:"html"},"65.1":{t:"行内元素有哪些?块级元素有哪些?空(void)元素有哪些?",p:`行内元素:span img input......
块级元素:div footer header section p h1-h6...
空元素:br hr...

元素之间的转换问题
通过 displ ...`,l:"basic/html.html#行内元素有哪些-块级元素有哪些-空-void-元素有哪些",a:"行内元素有哪些-块级元素有哪些-空-void-元素有哪些"},"65.2":{t:"页面导入样式时, 使用 link 和@import 有什么区别?",p:`
区别一: link 现有, 后有@import, 所以在兼容性上 link 比@import 好
区别二: link 和@import 加载顺序有区别。浏览器先加载标签 link, 后加载@impo ...`,l:"basic/html.html#页面导入样式时-使用-link-和-import-有什么区别",a:"页面导入样式时-使用-link-和-import-有什么区别"},"65.3":{t:"title 和 h1 的区别?b 和 strong 的区别?i 和 em 的区别?",p:`title 和 h1 的区别:
定义:
title:title 概括了网站信息, 可以告诉搜索引擎或者用户关于这个网站的内容主题是什么
h1:文章主题内容, 告诉蜘蛛我们的网站内容最主要是什么
区别: ...`,l:"basic/html.html#title-和-h1-的区别-b-和-strong-的区别-i-和-em-的区别",a:"title-和-h1-的区别-b-和-strong-的区别-i-和-em-的区别"},"65.4":{t:"img 标签的 title 和 alt 有什么区别?",p:`
区别一
title: 鼠标移入到图片显示的值
alt: 图片无法加载时显示的值
区别二
在 SEO 的层面上, 蜘蛛抓取不到图片的内容, 所以前端在写 img 标签的时候,为了增加 SEO 效果要加 ...`,l:"basic/html.html#img-标签的-title-和-alt-有什么区别",a:"img-标签的-title-和-alt-有什么区别"},"65.5":{t:"png、jpg、gif 这些图片格式解释一下, 分别什么时候用?",p:`
png: 无损压缩, 尺寸体积要比 jpg/jpeg 的大。适合做小图标
jpg: 采用压缩算法, 有一点失真, 比 png 体积小。适合做 banner 等中大图片
gif: 一般是做动图的。
w ...`,l:"basic/html.html#png、jpg、gif-这些图片格式解释一下-分别什么时候用",a:"png、jpg、gif-这些图片格式解释一下-分别什么时候用"},"65.6":{t:"什么是语义化标签",p:`header、footer、section 等

易读性和维护性更好
SEO 成分会更好, 蜘蛛抓取更好
IE8 不兼容 HTML5 标签的.解决:可以通过 html5shiv.js 去处理


`,l:"basic/html.html#什么是语义化标签",a:"什么是语义化标签"},"66.0":{t:"# iOS 兼容问题",p:"",l:"basic/iOS 兼容问题.html",a:"ios-兼容问题"},"66.1":{t:"如何关闭 iOS 键盘首字母自动大小写",p:` &lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt;

`,l:"basic/iOS 兼容问题.html#如何关闭-ios-键盘首字母自动大小写",a:"如何关闭-ios-键盘首字母自动大小写"},"66.2":{t:"iOS 系统中元素被触摸时产生的半透明遮罩怎么去掉",p:`a, button, input, textarea {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

`,l:"basic/iOS 兼容问题.html#ios-系统中元素被触摸时产生的半透明遮罩怎么去掉",a:"ios-系统中元素被触摸时产生的半透明遮罩怎么去掉"},"66.3":{t:"禁止 iOS 长按时不触发系统的菜单,禁止 iOS&android 长按时下载图片",p:"",l:"basic/iOS 兼容问题.html#禁止-ios-长按时不触发系统的菜单-禁止-ios-android-长按时下载图片",a:"禁止-ios-长按时不触发系统的菜单-禁止-ios-android-长按时下载图片"},"66.4":{t:"禁止 iOS 长按触发系统菜单",p:`html, body {
  touch-callout: none;
  -webkit-touch-callout: none;
}

`,l:"basic/iOS 兼容问题.html#禁止-ios-长按触发系统菜单",a:"禁止-ios-长按触发系统菜单"},"66.5":{t:"禁止下载图片",p:`img {
  user-select: none;
  -webkit-user-select: none;
}

`,l:"basic/iOS 兼容问题.html#禁止下载图片",a:"禁止下载图片"},"66.6":{t:"禁止 iOS 和 android 用户选中文字",p:`text, textarea {
  user-select: none;
  -webkit-user-select: none;
}

`,l:"basic/iOS 兼容问题.html#禁止-ios-和-android-用户选中文字",a:"禁止-ios-和-android-用户选中文字"},"67.0":{t:"# JS",p:"",l:"basic/js.html",a:"js"},"67.1":{t:"延迟加载 JS 有哪些方式？",p:`延迟加载: async defer
例如&lt;script async type=&quot;text/javascript&quot; src=&quot;*.js&quot;/&gt;
defe ...`,l:"basic/js.html#延迟加载-js-有哪些方式",a:"延迟加载-js-有哪些方式"},"67.2":{t:"JS 数据类型有哪些？",p:`基本类型: string、number、boolean、undefined、null、 symbol、bigint
引用类型: object
字符串和其他类型相加, 变成链接的形式
NaN 是一个数值 ...`,l:"basic/js.html#js-数据类型有哪些",a:"js-数据类型有哪些"},"67.3":{t:"null 和 undefined 的区别",p:`
作者在设计 js 时先设计的 null(原因: 最初设计 js 的时候借鉴了 java 语言）
null 会被隐式转化成 0, 很不容易发现错误
现有 null 后有 undefined, 出来 u ...`,l:"basic/js.html#null-和-undefined-的区别",a:"null-和-undefined-的区别"},"67.4":{t:"== 和 === 有什么不同",p:`== : 比较的是值
string == number || boolean || number...都会隐式转换
通过 valueOf 转换(valueOf() 方法通常由 JavaScript 在 ...`,l:"basic/js.html#和-有什么不同",a:"和-有什么不同"},"67.5":{t:"JS 微任务和宏任务",p:`

js 是单线程的语言


js 代码执行流程: 同步执行完 =&gt; 事件循环
同步执行完了, 才会执行事件循环的内容
进入事件循环: 请求、定时器、事件......


事件循环包含【宏任务、 ...`,l:"basic/js.html#js-微任务和宏任务",a:"js-微任务和宏任务"},"67.6":{t:"JS 作用域",p:`
除了函数外, JS 没有块级作用域。
作用域链: 内部可以访问外部的变量, 但是外部不能访问内部的变量
注意: 如果内部有, 优先查找内部; 如果内部没有就查找外部的
注意声明变量是用 var 还是 ...`,l:"basic/js.html#js-作用域",a:"js-作用域"},"67.7":{t:"面试的时候怎么看？",p:`
本层作用域有没有此变量【注意变量提升】
注意: JS 除了函数外没有块级作用域
普通声明函数是不看写函数的顺序的

`,l:"basic/js.html#面试的时候怎么看",a:"面试的时候怎么看"},"67.8":{t:"考题 1",p:`function c() {
  var b = 1
  function a() {
    console.log(b) // undefined
    var b = 2
    consol ...`,l:"basic/js.html#考题-1",a:"考题-1"},"67.9":{t:"考题二",p:`var name = 'a'
;(function () {
  if (typeof name == 'undefined') {
    var name = 'b'
    console.lo ...`,l:"basic/js.html#考题二",a:"考题二"},"67.10":{t:"考题三",p:`function fun(a) {
  var a = 10
  function a() {}
  console.log(a)
}
fun(100)

输出:  10

`,l:"basic/js.html#考题三",a:"考题三"},"67.11":{t:"JS 对象",p:`JS 对象注意点:


对象是通过 new 操作符构建出来的, 所以对象之间不相等(除了引用外)


对象注意: 引用类型


对象的 key 都是字符串类型


对象如何找属性|方法
查找规则: 现 ...`,l:"basic/js.html#js-对象",a:"js-对象"},"67.12":{t:"考题一",p:`console.log([1, 2, 3] === [1, 2, 3]) // false

`,l:"basic/js.html#考题一",a:"考题一"},"67.13":{t:"考题二",p:`var obj1 = {
  a: 'hello'
}
var obj2 = obj1
obj2.a = 'world'
console.log(obj1) // {a:'world'}
;(func ...`,l:"basic/js.html#考题二",a:"考题二"},"67.14":{t:"考题三",p:`var a = {}
var b = {
  key: 'a'
}
var c = {
  key: 'c'
}
a[b] = '123'
a[c] = '456'
console.log(a[b]) ...`,l:"basic/js.html#考题三",a:"考题三"},"67.15":{t:"JS 作用域+this 指向+原型考题",p:"",l:"basic/js.html#js-作用域-this-指向-原型考题",a:"js-作用域-this-指向-原型考题"},"67.16":{t:"考题一",p:`function Foo() {
  getName = function () {
    console.log(1)
  }
  return this
}
Foo.getName = func ...`,l:"basic/js.html#考题一",a:"考题一"},"67.17":{t:"考题二",p:`var o = {
  a: 10,
  b: {
    fn: function () {
      console.log(this.a)
      console.log(this)
   ...`,l:"basic/js.html#考题二",a:"考题二"},"67.18":{t:"考题三",p:`window.name = 'ByteDance'
function A() {
  this.name = 123
}
A.prototype.getA = function () {
  cons ...`,l:"basic/js.html#考题三",a:"考题三"},"67.19":{t:"考题四",p:`var length = 10
function fn() {
  return this.length + 1
}
var obj = {
  length: 5,
  test1: functio ...`,l:"basic/js.html#考题四",a:"考题四"},"67.20":{t:"JS 判断变量是不是数组, 你能写出哪些方法",p:"",l:"basic/js.html#js-判断变量是不是数组-你能写出哪些方法",a:"js-判断变量是不是数组-你能写出哪些方法"},"67.21":{t:"方式一: isArray 判断",p:`var arr = [1,2,3]
console.log(Array.isArray(arr))

`,l:"basic/js.html#方式一-isarray-判断",a:"方式一-isarray-判断"},"67.22":{t:"方式二: instanceof",p:`var arr = [1, 2, 3]
console.log(arr instanceof Array)

`,l:"basic/js.html#方式二-instanceof",a:"方式二-instanceof"},"67.23":{t:"方式三: 原型 prototype",p:`var arr = [1, 2, 3]
console.log(Object.prototype.toString.call(arr).indexOf('Array') &gt; -1)

`,l:"basic/js.html#方式三-原型-prototype",a:"方式三-原型-prototype"},"67.24":{t:"方式四: isPrototypeOf 判断",p:`var arr = [1, 2, 3]
console.log(Array.prototype.isPrototypeOf(arr))

`,l:"basic/js.html#方式四-isprototypeof-判断",a:"方式四-isprototypeof-判断"},"67.25":{t:"方式五: constructor",p:`var arr = [1, 2, 3]
console.log(arr.constructor.toString().indexOf('Array') &gt; -1)

`,l:"basic/js.html#方式五-constructor",a:"方式五-constructor"},"67.26":{t:"slice 是干嘛的?splice 是否会改变原数组?",p:"",l:"basic/js.html#slice-是干嘛的-splice-是否会改变原数组",a:"slice-是干嘛的-splice-是否会改变原数组"},"67.27":{t:"slice",p:`slice 是来截取的
slice(start?: number, end?: number): T[];

参数可以写 slice(3), slice(1,3), slice(-3)...返回的是一 ...`,l:"basic/js.html#slice",a:"slice"},"67.28":{t:"splice",p:`splice(start: number, deleteCount?: number): T[];
splice(start: number, deleteCount: number, ...item ...`,l:"basic/js.html#splice",a:"splice"},"67.29":{t:"JS 数组去重",p:"",l:"basic/js.html#js-数组去重",a:"js-数组去重"},"67.30":{t:"方式一: new Set",p:`var arr = [1, 2, 3, 4, 5, 1, 3]
function unique(arr) {
  return [...new Set(arr)]
}
console.log(uniq ...`,l:"basic/js.html#方式一-new-set",a:"方式一-new-set"},"67.31":{t:"方式二: indexOf",p:`var arr = [1, 2, 3, 4, 5, 1, 3]
function unique(arr) {
  var newArr = []
  for (var i = 0; i &lt; ar ...`,l:"basic/js.html#方式二-indexof",a:"方式二-indexof"},"67.32":{t:"方式三: sort",p:`var arr = [1, 2, 3, 4, 5, 1, 3]
function unique(arr) {
  arr = arr.sort()
  var newArr = []
  for (v ...`,l:"basic/js.html#方式三-sort",a:"方式三-sort"},"67.33":{t:"找出多维数组最大值",p:`var arr = [
  [4, 5, 1, 3],
  [13, 27, 18, 26],
  [32, 35, 37, 39],
  [1000, 1001, 857, 1]
]
functio ...`,l:"basic/js.html#找出多维数组最大值",a:"找出多维数组最大值"},"67.34":{t:"给字符串新增方法实现功能",p:`String.prototype.addPrefix = function (str) {
  return str + this
}
console.log('world'.addPrefix('h ...`,l:"basic/js.html#给字符串新增方法实现功能",a:"给字符串新增方法实现功能"},"67.35":{t:"找出字符串出现最多次数的字符以及次数",p:`var s = 'aaaaaaabbbbbbcccccbbbbaaaaaabbbbbcccaaa'
function getMost(str) {
  var obj = {}
  for (var  ...`,l:"basic/js.html#找出字符串出现最多次数的字符以及次数",a:"找出字符串出现最多次数的字符以及次数"},"67.36":{t:"new 操作符具体做了什么?",p:`
创建了一个空的对象
将空对象的原型指向于构造函数的原型
将空对象作为构造函数的上下文(改变 this 指向)
对构造函数有返回值的处理判断

`,l:"basic/js.html#new-操作符具体做了什么",a:"new-操作符具体做了什么"},"67.37":{t:"闭包",p:"",l:"basic/js.html#闭包",a:"闭包"},"67.38":{t:"1. 闭包是什么",p:`闭包是一个函数加上到创建函数的作用域的连接, 闭包&quot;关闭&quot;了函数的自由变量
`,l:"basic/js.html#_1-闭包是什么",a:"_1-闭包是什么"},"67.39":{t:"2. 闭包可以解决什么问题(闭包的优点)",p:`

内部函数可以访问到外部函数的局部变量


闭包可以解决的问题
var lis = document.getElementsByTagName('li')
for (var i = 0; i &lt ...`,l:"basic/js.html#_2-闭包可以解决什么问题-闭包的优点",a:"_2-闭包可以解决什么问题-闭包的优点"},"67.40":{t:"3. 闭包的缺点",p:`
变量会驻留在内存中, 造成内存损耗问题。


解决: 把闭包的函数设置为 null

var lis = document.getElementsByTagName('li')
for (var i ...`,l:"basic/js.html#_3-闭包的缺点",a:"_3-闭包的缺点"},"67.41":{t:"原型链",p:`
原型可以解决什么问题

对象共享属性和共享方法


谁有原型
函数拥有 prototype
对象拥有__proto__


对象查找属性或者方法的顺序
查找规则: 现在对象本身找 -&gt; 构造函 ...`,l:"basic/js.html#原型链",a:"原型链"},"67.42":{t:"JS 继承有哪些方式",p:"",l:"basic/js.html#js-继承有哪些方式",a:"js-继承有哪些方式"},"67.43":{t:"方式一: ES6",p:`class Parent {
  constructor() {
    this.age = 18
  }
}
class Child extends Parent {
  constructor( ...`,l:"basic/js.html#方式一-es6",a:"方式一-es6"},"67.44":{t:"方式二: 原型链继承",p:`function Parent() {
  this.age = 20
}
function Child() {
  this.name = '张三'
}
Child.prototype = new  ...`,l:"basic/js.html#方式二-原型链继承",a:"方式二-原型链继承"},"67.45":{t:"方式三: 借用构造函数",p:`function Parent() {
  this.age = 20
}
function Child() {
  Parent.call(this)
  this.name = '张三'
}
le ...`,l:"basic/js.html#方式三-借用构造函数",a:"方式三-借用构造函数"},"67.46":{t:"方式四: 组合式继承",p:`function Parent() {
  this.age = 20
}
function Child() {
  Parent.call(this)
  this.name = '张三'
}

C ...`,l:"basic/js.html#方式四-组合式继承",a:"方式四-组合式继承"},"67.47":{t:"说一下 call、apply、bind 的区别?",p:"",l:"basic/js.html#说一下-call、apply、bind-的区别",a:"说一下-call、apply、bind-的区别"},"67.48":{t:"共同点:",p:`功能一致, 可以改变 this 指向
语法: 函数.call()、函数.apply()、函数.bind()
`,l:"basic/js.html#共同点",a:"共同点"},"67.49":{t:"区别:",p:`
返回不同: call 和 apply 可以立即执行; bind 不会立即执行, 因为 bind 返回的是一个函数, 所以需要加()执行
参数不同: apply 第二个参数是数组; call 和 bi ...`,l:"basic/js.html#区别",a:"区别"},"67.50":{t:"场景:",p:`用 apply 的情况
var arr = [1, 2, 6, 54, 33, 246]
console.log(Math.max(null, arr))

用 bind 的情况
// btn 和 h ...`,l:"basic/js.html#场景",a:"场景"},"67.51":{t:"sort 背后的原理是什么?",p:`V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort, 数量小于 10 的数组使用 InsertionSort,比 10 大的数组则使用 QuickSort
 ...`,l:"basic/js.html#sort-背后的原理是什么",a:"sort-背后的原理是什么"},"67.52":{t:"深拷贝和浅拷贝",p:`共同点:复制


浅拷贝: 只复制引用, 而未复制真正的值
var arr1 = [1, 2, 3]
var arr2 = arr1

var obj1 = {
  a: 1,
  b: 2
}
va ...`,l:"basic/js.html#深拷贝和浅拷贝",a:"深拷贝和浅拷贝"},"67.53":{t:"localStorage、sessionStorage、cookie 的区别",p:`共同点: 在客户端存放数据
区别:


数据存放有效期
sessionStorage: 仅在当前浏览器窗口关闭之前有效[浏览器关了就没了]
localStorage: 始终有效, 窗口或者浏览器关闭了 ...`,l:"basic/js.html#localstorage、sessionstorage、cookie-的区别",a:"localstorage、sessionstorage、cookie-的区别"},"67.54":{t:"自适应",p:`淘宝无限适配移动端 + 布局单位使用 rem
window.addEventListener('resize', setRemUnit)
function setRemUnit () {
    le ...`,l:"basic/js.html#自适应",a:"自适应"},"67.55":{t:"var、let、const 的区别",p:`var、let、const共同点: 都是可以声明变量的
区别一:
​	var 具有变量提升的机制
​	let 和 const 没有变量提升的机制
区别二:
​	var 可以多次声明同一个变量
​	le ...`,l:"basic/js.html#var、let、const-的区别",a:"var、let、const-的区别"},"67.56":{t:"作用域考题",p:"",l:"basic/js.html#作用域考题",a:"作用域考题"},"67.57":{t:"考题一: let 和 const 没有变量提升性",p:`console.log(str) // undefined
var str = '你好'

console.log(num) // 报错
let num = 10

`,l:"basic/js.html#考题一-let-和-const-没有变量提升性",a:"考题一-let-和-const-没有变量提升性"},"67.58":{t:"考题二:var 没有自身作用域",p:`function demo () {
    var n = 2
    if (true) {
        var n = 1
    }
    console.log(n);  // 1 
 ...`,l:"basic/js.html#考题二-var-没有自身作用域",a:"考题二-var-没有自身作用域"},"67.59":{t:"考题三",p:`const obj = { a: 1 }
obj = 1111;  // 报错
obj.a = 1111 // 不报错

`,l:"basic/js.html#考题三",a:"考题三"},"67.60":{t:"将下列对象进行合并",p:`const a = {
    a: 1,
    b: 4
}
const b = {
    b: 2,
    c: 3
}

`,l:"basic/js.html#将下列对象进行合并",a:"将下列对象进行合并"},"67.61":{t:"方式一: Object.assign()",p:`let obj1 = Object.assign(a, b)
console.log(obj1);

`,l:"basic/js.html#方式一-object-assign",a:"方式一-object-assign"},"67.62":{t:"方式二:解构",p:`let obj1 = { ...a, ...b }
console.log(obj1);

`,l:"basic/js.html#方式二-解构",a:"方式二-解构"},"67.63":{t:"方式三: 自定义",p:`function extend (target, source) {
    for (var key in source) {
        target[key] = source[key]
  ...`,l:"basic/js.html#方式三-自定义",a:"方式三-自定义"},"67.64":{t:"箭头函数和普通函数有什么区别?",p:`

this 指向的问题
箭头函数中的 this 是在箭头函数定义时就确定的, 而且是不能修改的(call、apply、bind)
**** 箭头函数的 this 指向定义时候外层第一个普通函数的 t ...`,l:"basic/js.html#箭头函数和普通函数有什么区别",a:"箭头函数和普通函数有什么区别"},"67.65":{t:"Promise 的几种状态",p:`有三种状态
pending(进行中)
fulfilled(已成功)
rejected(已失败)
`,l:"basic/js.html#promise-的几种状态",a:"promise-的几种状态"},"67.66":{t:"find 和 filter 的区别",p:`区别一:返回的内容不同
​	filter: 返回的是数组
​	find: 返回的是具体的内容
区别二:
​	filter: 返回整体(每一个匹配到的都返回)
​	find: 匹配到第一个就返回
`,l:"basic/js.html#find-和-filter-的区别",a:"find-和-filter-的区别"},"67.67":{t:"some 和 every 的区别",p:`some: 如果有一项匹配,则返回 true
every: 全部匹配才会返回 true
`,l:"basic/js.html#some-和-every-的区别",a:"some-和-every-的区别"},"68.0":{t:"Tstststst",p:"",l:"basic/ts.html",a:"tstststst"},"69.0":{t:"# 一、Vue2 篇",p:"",l:"basic/vue.html",a:"一、vue2-篇"},"69.1":{t:"1. 关于生命周期",p:"",l:"basic/vue.html#_1-关于生命周期",a:"_1-关于生命周期"},"69.2":{t:"1.1 生命周期有哪些？发送请求在 created 还是 mounted ？",p:`Vue2.x 系统自带有8个
beforeCreated
created
beforeMount
mounted
beforeUpdate
updated
beforeDestroy
destorye ...`,l:"basic/vue.html#_1-1-生命周期有哪些-发送请求在-created-还是-mounted",a:"_1-1-生命周期有哪些-发送请求在-created-还是-mounted"},"69.3":{t:"1.2 为什么发送请求不在 beforeCreate 里？beforeCreate 和 created 有什么区别？",p:`为什么发送请求不在 beforeCreate 里
因为:如果请求是在 methods 中封装好的,在 beforeCreate 调用的时候, beforeCreate 阶段是拿不到 methods 里 ...`,l:"basic/vue.html#_1-2-为什么发送请求不在-beforecreate-里-beforecreate-和-created-有什么区别",a:"_1-2-为什么发送请求不在-beforecreate-里-beforecreate-和-created-有什么区别"},"69.4":{t:"1.3 在created 中如何获取 dom",p:`1. 只要写异步代码，获取 dom 是在异步中获取的，就可以了
   例如 setTimeout(),请求,Promise.xxx()等等...
2. 使用 Vue 系统内置的 this.$nextT ...`,l:"basic/vue.html#_1-3-在created-中如何获取-dom",a:"_1-3-在created-中如何获取-dom"},"69.5":{t:"1.4一旦进入组件会执行哪些生命周期？",p:`beforeCreated
created
beforeMount
mounted

`,l:"basic/vue.html#_1-4一旦进入组件会执行哪些生命周期",a:"_1-4一旦进入组件会执行哪些生命周期"},"69.6":{t:"1.5 第二次或者第 N 次进入组件会执行哪些生命周期？",p:`如果当前组件加入了 keep-alive,只会执行一个生命周期
activated

如果没有加入 keep-alive
beforeCreated
created
beforeMount
mount ...`,l:"basic/vue.html#_1-5-第二次或者第-n-次进入组件会执行哪些生命周期",a:"_1-5-第二次或者第-n-次进入组件会执行哪些生命周期"},"69.7":{t:"1.6 父组件引入子组件，那么生命周期执行的顺序是？",p:`父：beforeCreated、created、beforeMount
子：beforeCreated、created、beforeMount、mounted
父：mounted

`,l:"basic/vue.html#_1-6-父组件引入子组件-那么生命周期执行的顺序是",a:"_1-6-父组件引入子组件-那么生命周期执行的顺序是"},"69.8":{t:"1.7 加入 keep-alive 会执行哪些生命周期",p:`如果使用了 keep-alive 组件,当前的组件会额外新增 2 个生命周期(系统 8+ 2)
activated
deactivated

如果当前组价加入了 keep-alive,第一次进入这个组 ...`,l:"basic/vue.html#_1-7-加入-keep-alive-会执行哪些生命周期",a:"_1-7-加入-keep-alive-会执行哪些生命周期"},"69.9":{t:"1.8 你在什么情况下用过哪些生命周期？说一说生命周期的使用场景",p:`created		===&gt; 单组件请求
mounted		===&gt; 同步可以获取 dom,如果子组件请求后父组件请求
activated	===&gt; 判断 id 是否相等,如果不相同发 ...`,l:"basic/vue.html#_1-8-你在什么情况下用过哪些生命周期-说一说生命周期的使用场景",a:"_1-8-你在什么情况下用过哪些生命周期-说一说生命周期的使用场景"},"69.10":{t:"2.关于组件",p:"",l:"basic/vue.html#_2-关于组件",a:"_2-关于组件"},"69.11":{t:"2.1 组件传值(通信)的方式",p:`父传后代(后代拿到了父的数据)
1. 父组件引入子组件,绑定数据 
			&lt;List :str1=&quot;str1&quot;&gt;&lt;/List&gt;
		子组件通过 props  ...`,l:"basic/vue.html#_2-1-组件传值-通信-的方式",a:"_2-1-组件传值-通信-的方式"},"69.12":{t:"6.2 vue 单向绑定",p:`双向绑定: v-model
单向绑定: v-bind

`,l:"basic/vue.html#_6-2-vue-单向绑定",a:"_6-2-vue-单向绑定"},"69.13":{t:"6.3 v-if 和 v-for 的优先级",p:`vue2 中, v-for 的优先级大于 v-if
Vue3 中, v-if 的优先级大于 v-for

`,l:"basic/vue.html#_6-3-v-if-和-v-for-的优先级",a:"_6-3-v-if-和-v-for-的优先级"},"69.14":{t:"7. 关于原理",p:"",l:"basic/vue.html#_7-关于原理",a:"_7-关于原理"},"69.15":{t:"7.1 $nextTick 原理",p:`微任务:Promise.then  setImmediate MutationObserver
宏任务:setTimeout
$nextTick(callback){
	return new Prom ...`,l:"basic/vue.html#_7-1-nexttick-原理",a:"_7-1-nexttick-原理"},"69.16":{t:"7.2",p:"",l:"basic/vue.html#_7-2",a:"_7-2"},"70.0":{t:"# webpack",p:"",l:"basic/webpack.html",a:"webpack"},"70.1":{t:"webpack 插件",p:"",l:"basic/webpack.html#webpack-插件",a:"webpack-插件"},"71.0":{t:"<!--",p:`
@Date: 2023-12-22 10:35:10
@LastEditTime: 2023-12-22 10:36:43
@Description:
@FilePath: /blog/api-ex ...`,l:"examples/api-examples.html",a:""},"72.0":{t:"# Markdown Extension Examples",p:`This page demonstrates some of the built-in markdown extensions provided by VitePress.
`,l:"examples/markdown-examples.html",a:"markdown-extension-examples"},"72.1":{t:"Syntax Highlighting",p:"VitePress provides Syntax Highlighting powered by Shikiji, with additional features like line-highli ...",l:"examples/markdown-examples.html#syntax-highlighting",a:"syntax-highlighting"},"72.2":{t:"Custom Containers",p:`Input
::: info
This is an info box.
:::

::: tip
This is a tip.
:::

::: warning
This is a warning.
 ...`,l:"examples/markdown-examples.html#custom-containers",a:"custom-containers"},"72.3":{t:"More",p:`Check out the documentation for the full list of markdown extensions.
`,l:"examples/markdown-examples.html#more",a:"more"},"73.0":{t:"!image.png",p:`1. 鸿蒙应用开发快速体验
`,l:"harmonyOS/入门.html",a:"image-png"},"73.1":{t:"1.1. 准备开发环境",p:"",l:"harmonyOS/入门.html#_1-1-准备开发环境",a:"_1-1-准备开发环境"},"73.2":{t:"1.1.1. 安装IDE",p:"鸿蒙应用开发需要使用配套的IDE——HUAWEI DevEco Studio。 DevEco Studio基于IntelliJ IDEA Community（IDEA社区版）构建，为鸿蒙应用提供了一站 ...",l:"harmonyOS/入门.html#_1-1-1-安装ide",a:"_1-1-1-安装ide"},"73.3":{t:"1.1.2. 配置IDE",p:`安装完成后，可按以下步骤完成初始化配置

双击桌面快捷方式，启动DevEco Studio

!img

阅读各项条款，点击Agree表示同意

!img

初次启动会出现如下设置向导，首先需要为no ...`,l:"harmonyOS/入门.html#_1-1-2-配置ide",a:"_1-1-2-配置ide"},"73.4":{t:"1.2. 创建项目",p:`下面我们创建第一个鸿蒙应用项目

点击Create Project

!img

选择项目模版，此处选择第一个Empty Ability即可。

!img

配置项目

可能需要调整的配置项如下，其余 ...`,l:"harmonyOS/入门.html#_1-2-创建项目",a:"_1-2-创建项目"},"73.5":{t:"1.3. 运行项目",p:`DevEco Studio提供了多种方式用于运行项目，包括预览、模拟器和真机运行。下面逐一演示
`,l:"harmonyOS/入门.html#_1-3-运行项目",a:"_1-3-运行项目"},"73.6":{t:"1.3.1. Preview 预览",p:`Previewer预览用于查看应用的UI界面效果，方便随时调整界面UI布局。只需打开需要预览的页面文件，例如下图中的Index.ets，然后点击IDE右侧的Perviewer即可看到预览效果。
!im ...`,l:"harmonyOS/入门.html#_1-3-1-preview-预览",a:"_1-3-1-preview-预览"},"73.7":{t:"1.3.2. 模拟器运行",p:`Previewer预览器主要用于查看界面UI效果，如需对项目进行更加深入的测试，可以使用模拟器运行项目。初次使用需要先安装模拟器，安装步骤如下

点击Tools菜单下的Device Manager，打 ...`,l:"harmonyOS/入门.html#_1-3-2-模拟器运行",a:"_1-3-2-模拟器运行"},"73.8":{t:"1.3.3. 真机运行",p:`使用模拟器运行应用时，会占用电脑较多的资源，并且有些功能无法进行测试。当模拟器不满足要求时，可选择真机运行。真机运行的步骤如下

准备一台装有Harmony OS系统的手机，系统版本最好为4.0.0及 ...`,l:"harmonyOS/入门.html#_1-3-3-真机运行",a:"_1-3-3-真机运行"},"73.9":{t:"2.1. 概述",p:"HarmonyOS 应用的主要开发语言是 ArkTS，它由 TypeScript（简称TS）扩展而来，在继承TypeScript语法的基础上进行了一系列优化，使开发者能够以更简洁、更自然的方式开发应用 ...",l:"harmonyOS/入门.html#_2-1-概述",a:"_2-1-概述"},"73.10":{t:"2.2. TypeScript 快速入门",p:"",l:"harmonyOS/入门.html#_2-2-typescript-快速入门",a:"_2-2-typescript-快速入门"},"73.11":{t:"2.2.1. 运行环境说明",p:"",l:"harmonyOS/入门.html#_2-2-1-运行环境说明",a:"_2-2-1-运行环境说明"},"73.12":{t:"2.2.1.1. 线上Playground",p:`TypeScript提供了一个线上的 Playground 供练习使用，地址为https://www.typescriptlang.org/zh/play。
!img
`,l:"harmonyOS/入门.html#_2-2-1-1-线上playground",a:"_2-2-1-1-线上playground"},"73.13":{t:"2.2.1.2. 本地运行环境",p:`除去线上的运行环境，我们也可以在本地搭建一个 TS 的运行环境。

安装 VSCode 编辑器

VSCode是一款轻量级、开源且功能丰富的集成开发环境（IDE），支持多种编程语言，具有强大的插件系统 ...`,l:"harmonyOS/入门.html#_2-2-1-2-本地运行环境",a:"_2-2-1-2-本地运行环境"},"73.14":{t:"2.2.2. 声明",p:"",l:"harmonyOS/入门.html#_2-2-2-声明",a:"_2-2-2-声明"},"73.15":{t:"2.2.2.1. 变量声明",p:`!img
`,l:"harmonyOS/入门.html#_2-2-2-1-变量声明",a:"_2-2-2-1-变量声明"},"73.16":{t:"2.2.2.2. 常量声明",p:`let用于声明变量，而const用于声明常量，两者的区别是变量在赋值后可以修改，而常量在赋值后便不能再修改。
const b:number = 200;

`,l:"harmonyOS/入门.html#_2-2-2-2-常量声明",a:"_2-2-2-2-常量声明"},"73.17":{t:"2.2.2.3. 类型推断",p:`如果一个变量或常量的声明包含了初始值，TS 便可以根据初始值进行类型推断，此时我们就可以不显式指定其类型，例如
let c = 60;
console.log(typeof c); //number
 ...`,l:"harmonyOS/入门.html#_2-2-2-3-类型推断",a:"_2-2-2-3-类型推断"},"73.18":{t:"2.2.3. 常用数据类型",p:"",l:"harmonyOS/入门.html#_2-2-3-常用数据类型",a:"_2-2-3-常用数据类型"},"73.19":{t:"2.2.3.1. number",p:"number`表示数字，包括整数和浮点数，例如： `100`、`-33` 、`2.5`、`-3.9\nlet a :number = 100\nlet b :number = -33\nlet c :num ...",l:"harmonyOS/入门.html#_2-2-3-1-number",a:"_2-2-3-1-number"},"73.20":{t:"2.2.3.2. string",p:"string`表示字符串，例如： `你好`、`hello\nlet a:string = '你好'\nlet b:string = 'hello'\n\n",l:"harmonyOS/入门.html#_2-2-3-2-string",a:"_2-2-3-2-string"},"73.21":{t:"2.2.3.3. boolean",p:"boolean`表示布尔值，可选值为：`true`、`false\nlet isOpen:boolean = true\nlet isDone:boolean = false\n\n",l:"harmonyOS/入门.html#_2-2-3-3-boolean",a:"_2-2-3-3-boolean"},"73.22":{t:"2.2.3.4. 数组",p:`数组类型定义由两部分组成，元素类型[]，例如number[]表示数字数组，string[]表示字符串数组，数组类型的变量可由数组字面量——[item1,item2,item3]进行初始化。
let a ...`,l:"harmonyOS/入门.html#_2-2-3-4-数组",a:"_2-2-3-4-数组"},"73.23":{t:"2.2.3.5. 对象",p:"在TS中，对象（object）是一种一系列由属性名称和属性值组成的数据结构，例如姓名:'张三', 年龄:10, 性别:'男'。对象类型的声明需要包含所有属性的名称及类型，例如{name: string ...",l:"harmonyOS/入门.html#_2-2-3-5-对象",a:"_2-2-3-5-对象"},"73.24":{t:"2.2.4. 函数",p:"",l:"harmonyOS/入门.html#_2-2-4-函数",a:"_2-2-4-函数"},"73.25":{t:"2.2.4.1. 函数声明语法",p:`声明函数的基础语法如下
!img
`,l:"harmonyOS/入门.html#_2-2-4-1-函数声明语法",a:"_2-2-4-1-函数声明语法"},"73.26":{t:"2.2.4.2. 参数详解",p:"",l:"harmonyOS/入门.html#_2-2-4-2-参数详解",a:"_2-2-4-2-参数详解"},"73.27":{t:"2.2.4.2.1. 特殊语法",p:`
可选参数

可选参数通过参数名后的?进行标识，如以下案例中的gender?参数。
function getPersonInfo(name: string, age: number, gender?: ...`,l:"harmonyOS/入门.html#_2-2-4-2-1-特殊语法",a:"_2-2-4-2-1-特殊语法"},"73.28":{t:"2.2.4.2.2. 特殊类型",p:`
联合类型

一个函数可能用于处理不同类型的值，这种情况可以使用联合类型，例如以下案例中的message: number | string
function printNumberOrString(m ...`,l:"harmonyOS/入门.html#_2-2-4-2-2-特殊类型",a:"_2-2-4-2-2-特殊类型"},"73.29":{t:"2.2.4.3. 返回值详解",p:"",l:"harmonyOS/入门.html#_2-2-4-3-返回值详解",a:"_2-2-4-3-返回值详解"},"73.30":{t:"2.2.4.3.1. 特殊类型",p:`若函数没有返回值，则可以使用void作为返回值类型，其含义为空。
function test(): void {
    console.log('hello');
}

`,l:"harmonyOS/入门.html#_2-2-4-3-1-特殊类型",a:"_2-2-4-3-1-特殊类型"},"73.31":{t:"2.2.4.3.2. 类型推断",p:`函数的返回值类型可根据函数内容推断出来，因此可以省略不写。
function test() {
    console.log('hello');
}

function sum(a: number, ...`,l:"harmonyOS/入门.html#_2-2-4-3-2-类型推断",a:"_2-2-4-3-2-类型推断"},"73.32":{t:"2.2.4.4. 函数声明特殊语法",p:`
匿名函数

匿名函数的语法结构简洁，特别适用于简单且仅需一次性使用的场景。
let numbers: number[] = [1, 2, 3, 4, 5] numbers.forEach(funct ...`,l:"harmonyOS/入门.html#_2-2-4-4-函数声明特殊语法",a:"_2-2-4-4-函数声明特殊语法"},"73.33":{t:"2.2.5. 类（class）",p:"",l:"harmonyOS/入门.html#_2-2-5-类-class",a:"_2-2-5-类-class"},"73.34":{t:"2.2.5.1. 概述",p:`类（class）是面向对象编程语言中的一个重要概念。
面向对象编程（Object-Oriented Programming，简称OOP）是一种编程范式，其核心理念在于将程序中的数据与操作数据的方法有机 ...`,l:"harmonyOS/入门.html#_2-2-5-1-概述",a:"_2-2-5-1-概述"},"73.35":{t:"2.2.5.2. 语法说明",p:"",l:"harmonyOS/入门.html#_2-2-5-2-语法说明",a:"_2-2-5-2-语法说明"},"73.36":{t:"2.2.5.2.1. 类的定义",p:`定义类的语法如下图所示
!img
代码如下：
class Person {    id: number;    name: string;    age: number = 18;     const ...`,l:"harmonyOS/入门.html#_2-2-5-2-1-类的定义",a:"_2-2-5-2-1-类的定义"},"73.37":{t:"2.2.5.2.2. 对象创建",p:`
语法

创建对象的关键字为new，具体语法如下
let person = new Person(1,'zhangsan');


对象属性的访问

console.log(person.name); ...`,l:"harmonyOS/入门.html#_2-2-5-2-2-对象创建",a:"_2-2-5-2-2-对象创建"},"73.38":{t:"2.2.5.2.3. 静态成员",p:`Typescript 中的类中可以包含静态成员（静态属性和静态方法），静态成员隶属于类本身，而不属于某个对象实例。静态成员通用用于定义一些常量，或者工具方法。

声明静态成员

定义静态成员需要使用s ...`,l:"harmonyOS/入门.html#_2-2-5-2-3-静态成员",a:"_2-2-5-2-3-静态成员"},"73.39":{t:"2.2.5.3. 继承",p:"继承是面向对象编程中的重要机制，允许一个类（子类或派生类）继承另一个类（父类或基类）的属性和方法。子类可以直接使用父类的特性，并根据需要添加新的特性或覆盖现有的特性。这种机制赋予面向对象程序良好的扩展 ...",l:"harmonyOS/入门.html#_2-2-5-3-继承",a:"_2-2-5-3-继承"},"73.40":{t:"2.2.5.4. 访问修饰符",p:`访问修饰符（Access Modifiers）用于控制类成员（属性、方法等）的可访问性。TypeScript提供了三种访问修饰符，分别是private、protected和public。
class  ...`,l:"harmonyOS/入门.html#_2-2-5-4-访问修饰符",a:"_2-2-5-4-访问修饰符"},"73.41":{t:"2.2.6. 接口（interface）",p:"",l:"harmonyOS/入门.html#_2-2-6-接口-interface",a:"_2-2-6-接口-interface"},"73.42":{t:"2.2.6.1. 概述",p:`接口（interface）是面向对象编程中的另一个重要概念。接口通常会作为一种契约或规范让类（class）去遵守，确保类实现某些特定的行为或功能。
`,l:"harmonyOS/入门.html#_2-2-6-1-概述",a:"_2-2-6-1-概述"},"73.43":{t:"2.2.6.2. 语法说明",p:`
接口定义

接口使用interface关键字定义，通常情况下，接口中只会包含属性和方法的声明，而不包含具体的实现细节，具体的细节由其实现类完成。
interface Person {    id:  ...`,l:"harmonyOS/入门.html#_2-2-6-2-语法说明",a:"_2-2-6-2-语法说明"},"73.44":{t:"2.2.6.3. 多态",p:`多态是面相对象编程中的一个重要概念，它可以使同一类型的对象具有不同的行为。下面我们通过一个具体的案例来体会多态这一概念
首先，再创建一个Person接口的实现类Teacher，如下
class Tea ...`,l:"harmonyOS/入门.html#_2-2-6-3-多态",a:"_2-2-6-3-多态"},"73.45":{t:"2.2.6.4. 接口的作用",p:`在传统的面向对象编程的场景中，接口主要用于设计和组织代码，使代码更加容易扩展和维护。下面举例说明。
假如现在需要实现一个订单支付系统，按照面向对象编程的习惯，首先需要定义一个订单类（Order），如下 ...`,l:"harmonyOS/入门.html#_2-2-6-4-接口的作用",a:"_2-2-6-4-接口的作用"},"73.46":{t:"2.2.6.5. TS 中的接口的特殊性",p:`TypeScript 中的接口是一个非常灵活的概念，除了用作类的规范之外，也常用于直接描述对象的类型，例如，现有一个变量的定义如下
let person: {name:string, age:numb ...`,l:"harmonyOS/入门.html#_2-2-6-5-ts-中的接口的特殊性",a:"_2-2-6-5-ts-中的接口的特殊性"},"73.47":{t:"2.2.7. 枚举",p:"",l:"harmonyOS/入门.html#_2-2-7-枚举",a:"_2-2-7-枚举"},"73.48":{t:"2.2.7.1. 概述",p:`枚举（Enumeration）是编程语言中常见的一种数据类型，其主要功能是定义一组有限的选项，例如，方向（上、下、左、右）或季节（春、夏、秋、冬）等概念都可以使用枚举类型定义。
`,l:"harmonyOS/入门.html#_2-2-7-1-概述",a:"_2-2-7-1-概述"},"73.49":{t:"2.2.7.2. 语法说明",p:`
枚举定义

枚举的定义需使用enum关键字，如下
enum Season {    SPRING,    SUMMER,    AUTUMN,    WINTER }


枚举使用

枚举的使用记住 ...`,l:"harmonyOS/入门.html#_2-2-7-2-语法说明",a:"_2-2-7-2-语法说明"},"73.50":{t:"2.2.7.3. 赋值",p:`在TypeScript 中，枚举实际上是一个对象，而每个枚举值都是该对象的一个属性，并且每个属性都有具体的值，属性值只支持两种类型——数字或字符串。
默认情况下，每个属性的值都是数字，并且从 0 开始 ...`,l:"harmonyOS/入门.html#_2-2-7-3-赋值",a:"_2-2-7-3-赋值"},"73.51":{t:"2.2.8. 模块化",p:"",l:"harmonyOS/入门.html#_2-2-8-模块化",a:"_2-2-8-模块化"},"73.52":{t:"2.2.8.1. 概述",p:"模块化是指将复杂的程序拆解为多个独立的文件单元，每个文件被称为一个模块。在 TypeScript 中，默认情况下，每个模块都拥有自己的作用域，这意味着在一个模块中声明的任何内容（如变量、函数、类等）在 ...",l:"harmonyOS/入门.html#_2-2-8-1-概述",a:"_2-2-8-1-概述"},"73.53":{t:"2.2.8.2. 语法说明",p:`
导出

导出须使用export关键字，语法如下
export function hello() {    console.log('hello module A'); } export const  ...`,l:"harmonyOS/入门.html#_2-2-8-2-语法说明",a:"_2-2-8-2-语法说明"},"73.54":{t:"2.2.8.3. 避免命名冲突",p:`若多个模块中具有命名相同的变量、函数等内容，将这些内容导入到同一模块下就会出现命名冲突。例如，在上述案例的基础上，又增加了一个 moduleC，内容如下
export function hello() ...`,l:"harmonyOS/入门.html#_2-2-8-3-避免命名冲突",a:"_2-2-8-3-避免命名冲突"},"73.55":{t:"2.2.8.4. 默认导入导出",p:`除了上述导入导出的语法之外，还有一种语法，叫做默认导入导出，这种语法相对简洁一些。

默认导出

默认导出允许一个模块指定一个（最多一个）默认的导出项，语法如下
export default func ...`,l:"harmonyOS/入门.html#_2-2-8-4-默认导入导出",a:"_2-2-8-4-默认导入导出"},"73.56":{t:"2.3. ArkTS 快速入门",p:`ArkTS 在继承了Typescript语法的基础上，主要扩展了声明式UI开发相关的能力。
`,l:"harmonyOS/入门.html#_2-3-arkts-快速入门",a:"_2-3-arkts-快速入门"},"73.57":{t:"2.3.1. 声明式UI",p:`声明式UI是一种编写用户界面的范式。下面通过一个具体案例来学习这种开发范式，假如现在要实现如下界面
!img
`,l:"harmonyOS/入门.html#_2-3-1-声明式ui",a:"_2-3-1-声明式ui"},"73.58":{t:"2.3.1.1. 定义界面状态",p:`按照声明式UI的开发范式，首先需要分析和定义页面的各种状态，并声明相应的状态变量用于表示不同的状态。
当前案例中，界面共有两个状态，分别是开灯和关灯状态，所以我们可以使用一个boolean类型的变量来 ...`,l:"harmonyOS/入门.html#_2-3-1-1-定义界面状态",a:"_2-3-1-1-定义界面状态"},"73.59":{t:"2.3.1.2. 描述界面显示效果",p:`在分析完界面状态后，我们需要准确的描述界面在不同状态下的显示效果。
在当前案例中，具体逻辑如下图所示
!img
`,l:"harmonyOS/入门.html#_2-3-1-2-描述界面显示效果",a:"_2-3-1-2-描述界面显示效果"},"73.60":{t:"2.3.1.3. 改变状态",p:`在明确了界面在不同状态下的显示效果后，我们只需修改状态变量的值，就能触发界面的更新。
在当前案例中，若我们将isOn的值改为true，那么界面上就会显示开灯的图片，否则就会显示关灯的图片。
为了实现点 ...`,l:"harmonyOS/入门.html#_2-3-1-3-改变状态",a:"_2-3-1-3-改变状态"},"73.61":{t:"2.3.1.4. 总结",p:`以上就是声明式UI开发范式的大致流程，下面为大家总结一下声明式UI的核心思想

声明式描述

开发者只需描述在界面在不同状态下要呈现的最终效果，而无需关注界面变化的具体过程。
!img

状态数据驱动 ...`,l:"harmonyOS/入门.html#_2-3-1-4-总结",a:"_2-3-1-4-总结"},"73.62":{t:"2.3.2. 组件化",p:"在鸿蒙开发中，组件是构成界面的最小单元，我们所看到的界面，都是由众多组件组合而成的，所以编写界面其实就是组合组件的过程，ArkTS提供了很多的内置组件，例如：Text、Button、Image等等；并 ...",l:"harmonyOS/入门.html#_2-3-2-组件化",a:"_2-3-2-组件化"},"73.63":{t:"2.3.3. 入门案例",p:"",l:"harmonyOS/入门.html#_2-3-3-入门案例",a:"_2-3-3-入门案例"},"73.64":{t:"2.3.3.1. 案例效果",p:`案例的最终效果如下图所示
!img
`,l:"harmonyOS/入门.html#_2-3-3-1-案例效果",a:"_2-3-3-1-案例效果"},"73.65":{t:"2.3.3.2. 完整代码",p:`案例的完整代码见Demos/entry/src/main/ets/pages/helloworld/light/solution/Light.ets
@Entry
@Component
struct  ...`,l:"harmonyOS/入门.html#_2-3-3-2-完整代码",a:"_2-3-3-2-完整代码"},"73.66":{t:"2.3.4. 语法说明",p:"",l:"harmonyOS/入门.html#_2-3-4-语法说明",a:"_2-3-4-语法说明"},"73.67":{t:"2.3.4.1. 声明组件",p:"下面通过一个相对简单的案例来系统的学习 ArkTS 声明组件的语法，案例的最终效果如下，完整代码见Demos/entry/src/main/ets/pages/helloworld/delete/De ...",l:"harmonyOS/入门.html#_2-3-4-1-声明组件",a:"_2-3-4-1-声明组件"},"73.68":{t:"2.3.4.2. 自定义组件",p:`除去系统预置的组件外，ArkTS 还支持自定义组件。使用自定义组件，可使代码的结构更加清晰，并且能提高代码的复用性。
`,l:"harmonyOS/入门.html#_2-3-4-2-自定义组件",a:"_2-3-4-2-自定义组件"},"73.69":{t:"2.3.4.2.1. 语法说明",p:`自定义组件的语法如下图所示
!img
各部分语法说明如下：

struct关键字

struct是ArkTS新增的用于自定义组件或者自定义弹窗的关键字。其声明的数据结构和TS中的类十分相似，可包含属性 ...`,l:"harmonyOS/入门.html#_2-3-4-2-1-语法说明",a:"_2-3-4-2-1-语法说明"},"73.70":{t:"2.3.4.2.2. 案例实操",p:`现在需要对前文的开/关灯的案例做出如下改造，由于两个按钮的结构十分相似，所以可考虑自定义一个按钮组件，然后进行复用。
!img
案例的完整代码见：Demos/entry/src/main/ets/pa ...`,l:"harmonyOS/入门.html#_2-3-4-2-2-案例实操",a:"_2-3-4-2-2-案例实操"},"73.71":{t:"2.3.4.3. 渲染控制",p:"",l:"harmonyOS/入门.html#_2-3-4-3-渲染控制",a:"_2-3-4-3-渲染控制"},"73.72":{t:"2.3.4.3.1. 条件渲染",p:"",l:"harmonyOS/入门.html#_2-3-4-3-1-条件渲染",a:"_2-3-4-3-1-条件渲染"},"73.73":{t:"2.3.4.3.1.1. 概述",p:`条件渲染可根据应用的不同状态渲染不同的UI界面，例如前文的开/关灯案例，以及以下的播放/暂停案例，均可使用条件渲染实现。
!img
案例的完整代码见：Demos/entry/src/main/ets/ ...`,l:"harmonyOS/入门.html#_2-3-4-3-1-1-概述",a:"_2-3-4-3-1-1-概述"},"73.74":{t:"2.3.4.3.1.2. 语法说明",p:`条件渲染的语法如下
if (...){
  //UI描述 
}else if (...){
  //UI描述
}else{
  //UI描述
}

`,l:"harmonyOS/入门.html#_2-3-4-3-1-2-语法说明",a:"_2-3-4-3-1-2-语法说明"},"73.75":{t:"2.3.4.3.2. 循环渲染",p:"",l:"harmonyOS/入门.html#_2-3-4-3-2-循环渲染",a:"_2-3-4-3-2-循环渲染"},"73.76":{t:"2.3.4.3.2.1. 概述",p:`循环渲染可使用ForEach语句基于一个数组来快速渲染一个组件列表，例如以下案例中的选项列表就可通过循环渲染实现。
!img
案例的完整代码见：Demos/entry/src/main/ets/pag ...`,l:"harmonyOS/入门.html#_2-3-4-3-2-1-概述",a:"_2-3-4-3-2-1-概述"},"73.77":{t:"2.3.4.3.2.2. 语法说明",p:`ForEach循环渲染的语法如下
ForEach(
  arr: any[], 
  itemGenerator: (item: any, index?: number) =&gt; void,
   ...`,l:"harmonyOS/入门.html#_2-3-4-3-2-2-语法说明",a:"_2-3-4-3-2-2-语法说明"},"73.78":{t:"3.1. 图片",p:"",l:"harmonyOS/入门.html#_3-1-图片",a:"_3-1-图片"},"73.79":{t:"3.1.1. 概述",p:`Image为图片组件，用于在应用中显示图片。
`,l:"harmonyOS/入门.html#_3-1-1-概述",a:"_3-1-1-概述"},"73.80":{t:"3.1.2. 参数",p:"Image组件的参数类型为string | Resource | media.PixelMap，相关案例见Demos/entry/src/main/ets/pages/component/image/ ...",l:"harmonyOS/入门.html#_3-1-2-参数",a:"_3-1-2-参数"},"73.81":{t:"3.1.3. 常用属性",p:"",l:"harmonyOS/入门.html#_3-1-3-常用属性",a:"_3-1-3-常用属性"},"73.82":{t:"3.1.3.1. 图片尺寸",p:`图片尺寸可通过width()方法和height()方法进行设置。例如
Image($r('app.media.img'))
	.width(100)
	.height(100)

两个方法可接收的参数 ...`,l:"harmonyOS/入门.html#_3-1-3-1-图片尺寸",a:"_3-1-3-1-图片尺寸"},"73.83":{t:"3.1.3.2. 图片缩放",p:`当图片的原始大小与Image组件不同时，可通过objectFit()方法来设置图片的显示效果。该方法的参数类型为ImageFit枚举类型，可选的枚举值如下



名称
描述




ImageFit. ...`,l:"harmonyOS/入门.html#_3-1-3-2-图片缩放",a:"_3-1-3-2-图片缩放"},"73.84":{t:"3.1.3.3. 图片插值",p:`当原图分辨率较低并且需要放大显示时，图片会模糊并出现锯齿。如下图所示
!img
这时可以使用interpolation()方法对图片进行插值，使图片显示得更清晰。该方法的参数为ImageInterpo ...`,l:"harmonyOS/入门.html#_3-1-3-3-图片插值",a:"_3-1-3-3-图片插值"},"73.85":{t:"3.2. 文本",p:"",l:"harmonyOS/入门.html#_3-2-文本",a:"_3-2-文本"},"73.86":{t:"3.2.1. 概述",p:`Text为文本组件，用于显示文字内容。
`,l:"harmonyOS/入门.html#_3-2-1-概述",a:"_3-2-1-概述"},"73.87":{t:"3.2.2. 参数",p:`Text组件的参数类型为string | Resource，下面分别对两个参数类型进行介绍：

string类型

Text('我是一段文本')


Resource 类型

Resource类型的参 ...`,l:"harmonyOS/入门.html#_3-2-2-参数",a:"_3-2-2-参数"},"73.88":{t:"3.2.3. 常用属性",p:"",l:"harmonyOS/入门.html#_3-2-3-常用属性",a:"_3-2-3-常用属性"},"73.89":{t:"3.2.3.1. 字体大小",p:`字体大小可通过fontSize()方法进行设置，该方法的参数类型为string | number| Resource，下面逐一介绍

string类型

string类型的参数可用于指定字体大小的具体 ...`,l:"harmonyOS/入门.html#_3-2-3-1-字体大小",a:"_3-2-3-1-字体大小"},"73.90":{t:"3.2.3.2. 字体粗细",p:`字体粗细可通过fontWeight()方法进行设置，该方法参数类型为number | FontWeight | string，下面逐一介绍

number类型

number类型的取值范围是[100, ...`,l:"harmonyOS/入门.html#_3-2-3-2-字体粗细",a:"_3-2-3-2-字体粗细"},"73.91":{t:"3.2.3.3. 字体颜色",p:`字体颜色可通过fontColor()方法进行设置，该方法参数类型为Color | string | number | Resource，下面逐一介绍

Color类型

Color\`为枚举类型，其中包 ...`,l:"harmonyOS/入门.html#_3-2-3-3-字体颜色",a:"_3-2-3-3-字体颜色"},"73.92":{t:"3.2.3.4. 文本对齐",p:`文本对齐方向可通过textAlign()方法进行设置，该方法的参数为枚举类型TextAlign，可选的枚举值如下



名称
描述




TextAlign.Start
首部对齐


TextAli ...`,l:"harmonyOS/入门.html#_3-2-3-4-文本对齐",a:"_3-2-3-4-文本对齐"},"73.93":{t:"3.2.3.5. 最大行数和超长处理",p:"可使用maxLines()方法控制文本的最大行数，当内容超出最大行数时，可使用textOverflow()方法处理超出部分，该方法的参数类型为{ overflow: TextOverflow }，其中 ...",l:"harmonyOS/入门.html#_3-2-3-5-最大行数和超长处理",a:"_3-2-3-5-最大行数和超长处理"},"73.94":{t:"3.3. 按钮",p:"",l:"harmonyOS/入门.html#_3-3-按钮",a:"_3-3-按钮"},"73.95":{t:"3.3.1. 概述",p:`Button为按钮组件，通常用于响应用户的点击操作。
`,l:"harmonyOS/入门.html#_3-3-1-概述",a:"_3-3-1-概述"},"73.96":{t:"3.3.2. 参数",p:`Button组件有两种使用方式，分别是不包含子组件和包含子组件，两种方式下，Button 组件所需的参数有所不同，下面分别介绍

不包含子组件

不包含子组件时，Button组件所需的参数如下
But ...`,l:"harmonyOS/入门.html#_3-3-2-参数",a:"_3-3-2-参数"},"73.97":{t:"3.3.3. 常用属性",p:"",l:"harmonyOS/入门.html#_3-3-3-常用属性",a:"_3-3-3-常用属性"},"73.98":{t:"3.3.3.1. 背景颜色",p:`按钮的颜色可使用backgroundColor()方法进行设置，例如
Button('绿色按钮').backgroundColor(Color.Green)

`,l:"harmonyOS/入门.html#_3-3-3-1-背景颜色",a:"_3-3-3-1-背景颜色"},"73.99":{t:"3.3.3.2. 边框圆角",p:`按钮的边框圆角大小可使用borderRadius()方法进行设置，例如
Button('圆角按钮', { type: ButtonType.Normal }).borderRadius(10)

相关 ...`,l:"harmonyOS/入门.html#_3-3-3-2-边框圆角",a:"_3-3-3-2-边框圆角"},"73.100":{t:"3.3.4. 常用事件",p:`对于Button组件而言，最为常用的就是点击事件，可以通过onClick()方法为按钮绑定点击事件，该方法的参数为一个回调函数，当按钮被点击时，就会触发该回调函数，例如
Button('点击事件'). ...`,l:"harmonyOS/入门.html#_3-3-4-常用事件",a:"_3-3-4-常用事件"},"73.101":{t:"3.4. 切换按钮",p:"",l:"harmonyOS/入门.html#_3-4-切换按钮",a:"_3-4-切换按钮"},"73.102":{t:"3.4.1. 概述",p:`Toggle为切换按钮组件，一般用于两种状态之间的切换，例如下图中的蓝牙开关。
!img
`,l:"harmonyOS/入门.html#_3-4-1-概述",a:"_3-4-1-概述"},"73.103":{t:"3.4.2. 参数",p:`Toggle组件的参数定义如下
Toggle(options: { type: ToggleType, isOn?: boolean })


type

type属性用于设置Toggle组件的类型， ...`,l:"harmonyOS/入门.html#_3-4-2-参数",a:"_3-4-2-参数"},"73.104":{t:"3.4.3. 常用属性：",p:"",l:"harmonyOS/入门.html#_3-4-3-常用属性",a:"_3-4-3-常用属性"},"73.105":{t:"3.4.3.1. 选中状态背景色",p:`可使用selectedColor()方法设置Toggle组件在选中（或打开）状态下的背景色，例如
!img
`,l:"harmonyOS/入门.html#_3-4-3-1-选中状态背景色",a:"_3-4-3-1-选中状态背景色"},"73.106":{t:"3.4.3.2. Swtich滑块颜色",p:`可使用设置switchPointColor()方法设置Switch类型的Toggle组件中的圆形滑块颜色，例如
!img
相关案例见：Demos/entry/src/main/ets/pages/co ...`,l:"harmonyOS/入门.html#_3-4-3-2-swtich滑块颜色",a:"_3-4-3-2-swtich滑块颜色"},"73.107":{t:"3.4.4. 常用事件",p:"Toggle组件常用的事件为change事件，每当Toggle组件的状态发生变化，就会触发change事件。开发者可通过onChange()方法为Toggle组件绑定change事件，该方法参数为一个 ...",l:"harmonyOS/入门.html#_3-4-4-常用事件",a:"_3-4-4-常用事件"},"73.108":{t:"3.5. 文本输入",p:"",l:"harmonyOS/入门.html#_3-5-文本输入",a:"_3-5-文本输入"},"73.109":{t:"3.5.1. 概述",p:`TextInput为文本输入组件，用于接收用户输入的文本内容。
`,l:"harmonyOS/入门.html#_3-5-1-概述",a:"_3-5-1-概述"},"73.110":{t:"3.5.2. 参数",p:`TextInput组件的参数定义如下
TextInput(value?:{placeholder?: string|Resource , text?: string|Resource})


plac ...`,l:"harmonyOS/入门.html#_3-5-2-参数",a:"_3-5-2-参数"},"73.111":{t:"3.5.3. 常用属性",p:"",l:"harmonyOS/入门.html#_3-5-3-常用属性",a:"_3-5-3-常用属性"},"73.112":{t:"3.5.3.1. 输入框类型",p:`可通过type()方法设置输入框的类型，该方法的参数为InputType枚举类型，可选的枚举值有



名称
描述




InputType.Normal
基本输入模式


InputType.Pa ...`,l:"harmonyOS/入门.html#_3-5-3-1-输入框类型",a:"_3-5-3-1-输入框类型"},"73.113":{t:"3.5.3.2. 光标样式",p:`可通过caretColor()方法设置光标的颜色，效果如下
!img
`,l:"harmonyOS/入门.html#_3-5-3-2-光标样式",a:"_3-5-3-2-光标样式"},"73.114":{t:"3.5.3.3. placeholder样式",p:"可通过placeholderFont()和placeholderColor()方法设置 placeholder 的样式，其中placeholderFont()用于设置字体，包括字体大小、字体粗细等，p ...",l:"harmonyOS/入门.html#_3-5-3-3-placeholder样式",a:"_3-5-3-3-placeholder样式"},"73.115":{t:"3.5.3.4. 文本样式",p:`输入文本的样式可通过fontSize()、fontWeight()、fontColor()等通用属性方法进行设置。
相关案例见：Demos/entry/src/main/ets/pages/compo ...`,l:"harmonyOS/入门.html#_3-5-3-4-文本样式",a:"_3-5-3-4-文本样式"},"73.116":{t:"3.5.4. 常用事件",p:"",l:"harmonyOS/入门.html#_3-5-4-常用事件",a:"_3-5-4-常用事件"},"73.117":{t:"3.5.4.1. change事件",p:`每当输入的内容发生变化，就会触发 change 事件，开发者可使用onChange()方法为TextInput组件绑定 change 事件，该方法的参数定义如下
onChange(callback:  ...`,l:"harmonyOS/入门.html#_3-5-4-1-change事件",a:"_3-5-4-1-change事件"},"73.118":{t:"3.5.4.2. 焦点事件",p:"焦点事件包括获得焦点和失去焦点两个事件，当输入框获得焦点时，会触发 focus 事件，失去焦点时，会触发 blur 事件，开发者可使用onFocus()和onBlur()方法为 TextInput 组 ...",l:"harmonyOS/入门.html#_3-5-4-2-焦点事件",a:"_3-5-4-2-焦点事件"},"73.119":{t:"3.6. 进度条",p:"",l:"harmonyOS/入门.html#_3-6-进度条",a:"_3-6-进度条"},"73.120":{t:"3.6.1. 概述",p:`Progress为进度条组件，用于显示各种进度。
`,l:"harmonyOS/入门.html#_3-6-1-概述",a:"_3-6-1-概述"},"73.121":{t:"3.6.2. 参数",p:`Progress组件的参数定义如下
Progress(options: {value: number, total?: number, type?: ProgressType})


value

v ...`,l:"harmonyOS/入门.html#_3-6-2-参数",a:"_3-6-2-参数"},"73.122":{t:"3.6.3. 常用属性",p:"",l:"harmonyOS/入门.html#_3-6-3-常用属性",a:"_3-6-3-常用属性"},"73.123":{t:"3.6.3.1. 进度条样式",p:`可通过style()调整进度条的样式，例如进度条的宽度，该方法的参数类型定义如下
style({strokeWidth?: string|number|Resource,scaleCount?: nu ...`,l:"harmonyOS/入门.html#_3-6-3-1-进度条样式",a:"_3-6-3-1-进度条样式"},"73.124":{t:"3.6.3.2. 进度条颜色",p:`进度条的颜色可通过color()和backgroundColor()方法进行设置，其中color()用于设置前景色，backgroundColor()用于设置背景色，例如
!img
相关案例见：Dem ...`,l:"harmonyOS/入门.html#_3-6-3-2-进度条颜色",a:"_3-6-3-2-进度条颜色"},"73.125":{t:"3.7. 弹窗",p:`弹窗是移动应用中常见的一种用户界面元素，常用于显示一些重要的信息、提示用户进行操作或收集用户输入。ArkTS提供了多种内置的弹窗供开发者使用，除此之外还支持自定义弹窗，来满足各种不同的需求。
`,l:"harmonyOS/入门.html#_3-7-弹窗",a:"_3-7-弹窗"},"73.126":{t:"3.7.1. 消息提示",p:"",l:"harmonyOS/入门.html#_3-7-1-消息提示",a:"_3-7-1-消息提示"},"73.127":{t:"3.7.1.1. 概述",p:`Toast（消息提示），常用于显示一些简短的消息或提示，一般会在短暂停留后自动消失。具体效果如下
!img
`,l:"harmonyOS/入门.html#_3-7-1-1-概述",a:"_3-7-1-1-概述"},"73.128":{t:"3.7.1.2. 使用说明",p:`可使用@ohos.promptAction模块中的showToast()方法显示 Toast 提示，使用时需要先导入@ohos.promptAction模块，如下
import promptActio ...`,l:"harmonyOS/入门.html#_3-7-1-2-使用说明",a:"_3-7-1-2-使用说明"},"73.129":{t:"3.7.2. 警告对话框",p:"",l:"harmonyOS/入门.html#_3-7-2-警告对话框",a:"_3-7-2-警告对话框"},"73.130":{t:"3.7.2.1. 概述",p:`AlertDialog（警告对话框）用于向用户发出警告或确认操作的提示，确保用户在敏感操作前进行确认。具体效果如下
!img
相关案例见：Demos/entry/src/main/ets/pages/ ...`,l:"harmonyOS/入门.html#_3-7-2-1-概述",a:"_3-7-2-1-概述"},"73.131":{t:"3.7.2.2. 使用说明",p:`可使用全局方法AlertDialog.show()显示警告对话框，具体用法可参考相关案例或者官方文档。
`,l:"harmonyOS/入门.html#_3-7-2-2-使用说明",a:"_3-7-2-2-使用说明"},"73.132":{t:"3.7.3. 操作列表弹框",p:"",l:"harmonyOS/入门.html#_3-7-3-操作列表弹框",a:"_3-7-3-操作列表弹框"},"73.133":{t:"3.7.3.1. 概述",p:`ActionSheet（操作列表弹窗）用于提供一组选项给用户选择，用户从中选择后，可执行相应的操作。具体效果如下
!img
相关案例见：Demos/entry/src/main/ets/pages/c ...`,l:"harmonyOS/入门.html#_3-7-3-1-概述",a:"_3-7-3-1-概述"},"73.134":{t:"3.7.3.2. 使用说明",p:`可使用全局方法ActionSheet.show()显示操作列表弹窗，具体用法可参考相关案例或者官方文档。
`,l:"harmonyOS/入门.html#_3-7-3-2-使用说明",a:"_3-7-3-2-使用说明"},"73.135":{t:"3.7.4. 选择器弹窗",p:"",l:"harmonyOS/入门.html#_3-7-4-选择器弹窗",a:"_3-7-4-选择器弹窗"},"73.136":{t:"3.7.4.1. 概述",p:`选择器弹窗用于让用户从一个列表中选择一个具体的值。ArkTS内置了多种选择器弹窗，例如文本选择器、日期选择器、时间选择器等等，各选择器效果如下
&lt;details class=&quot;lake ...`,l:"harmonyOS/入门.html#_3-7-4-1-概述",a:"_3-7-4-1-概述"},"73.137":{t:"3.7.4.2. 使用说明",p:`具体用法可参考相关案例或者官方文档，各选择器的官方文档地址如下



类型
文档地址




TextPickerDialog（文本滑动选择器弹窗）
官方文档


DatePickerDialog（日 ...`,l:"harmonyOS/入门.html#_3-7-4-2-使用说明",a:"_3-7-4-2-使用说明"},"73.138":{t:"3.7.5. 自定义弹窗",p:"",l:"harmonyOS/入门.html#_3-7-5-自定义弹窗",a:"_3-7-5-自定义弹窗"},"73.139":{t:"3.7.5.1. 概述",p:`当现有组件不满足要求时，可考虑自定义弹窗，自定义弹窗允许开发者自定义弹窗内容和样式。例如
!img
相关案例见：Demos/entry/src/main/ets/pages/component/dia ...`,l:"harmonyOS/入门.html#_3-7-5-1-概述",a:"_3-7-5-1-概述"},"73.140":{t:"3.7.5.2. 使用说明",p:`显示自定义弹窗需要使用CustomDialogController，具体用法可参考相关案例或者官方文档。



\`\`\`json&lt;br/&gt;{&lt;br/&gt;  &quot;intege ...`,l:"harmonyOS/入门.html#_3-7-5-2-使用说明",a:"_3-7-5-2-使用说明"},"75.0":{t:"# 如何理解node中模块的概念",p:`!image-20240527104001233
`,l:"node/1.如何理解node中模块的概念.html",a:"如何理解node中模块的概念"},"76.0":{t:"动态 CSS",p:"",l:"vue-challenge/CSS Features.html",a:"动态-css"},"76.1":{t:"题目",p:`Vue单文件组件 \`

`,l:"vue-challenge/CSS Features.html#题目",a:"题目"},"76.2":{t:"答案",p:`

&lt;template&gt;
  &lt;p&gt;hello&lt;/p&gt;
&lt;/template&gt;



`,l:"vue-challenge/CSS Features.html#答案",a:"答案"},"76.3":{t:"解答",p:`在 css 中使用v-bind可以将 CSS 的值链接到动态的组件状态
`,l:"vue-challenge/CSS Features.html#解答",a:"解答"},"76.4":{t:"全局 CSS",p:"",l:"vue-challenge/CSS Features.html#全局-css",a:"全局-css"},"76.5":{t:"题目",p:`有些时候，我们想在具有CSS作用域的Vue单文件组件设置全局CSS样式， 该怎么设置呢 ? 让我们开始吧 👇:
&lt;template&gt;
  &lt;p&gt;Hello Vue.js&lt ...`,l:"vue-challenge/CSS Features.html#题目",a:"题目"},"76.6":{t:"答案",p:`&lt;template&gt;
  &lt;p&gt;Hello Vue.js&lt;/p&gt;
&lt;/template&gt;




&lt;template&gt;
  &lt;p&gt ...`,l:"vue-challenge/CSS Features.html#答案",a:"答案"},"76.7":{t:"解答",p:`:global 可以把对应的 css 转化为全局作用域，:local 可以将对应的 css 转换为局部作用域。
去掉 style 标签中的 scoped 也可以将其内的 css 转化成全局作用域
`,l:"vue-challenge/CSS Features.html#解答",a:"解答"},"77.0":{t:"DOM 传送门",p:"",l:"vue-challenge/Components.html",a:"dom-传送门"},"77.1":{t:"题目",p:`Vue.js提供了一个内置组件，将其插槽内容渲染到另一个DOM，成为该DOM的一部分


&lt;template&gt;
  &lt;!-- 将以下元素渲染成\`body\`的子元素 --&gt;
   ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"77.2":{t:"答案",p:`

&lt;template&gt;
  &lt;!-- 将以下元素渲染成\`body\`的子元素 --&gt;
  &lt;teleport to=&quot;body&quot;&gt;
    &l ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"77.3":{t:"解答",p:`使用 teleport 将内容渲染到 body 的子元素中
`,l:"vue-challenge/Components.html#解答",a:"解答"},"77.4":{t:"Props 验证",p:"",l:"vue-challenge/Components.html#props-验证",a:"props-验证"},"77.5":{t:"题目",p:`请验证Button组件的Prop类型 ，使它只接收: primary | ghost | dashed | link | text | default ，且默认值为default。


&lt;tem ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"77.6":{t:"答案",p:`

&lt;template&gt;
  &lt;button&gt;Button&lt;/button&gt;
&lt;/template&gt;

`,l:"vue-challenge/Components.html#答案",a:"答案"},"77.7":{t:"解答",p:`自定义类型校验validator函数可以返回特定的枚举类型
`,l:"vue-challenge/Components.html#解答",a:"解答"},"77.8":{t:"函数式组件",p:"",l:"vue-challenge/Components.html#函数式组件",a:"函数式组件"},"77.9":{t:"题目",p:`

&lt;template&gt;
  &lt;list-component
    :list=&quot;list&quot;
    :active-index=&quot;activeInd ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"77.10":{t:"答案",p:`

&lt;template&gt;
  &lt;list-component :list=&quot;list&quot; :active-index=&quot;activeIndex&quot; ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"77.11":{t:"渲染函数[h()]",p:"",l:"vue-challenge/Components.html#渲染函数-h",a:"渲染函数-h"},"77.12":{t:"题目",p:`在这个挑战中，你需要使用h渲染函数来实现一个组件。
请注意: 你应该确保参数被正确传递、事件被正常触发和插槽内容正常渲染。让我们开始吧。

&lt;template&gt;
  &lt;MyButto ...`,l:"vue-challenge/Components.html#题目",a:"题目"},"77.13":{t:"答案",p:`import { defineComponent, h } from 'vue'

export default defineComponent({
  name: 'MyButton',
  ren ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"77.14":{t:"树组件 ",p:"",l:"vue-challenge/Components.html#树组件",a:"树组件"},"77.15":{t:"题目",p:`在这个挑战中，你需要实现一个树组件，让我们开始吧。


&lt;template&gt;
  &lt;!-- do something.... --&gt;
&lt;/template&gt;


`,l:"vue-challenge/Components.html#题目",a:"题目"},"77.16":{t:"答案",p:`

&lt;template&gt;
  &lt;ul v-for=&quot;item in data&quot;&gt;
    &lt;li&gt;
      {{ item.title }} ...`,l:"vue-challenge/Components.html#答案",a:"答案"},"78.0":{t:"切换器",p:"",l:"vue-challenge/Composable Function.html",a:"切换器"},"78.1":{t:"题目",p:`

&lt;template&gt;
  &lt;p&gt;State: {{ state ? 'ON' : 'OFF' }}&lt;/p&gt;
  &lt;p @click=&quot;toggl ...`,l:"vue-challenge/Composable Function.html#题目",a:"题目"},"78.2":{t:"答案",p:`

&lt;template&gt;
  &lt;p&gt;State: {{ state ? 'ON' : 'OFF' }}&lt;/p&gt;
  &lt;p @click=&quot;toggl ...`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"78.3":{t:"计数器",p:"",l:"vue-challenge/Composable Function.html#计数器",a:"计数器"},"78.4":{t:"题目",p:`


`,l:"vue-challenge/Composable Function.html#题目",a:"题目"},"78.5":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Count: {{ count }}&lt;/p&gt;
    &lt;button @click=&qu ...`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"78.6":{t:"实现本地存储函数",p:"",l:"vue-challenge/Composable Function.html#实现本地存储函数",a:"实现本地存储函数"},"78.7":{t:"题目",p:`

`,l:"vue-challenge/Composable Function.html#题目",a:"题目"},"78.8":{t:"答案",p:`





`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"78.9":{t:"鼠标坐标",p:`

&lt;template&gt;Mouse position is at: {{ x }}, {{ y }}&lt;/template&gt;

`,l:"vue-challenge/Composable Function.html#鼠标坐标",a:"鼠标坐标"},"78.10":{t:"答案",p:`

&lt;template&gt;Mouse position is at: {{ x }}, {{ y }}&lt;/template&gt;


`,l:"vue-challenge/Composable Function.html#答案",a:"答案"},"79.0":{t:"生命周期钩子",p:"",l:"vue-challenge/Composition API.html",a:"生命周期钩子"},"79.1":{t:"题目",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      Child Component: {{ count }}
     ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.2":{t:"答案",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Child Component: {{ count }}&lt;/p&gt;
  ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.3":{t:"ref 全家桶",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;msg&lt;/h1&gt;
    &lt;p&gt;
      &lt;span @click=&q ...`,l:"vue-challenge/Composition API.html#ref-全家桶",a:"ref-全家桶"},"79.4":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;msg&lt;/h1&gt;
    &lt;p&gt;
      &lt;span @click=&q ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.5":{t:"响应性丢失",p:"",l:"vue-challenge/Composition API.html#响应性丢失",a:"响应性丢失"},"79.6":{t:"题目",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      &lt;span @click=&quot;update(count-1)&quot;&gt; ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.7":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      &lt;span @click=&quot;update(count - 1)&quot;&g ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.8":{t:"可写的计算属性",p:"",l:"vue-challenge/Composition API.html#可写的计算属性",a:"可写的计算属性"},"79.9":{t:"题目",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;{{ count }}&lt;/p&gt;
    &lt;p&gt;{{ plusOne }}&lt;/p ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.10":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;{{ count }}&lt;/p&gt;
    &lt;p&gt;{{ plusOne }}&lt;/p ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.11":{t:"watch 全家桶",p:"",l:"vue-challenge/Composition API.html#watch-全家桶",a:"watch-全家桶"},"79.12":{t:"题目",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ count }}
    &lt;/p&gt;
    &lt;p ref=&quot; ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.13":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ count }}
    &lt;/p&gt;
    &lt;p ref=&quot; ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.14":{t:"解释",p:`

immediate：在侦听器创建时立即触发回调。第一次调用时旧值是 undefined。


deep：如果源是对象，强制深度遍历，以便在深层级变更时触发回调。参考深层侦听器。


flush：调 ...`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"79.15":{t:"浅层 ref",p:"",l:"vue-challenge/Composition API.html#浅层-ref",a:"浅层-ref"},"79.16":{t:"题目",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ state.count }}
    &lt;/p&gt;
  &lt;/div&gt; ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.17":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ state.count }}
    &lt;/p&gt;
  &lt;/div&gt; ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.18":{t:"解释",p:`triggerRef：强制触发依赖于一个浅层 ref 的副作用，这通常在对浅引用的内部值进行深度变更后使用
`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"79.19":{t:"依赖注入",p:"",l:"vue-challenge/Composition API.html#依赖注入",a:"依赖注入"},"79.20":{t:"题目",p:`在这个挑战中，你将使用 组合式 API: 依赖注入 来完成它。 以下是你要实现的内容 👇:
// Child.vue 



&lt;template&gt;
  {{ count }}
&lt;/ ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.21":{t:"答案",p:`// App.vue


&lt;template&gt;
  &lt;Child /&gt;
&lt;/template&gt;

//Child.vue


&lt;template&gt;
 输 ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.22":{t:"Effect 作用域 API",p:"",l:"vue-challenge/Composition API.html#effect-作用域-api",a:"effect-作用域-api"},"79.23":{t:"题目",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ doubled }}
    &lt;/p&gt;
  &lt;/div&gt;
&lt ...`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.24":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ doubled }}
    &lt;/p&gt;
  &lt;/div&gt;
&lt ...`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.25":{t:"解释",p:`effectScope.run(fn:Function),调用 stop 可以停止监听
`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"79.26":{t:"自定义 Ref",p:"",l:"vue-challenge/Composition API.html#自定义-ref",a:"自定义-ref"},"79.27":{t:"题目",p:`

&lt;template&gt;
  &lt;input v-model=&quot;text&quot; /&gt;
&lt;/template&gt;

`,l:"vue-challenge/Composition API.html#题目",a:"题目"},"79.28":{t:"答案",p:`

&lt;template&gt;
  &lt;input v-model=&quot;text&quot; /&gt;
&lt;/template&gt;

`,l:"vue-challenge/Composition API.html#答案",a:"答案"},"79.29":{t:"解释",p:`customRef语法
return customRef((track, trigger) =&gt; {
    return {
      get() {
        track()
    ...`,l:"vue-challenge/Composition API.html#解释",a:"解释"},"80.0":{t:"大写",p:"",l:"vue-challenge/Directives.html",a:"大写"},"80.1":{t:"题目",p:`

&lt;template&gt;
  &lt;input type=&quot;text&quot; v-model.capitalize=&quot;&quot; /&gt;
&lt;/temp ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"80.2":{t:"答案",p:`

&lt;template&gt;
  &lt;input type=&quot;text&quot; v-model.capitalize=&quot;iptText&quot; /&gt;
&l ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"80.3":{t:"优化性能的指令",p:"",l:"vue-challenge/Directives.html#优化性能的指令",a:"优化性能的指令"},"80.4":{t:"题目",p:`Vue.js 提供了一个指令，以便只渲染一次元素和组件，并且跳过以后的更新。


&lt;template&gt;
  &lt;span&gt;使它从不更新: {{ count }}&lt;/span ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"80.5":{t:"答案",p:`

&lt;template&gt;
  &lt;span v-once&gt;使它从不更新: {{ count }}&lt;/span&gt;
&lt;/template&gt;

`,l:"vue-challenge/Directives.html#答案",a:"答案"},"80.6":{t:"解答",p:`v-once: 仅渲染元素和组件一次，并跳过之后的更新。在随后的重新渲染，元素/组件及其所有子项将被当作静态内容并跳过渲染。这可以用来优化更新时的性能。
v-text: 更新元素的文本内容。
v-ht ...`,l:"vue-challenge/Directives.html#解答",a:"解答"},"80.7":{t:"切换焦点的指令",p:"",l:"vue-challenge/Directives.html#切换焦点的指令",a:"切换焦点的指令"},"80.8":{t:"题目",p:`

&lt;template&gt;
  &lt;input v-focus=&quot;state&quot; type=&quot;text&quot;&gt;
&lt;/template&gt; ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"80.9":{t:"答案",p:`

&lt;template&gt;
  &lt;input v-focus=&quot;state&quot; type=&quot;text&quot; /&gt;
&lt;/template&g ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"80.10":{t:"防抖点击指令",p:"",l:"vue-challenge/Directives.html#防抖点击指令",a:"防抖点击指令"},"80.11":{t:"题目",p:`

&lt;template&gt;
  &lt;button v-debounce-click:200=&quot;onClick&quot;&gt;
    Click on it many ti ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"80.12":{t:"答案",p:`

&lt;template&gt;
  &lt;button v-debounce-click:200=&quot;onClick&quot;&gt;Click on it many times q ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"80.13":{t:"激活的样式-指令",p:"",l:"vue-challenge/Directives.html#激活的样式-指令",a:"激活的样式-指令"},"80.14":{t:"题目",p:`

&lt;template&gt;
  &lt;ul&gt;
    &lt;li
      v-for=&quot;(item, index) in list&quot;
      :key= ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"80.15":{t:"答案",p:`

&lt;template&gt;
  &lt;ul&gt;
    &lt;li
      v-for=&quot;(item, index) in list&quot;
      :key= ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"80.16":{t:"实现简易的`v-model`指令",p:"",l:"vue-challenge/Directives.html#实现简易的-v-model-指令",a:"实现简易的-v-model-指令"},"80.17":{t:"题目",p:`

&lt;template&gt;
  &lt;input v-oh-model=&quot;value&quot; type=&quot;text&quot; /&gt;
&lt;/templat ...`,l:"vue-challenge/Directives.html#题目",a:"题目"},"80.18":{t:"答案",p:`

&lt;template&gt;
  &lt;input v-oh-model=&quot;vatltexue&quot; type=&quot;text&quot; /&gt;
&lt;/tem ...`,l:"vue-challenge/Directives.html#答案",a:"答案"},"81.0":{t:"阻止冒泡事件",p:"",l:"vue-challenge/Event Handling.html",a:"阻止冒泡事件"},"81.1":{t:"题目",p:`在这个挑战中，你需要阻止点击事件的冒泡，让我们开始吧。


&lt;template&gt;
  &lt;div @click=&quot;click1()&quot;&gt;
   &lt;div  ...`,l:"vue-challenge/Event Handling.html#题目",a:"题目"},"81.2":{t:"答案",p:`
stop 修饰符



&lt;template&gt;
  &lt;div @click=&quot;click1&quot;&gt;
    &lt;div @click.stop=&quot; ...`,l:"vue-challenge/Event Handling.html#答案",a:"答案"},"81.3":{t:"按键修饰符",p:"",l:"vue-challenge/Event Handling.html#按键修饰符",a:"按键修饰符"},"81.4":{t:"题目",p:"在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许为 v-on 或者 @ 在监听键盘事件时添加按键修饰符：，例如：\n&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.su ...",l:"vue-challenge/Event Handling.html#题目",a:"题目"},"81.5":{t:"答案",p:`&lt;template&gt;
  &lt;!-- 添加按键修饰符让即使 Alt 或 Shift 被一同按下时也会触发 --&gt;
  &lt;button @click.alt.shift=&q ...`,l:"vue-challenge/Event Handling.html#答案",a:"答案"},"82.0":{t:"下一次 DOM 更新",p:"",l:"vue-challenge/Global APT General.html",a:"下一次-dom-更新"},"82.1":{t:"题目",p:`

&lt;template&gt;
  &lt;button id=&quot;counter&quot; @click=&quot;increment&quot;&gt;
    {{ count ...`,l:"vue-challenge/Global APT General.html#题目",a:"题目"},"82.2":{t:"答案",p:`

&lt;template&gt;
  &lt;button id=&quot;counter&quot; @click=&quot;increment&quot;&gt;
    {{ count ...`,l:"vue-challenge/Global APT General.html#答案",a:"答案"},"83.0":{t:"生命周期钩子",p:"",l:"vue-challenge/LifeCycle.html",a:"生命周期钩子"},"83.1":{t:"题目",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      Child Component: {{ count }}
     ...`,l:"vue-challenge/LifeCycle.html#题目",a:"题目"},"83.2":{t:"答案",p:`// Child.vue



&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Child Component: {{ count }}&lt;/p&gt;
  ...`,l:"vue-challenge/LifeCycle.html#答案",a:"答案"},"84.0":{t:"原始值 API",p:"",l:"vue-challenge/Reactivity Advanced.html",a:"原始值-api"},"84.1":{t:"题目",p:`在这个挑战中，你将使用 响应式 API: [xx]Raw 来完成它。 以下是你要实现的内容 👇:


&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
    ...`,l:"vue-challenge/Reactivity Advanced.html#题目",a:"题目"},"84.2":{t:"答案",p:`

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;
      {{ reactiveState.count }}
    &lt;/p&gt;
  &lt; ...`,l:"vue-challenge/Reactivity Advanced.html#答案",a:"答案"},"84.3":{t:"解释",p:`toRaw(reactiveObj):根据一个 Vue 创建的代理返回其原始对象
`,l:"vue-challenge/Reactivity Advanced.html#解释",a:"解释"},"85.0":{t:"Until",p:"",l:"vue-challenge/Unility Function.html",a:"until"},"85.1":{t:"题目",p:`有些时候，我们需要依赖于异步的返回结果做一些后续处理，until函数在这种场景下非常有用，你能实现它吗 ? 让我们来试试吧 👇:


`,l:"vue-challenge/Unility Function.html#题目",a:"题目"},"85.2":{t:"答案",p:`

&lt;template&gt;
  &lt;p @click=&quot;increase&quot;&gt;Increase&lt;/p&gt;
&lt;/template&gt;


`,l:"vue-challenge/Unility Function.html#答案",a:"答案"},"86.0":{t:"自定义元素",p:"",l:"vue-challenge/Web Component.html",a:"自定义元素"},"86.1":{t:"题目",p:`

&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

`,l:"vue-challenge/Web Component.html#题目",a:"题目"},"87.0":{t:"1. Options API 和 Composition API",p:`
Vue2 的API设计是Option(配置)风格的。
Vue3 的API设计是Composition(组合)风格的。

`,l:"vue教程/Vue3核心语法/setup语法糖.html",a:"_1-options-api-和-composition-api"},"87.1":{t:"Options API 的弊端",p:"Options类型的API，数据、方法、计算属性等，是分散在：data、methods、computed中的，若想新增或者修改一个需求，就需要分别修改data、methods、computed，不便于 ...",l:"vue教程/Vue3核心语法/setup语法糖.html#options-api-的弊端",a:"options-api-的弊端"},"87.2":{t:"2.拉开序幕的 setup",p:"",l:"vue教程/Vue3核心语法/setup语法糖.html#_2-拉开序幕的-setup",a:"_2-拉开序幕的-setup"},"87.3":{t:"setup 概述",p:"setup 是 Vue3 中一个新的配置项 ，值是一个函数，它是 Composition API &quot;表演的舞台&quot;，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在 se ...",l:"vue教程/Vue3核心语法/setup语法糖.html#setup-概述",a:"setup-概述"},"87.4":{t:"3. 【ref 创建：基本类型的响应式数据】",p:`
**作用：**定义响应式变量。
语法：let xxx = ref(初始值)。
**返回值：**一个RefImpl的实例对象，简称ref对象或ref，ref对象的value属性是响应式的。
注意点：
 ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_3-【ref-创建-基本类型的响应式数据】",a:"_3-【ref-创建-基本类型的响应式数据】"},"87.5":{t:"4. 【reactive 创建：对象类型的响应式数据】",p:`
作用：定义一个响应式对象（基本类型不要用它，要用ref，否则报错）
语法：let 响应式对象= reactive(源对象)。
**返回值：**一个Proxy的实例对象，简称：响应式对象。
注意点：r ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_4-【reactive-创建-对象类型的响应式数据】",a:"_4-【reactive-创建-对象类型的响应式数据】"},"87.6":{t:"5. 【ref 创建：对象类型的响应式数据】",p:`
其实ref接收的数据可以是：基本类型、对象类型。
若ref接收的是对象类型，内部其实也是调用了reactive函数。

`,l:"vue教程/Vue3核心语法/setup语法糖.html#_5-【ref-创建-对象类型的响应式数据】",a:"_5-【ref-创建-对象类型的响应式数据】"},"87.7":{t:"6. 【ref 对比 reactive】",p:`宏观角度看：



ref用来定义：基本类型数据、对象类型数据；


reactive用来定义：对象类型数据。




区别：




ref创建的变量必须使用.value（可以使用volar插件自动 ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_6-【ref-对比-reactive】",a:"_6-【ref-对比-reactive】"},"87.8":{t:"7. 【toRefs 与 toRef】",p:`

作用：将一个响应式对象中的每一个属性，转换为ref对象。


备注：toRefs与toRef功能一致，但toRefs可以批量转换。


语法如下：
&lt;template&gt;
  &lt;d ...`,l:"vue教程/Vue3核心语法/setup语法糖.html#_7-【torefs-与-toref】",a:"_7-【torefs-与-toref】"},"88.0":{t:"目录",p:`
核心语法

setup语法糖



`,l:"vue教程/index.html",a:"目录"}},n={previewLength:100,buttonLabel:"搜索",placeholder:"请输入关键词",allow:[],ignore:[]},a={INDEX_DATA:t,PREVIEW_LOOKUP:e,Options:n};export{a as default};
