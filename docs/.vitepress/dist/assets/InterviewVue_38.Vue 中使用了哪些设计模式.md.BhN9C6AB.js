import{_ as e,c as t,o,a7 as r}from"./chunks/framework.DIkKG9z6.js";const p=JSON.parse('{"title":"38. Vue 中使用了哪些设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewVue/38.Vue 中使用了哪些设计模式.md","filePath":"InterviewVue/38.Vue 中使用了哪些设计模式.md"}'),n={name:"InterviewVue/38.Vue 中使用了哪些设计模式.md"},s=r('<h1 id="_38-vue-中使用了哪些设计模式" tabindex="-1">38. Vue 中使用了哪些设计模式 <a class="header-anchor" href="#_38-vue-中使用了哪些设计模式" aria-label="Permalink to &quot;38. Vue 中使用了哪些设计模式&quot;">​</a></h1><ul><li><strong>单例模式</strong> - 单例模式就是整个程序有且仅有一个实例 Vuex 中的 <code>store</code></li><li><strong>工厂模式</strong> - 传入参数即可创建实例(<code>createElement</code>)</li><li><strong>发布订阅模式</strong> - 订阅者把自己想订阅的事件注册到调度中心，当该事件触发的时候，发布者发布该事件到调度中心，有调度中心统一调度订阅者注册到调度中心的处理代码</li><li><strong>观察者模式</strong> - <code>watcher</code> 和 <code>dep</code> 的关系</li><li><strong>代理模式</strong> - 代理模式给某一个对象提供一个代理对象，并有代理对象控制对原对象的引用</li><li><strong>装饰模式</strong> - vue2 装饰器的用法(对功能进行增强@)</li><li><strong>中介者模式</strong> - 中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信 <code>vuex</code></li><li><strong>策略模式</strong> - 策略模式值对象有某个行为，但是在不同的场景中，该场景有不同的实现方案。<code>mergeOptions</code></li><li><strong>外观模式</strong> - 提供了统一的接口，用来访问子系统中的一群接口。</li><li>……</li></ul>',2),_=[s];function i(a,l,c,d,u,g){return o(),t("div",null,_)}const h=e(n,[["render",i]]);export{p as __pageData,h as default};
