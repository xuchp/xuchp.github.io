import{_ as t,c as e,o as d,a7 as r}from"./chunks/framework.DIkKG9z6.js";const p=JSON.parse('{"title":"18. 生命周期有哪些","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewVue/18.生命周期有哪些.md","filePath":"InterviewVue/18.生命周期有哪些.md"}'),a={name:"InterviewVue/18.生命周期有哪些.md"},o=r('<h1 id="_18-生命周期有哪些" tabindex="-1">18. 生命周期有哪些 <a class="header-anchor" href="#_18-生命周期有哪些" aria-label="Permalink to &quot;18. 生命周期有哪些&quot;">​</a></h1><h3 id="_1-1-vue2-中的生命周期" tabindex="-1">1.1 Vue2 中的生命周期 <a class="header-anchor" href="#_1-1-vue2-中的生命周期" aria-label="Permalink to &quot;1.1 Vue2 中的生命周期&quot;">​</a></h3><p>主要的生命周期：创建前后、挂载前后、更新前后、销毁前后</p><ul><li>beforeCreate 初始化父子关系及事件，数据观测(data Observer)之前被调用，用此方法一般编写插件的时候会用到</li><li>created 实例已经创建完成之后被调用，在这一步，实例已经完成以下配置：数据观测(Data Observer)、属性和方法等，但是这里没有$el，一般也不咋用</li><li>beforeMount再挂载之前被调用，相关的 render 函数首次被调用</li><li>mounted el 被新创建的 vm.$el替换，并挂载到实例上去之后调用该钩子。可以用于获取 DOM 元素</li><li>beforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前，此时修改数据不会再次触发更新方法</li><li>updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用</li><li>destroyed 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移出，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</li><li>keep-alive(activated 和 deactivated)</li></ul><h3 id="_1-2-v2-和-v3-中的生命周期对比" tabindex="-1">1.2 V2 和 V3 中的生命周期对比 <a class="header-anchor" href="#_1-2-v2-和-v3-中的生命周期对比" aria-label="Permalink to &quot;1.2 V2 和 V3 中的生命周期对比&quot;">​</a></h3><table><thead><tr><th>生命周期 V2</th><th>生命周期 V3</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>beforeCreate</td><td>组件实例被创建之初</td></tr><tr><td>created</td><td>created</td><td>组件实例已经完全创建</td></tr><tr><td>beforeMount</td><td>beforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>mounted</td><td>组件挂在实例上去之后</td></tr><tr><td>beforeUpdate</td><td>beforeUpdate</td><td>组件数据发生变化，更新之前</td></tr><tr><td>updated</td><td>updated</td><td>组件数据更新之后</td></tr><tr><td>beforeDestroy</td><td><strong>beforeUnmount</strong></td><td>组件实例销毁之前</td></tr><tr><td>destroyed</td><td><strong>Unmounted</strong></td><td>组件实例销毁之后</td></tr><tr><td>activated</td><td>activated</td><td>keep-alive 缓存的组件激活时调用</td></tr><tr><td>deactivated</td><td>deactivated</td><td>keep-alive 缓存的组件停用时调用</td></tr><tr><td>errorCaptured</td><td>errorCaptured</td><td>捕获一个来自子孙组件的错误时被调用</td></tr><tr><td>-</td><td><strong>renderTracked Dev</strong></td><td>调试钩子，响应式依赖被收集时调用</td></tr><tr><td>-</td><td><strong>renderTriggered Dev</strong></td><td>调试钩子，响应式依赖被触发时调用</td></tr><tr><td>-</td><td><strong>serverPrefetch</strong></td><td>SSR only, 组件实例在服务器上被渲染之前调用</td></tr></tbody></table><blockquote><p>Vue3 中新增了组合式 API：生命周期钩子，但是不存在 onBeforeCreate 和 onCreated 钩子</p></blockquote>',7),i=[o];function n(l,s,_,c,u,h){return d(),e("div",null,i)}const v=t(a,[["render",n]]);export{p as __pageData,v as default};
