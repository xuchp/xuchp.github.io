import{_ as e,c as t,o as a,a7 as _}from"./chunks/framework.BvW0rtPM.js";const p=JSON.parse('{"title":"4. 谈谈对 Vue 组件化的理解","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewVue/04.谈谈对Vue组件化的理解.md","filePath":"InterviewVue/04.谈谈对Vue组件化的理解.md"}'),o={name:"InterviewVue/04.谈谈对Vue组件化的理解.md"},i=_('<h1 id="_4-谈谈对-vue-组件化的理解" tabindex="-1">4. 谈谈对 Vue 组件化的理解 <a class="header-anchor" href="#_4-谈谈对-vue-组件化的理解" aria-label="Permalink to &quot;4. 谈谈对 Vue 组件化的理解&quot;">​</a></h1><blockquote><p><code>WebComponent</code>组件化的核心组成：模板、属性、事件、插槽、生命周期</p></blockquote><p>组件化好处：高聚合、可重用、可组合</p><ul><li>组件化开发能大幅提高应用的开发效率、测试性、复用性等</li><li>降低更新范围，只重新渲染变化的组件</li></ul><h3 id="补充" tabindex="-1">补充： <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充：&quot;">​</a></h3><ul><li>vue 中的每一个组件都有一个渲染函数 watcher、effect</li><li>数据是响应式的，数据变化后执行 watcher 或者 effect</li><li>组件要合理的划分，如果不拆分组件，那更新的时候整个页面都要重新更新</li><li>如果过分的拆分组件会导致 watcher、effect 产生过多也会造成性能浪费。</li></ul>',6),l=[i];function r(c,n,u,s,d,h){return a(),t("div",null,l)}const V=e(o,[["render",r]]);export{p as __pageData,V as default};
