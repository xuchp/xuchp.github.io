import{_ as s,c as i,o as a,a7 as t}from"./chunks/framework.BvW0rtPM.js";const f=JSON.parse('{"title":"13.watch 和 watchEffect 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewVue/13.watch和watchEffect的区别.md","filePath":"InterviewVue/13.watch和watchEffect的区别.md"}'),n={name:"InterviewVue/13.watch和watchEffect的区别.md"},e=t(`<h1 id="_13-watch-和-watcheffect-的区别" tabindex="-1">13.watch 和 watchEffect 的区别 <a class="header-anchor" href="#_13-watch-和-watcheffect-的区别" aria-label="Permalink to &quot;13.watch 和 watchEffect 的区别&quot;">​</a></h1><ul><li>watchEffect 立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数</li><li>watch 侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> effect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactiveEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(getter, scheduler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getter 函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.name </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据变化后, 会调用 schduler 内部都会再次触发 effect.run()重新运行 getter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. getter 函数 2.cb 函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.name,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据变化后, 会调用 scheduler, 内部会调用 cb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { })</span></span></code></pre></div>`,3),h=[e];function l(p,k,c,r,E,d){return a(),i("div",null,h)}const o=s(n,[["render",l]]);export{f as __pageData,o as default};
