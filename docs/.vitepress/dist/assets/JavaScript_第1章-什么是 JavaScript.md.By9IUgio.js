import{_ as a,c as i,o as t,a7 as e}from"./chunks/framework.BvW0rtPM.js";const S=JSON.parse('{"title":"什么是 JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/第1章-什么是 JavaScript.md","filePath":"JavaScript/第1章-什么是 JavaScript.md"}'),r={name:"JavaScript/第1章-什么是 JavaScript.md"},l=e('<h1 id="什么是-javascript" tabindex="-1">什么是 JavaScript <a class="header-anchor" href="#什么是-javascript" aria-label="Permalink to &quot;什么是 JavaScript&quot;">​</a></h1><h3 id="javascript-是什么" tabindex="-1">JavaScript 是什么 <a class="header-anchor" href="#javascript-是什么" aria-label="Permalink to &quot;JavaScript 是什么&quot;">​</a></h3><p>虽然 JavaScript 和 ECMAScript 基本上是同义词, 但是 JavaScript 远远不限于 ECMA-262 所定义的那样</p><p>完整的 JavaScript 包含以下几个部分</p><ol><li>核心(ECMAScript)：有 ECMA-262 定义并提供核心功能</li><li>文档对象模型(DOM)：提供与网页内容交互的方法和接口</li><li>浏览器对象模型(BOM)：提供和浏览器交互的方法和接口</li></ol><h3 id="javascript-实现" tabindex="-1">JavaScript 实现 <a class="header-anchor" href="#javascript-实现" aria-label="Permalink to &quot;JavaScript 实现&quot;">​</a></h3><h4 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h4><p>在基本层面上, ECMA-262 描述 JavaScript 包含如下几个部分</p><p>语法、类型、语句、关键字、保留字、操作符、全局对象</p><h4 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h4><p>文档对象模型(Document Object Model)是一个应用编程接口(API), 用于在 HTML 中使用扩展的 XML。</p><h5 id="dom-级别" tabindex="-1">DOM 级别 <a class="header-anchor" href="#dom-级别" aria-label="Permalink to &quot;DOM 级别&quot;">​</a></h5><p>DOMLevel1 由 DOM Core 和 DOM HTML 组成。 前者提供了一中映射 XML 文档，从而方便访问和操作文档任意部分的方式；后者扩展了前者并增加了特定于 HTML 的对象和方法。</p><p>DOMLevel2 新增了以下模块</p><ol><li>DOM 视图：描述追踪文档不同视图（如应用 CSS 样式前后的文档）的接口</li><li>DOM 事件：描述事件及事件处理的接口</li><li>DOM 样式：描述处理元素 CSS 样式的接口</li><li>DOM 遍历和范围：描述遍历和操作 DOM 树的接口</li></ol><p>DOMLevel3 进一步扩展了 DOM，增加了统一的方式加载和保存文档的方法（包含在一个叫 DOM Load and Save 的新模块中），还有验证文档的方法（DOM Validation）</p><p>DOMLevel4 新增的内容包括替代 Mutation Events 的 Mutation Observes</p><h4 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h4><p>IE3 和 Netscape Navigator 3 提供的浏览器对象模型（BOM）API，用于支持访问和操作浏览器的窗口。</p><p>BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的扩展都归在 BOM 的范畴内。比如</p><ol><li>弹出新浏览器窗口的能力</li><li>移动、缩放和关闭浏览器窗口的能力</li><li>navigator 对象，提供关于浏览器的详尽信息</li><li>location 对象，提供浏览器加载页面的详尽信息</li><li>screen 对象，提供关于用户屏幕分辨率的详尽信息</li><li>performance 对象，提供浏览器占用内存、导航行为和时间统计的详尽信息</li><li>对 cookie 的支持</li><li>对其他自定义对象，如 XMLHttpRequest 和 IE 的 ActiveXObject</li></ol><h3 id="javascript-的不同版本" tabindex="-1">JavaScript 的不同版本 <a class="header-anchor" href="#javascript-的不同版本" aria-label="Permalink to &quot;JavaScript 的不同版本&quot;">​</a></h3>',22),c=[l];function o(p,s,n,h,d,M){return t(),i("div",null,c)}const _=a(r,[["render",o]]);export{S as __pageData,_ as default};
